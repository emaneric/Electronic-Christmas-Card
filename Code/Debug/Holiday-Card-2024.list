
Holiday-Card-2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa4  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800505c  0800505c  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f0  080050f0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  080050f0  080050f0  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050f0  080050f0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f0  080050f0  000060f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050f4  080050f4  000060f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080050f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08005104  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08005104  000071b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb04  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002517  00000000  00000000  00015b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00018050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b67  00000000  00000000  00018f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164c2  00000000  00000000  00019a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001031b  00000000  00000000  0002ff49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091023  00000000  00000000  00040264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1287  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003524  00000000  00000000  000d12cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d47f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005044 	.word	0x08005044

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08005044 	.word	0x08005044

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <buzzer_init>:
 *      Author: eric
 */

#include <buzzer.h>

void buzzer_init(buzzer_HandleTypeDef *buzzer, TIM_HandleTypeDef *buzz_timer, const uint16_t channel_1, const uint16_t channel_2, TIM_HandleTypeDef *interrupt_timer){
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	0019      	movs	r1, r3
 8000224:	1dbb      	adds	r3, r7, #6
 8000226:	801a      	strh	r2, [r3, #0]
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	1c0a      	adds	r2, r1, #0
 800022c:	801a      	strh	r2, [r3, #0]

	buzzer->buzz_timer = buzz_timer;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	601a      	str	r2, [r3, #0]
	buzzer->channel_1 = channel_1;
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	1dba      	adds	r2, r7, #6
 8000238:	8812      	ldrh	r2, [r2, #0]
 800023a:	809a      	strh	r2, [r3, #4]
	buzzer->channel_2 = channel_2;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	1d3a      	adds	r2, r7, #4
 8000240:	8812      	ldrh	r2, [r2, #0]
 8000242:	80da      	strh	r2, [r3, #6]
	buzzer->interrupt_timer = interrupt_timer;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	69ba      	ldr	r2, [r7, #24]
 8000248:	609a      	str	r2, [r3, #8]
	buzzer->state = 0;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2200      	movs	r2, #0
 800024e:	731a      	strb	r2, [r3, #12]
	buzzer->melody_index = 0;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	2200      	movs	r2, #0
 8000254:	81da      	strh	r2, [r3, #14]
}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	46bd      	mov	sp, r7
 800025a:	b004      	add	sp, #16
 800025c:	bd80      	pop	{r7, pc}

0800025e <buzzer_off>:

void buzzer_off(buzzer_HandleTypeDef *buzzer){
 800025e:	b580      	push	{r7, lr}
 8000260:	b082      	sub	sp, #8
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Stop_IT(buzzer->interrupt_timer);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	0018      	movs	r0, r3
 800026c:	f003 fce8 	bl	8003c40 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(buzzer->buzz_timer , TIM_CHANNEL_2);
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2104      	movs	r1, #4
 8000276:	0018      	movs	r0, r3
 8000278:	f003 fe48 	bl	8003f0c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(buzzer->buzz_timer , TIM_CHANNEL_3);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	2108      	movs	r1, #8
 8000282:	0018      	movs	r0, r3
 8000284:	f003 fe42 	bl	8003f0c <HAL_TIM_PWM_Stop>
	buzzer->state = 0;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	731a      	strb	r2, [r3, #12]
}
 800028e:	46c0      	nop			@ (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b002      	add	sp, #8
 8000294:	bd80      	pop	{r7, pc}

08000296 <buzzer_write>:

void buzzer_write(buzzer_HandleTypeDef *buzzer, uint16_t frequency, uint16_t duration){
 8000296:	b580      	push	{r7, lr}
 8000298:	b084      	sub	sp, #16
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
 800029e:	0008      	movs	r0, r1
 80002a0:	0011      	movs	r1, r2
 80002a2:	1cbb      	adds	r3, r7, #2
 80002a4:	1c02      	adds	r2, r0, #0
 80002a6:	801a      	strh	r2, [r3, #0]
 80002a8:	003b      	movs	r3, r7
 80002aa:	1c0a      	adds	r2, r1, #0
 80002ac:	801a      	strh	r2, [r3, #0]

	/* Update buzzer timer values to get the correct PWM frequency and 50% duty cycle */
	uint16_t ARR_VAL = (HAL_RCC_GetSysClockFreq() / frequency) - 1;
 80002ae:	f002 ffc9 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 80002b2:	0002      	movs	r2, r0
 80002b4:	1cbb      	adds	r3, r7, #2
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	0019      	movs	r1, r3
 80002ba:	0010      	movs	r0, r2
 80002bc:	f7ff ff20 	bl	8000100 <__udivsi3>
 80002c0:	0003      	movs	r3, r0
 80002c2:	b29a      	uxth	r2, r3
 80002c4:	210e      	movs	r1, #14
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	3a01      	subs	r2, #1
 80002ca:	801a      	strh	r2, [r3, #0]
	uint16_t CCR_VAL = (ARR_VAL + 1)/ 2;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	3301      	adds	r3, #1
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	da00      	bge.n	80002d8 <buzzer_write+0x42>
 80002d6:	3301      	adds	r3, #1
 80002d8:	105b      	asrs	r3, r3, #1
 80002da:	001a      	movs	r2, r3
 80002dc:	210c      	movs	r1, #12
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(buzzer->buzz_timer, ARR_VAL);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	200e      	movs	r0, #14
 80002ea:	183a      	adds	r2, r7, r0
 80002ec:	8812      	ldrh	r2, [r2, #0]
 80002ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	183a      	adds	r2, r7, r0
 80002f6:	8812      	ldrh	r2, [r2, #0]
 80002f8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(buzzer->buzz_timer, buzzer->channel_1, CCR_VAL);
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	889b      	ldrh	r3, [r3, #4]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d106      	bne.n	8000310 <buzzer_write+0x7a>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	187a      	adds	r2, r7, r1
 800030a:	8812      	ldrh	r2, [r2, #0]
 800030c:	635a      	str	r2, [r3, #52]	@ 0x34
 800030e:	e036      	b.n	800037e <buzzer_write+0xe8>
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	889b      	ldrh	r3, [r3, #4]
 8000314:	2b04      	cmp	r3, #4
 8000316:	d107      	bne.n	8000328 <buzzer_write+0x92>
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	230c      	movs	r3, #12
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	6393      	str	r3, [r2, #56]	@ 0x38
 8000326:	e02a      	b.n	800037e <buzzer_write+0xe8>
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	889b      	ldrh	r3, [r3, #4]
 800032c:	2b08      	cmp	r3, #8
 800032e:	d107      	bne.n	8000340 <buzzer_write+0xaa>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	230c      	movs	r3, #12
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800033e:	e01e      	b.n	800037e <buzzer_write+0xe8>
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	889b      	ldrh	r3, [r3, #4]
 8000344:	2b0c      	cmp	r3, #12
 8000346:	d107      	bne.n	8000358 <buzzer_write+0xc2>
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	230c      	movs	r3, #12
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	881b      	ldrh	r3, [r3, #0]
 8000354:	6413      	str	r3, [r2, #64]	@ 0x40
 8000356:	e012      	b.n	800037e <buzzer_write+0xe8>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	889b      	ldrh	r3, [r3, #4]
 800035c:	2b10      	cmp	r3, #16
 800035e:	d107      	bne.n	8000370 <buzzer_write+0xda>
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	230c      	movs	r3, #12
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	881b      	ldrh	r3, [r3, #0]
 800036c:	6593      	str	r3, [r2, #88]	@ 0x58
 800036e:	e006      	b.n	800037e <buzzer_write+0xe8>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	681a      	ldr	r2, [r3, #0]
 8000376:	230c      	movs	r3, #12
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	65d3      	str	r3, [r2, #92]	@ 0x5c
	__HAL_TIM_SET_COMPARE(buzzer->buzz_timer, buzzer->channel_2, CCR_VAL);
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	88db      	ldrh	r3, [r3, #6]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d107      	bne.n	8000396 <buzzer_write+0x100>
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	220c      	movs	r2, #12
 800038e:	18ba      	adds	r2, r7, r2
 8000390:	8812      	ldrh	r2, [r2, #0]
 8000392:	635a      	str	r2, [r3, #52]	@ 0x34
 8000394:	e036      	b.n	8000404 <buzzer_write+0x16e>
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	88db      	ldrh	r3, [r3, #6]
 800039a:	2b04      	cmp	r3, #4
 800039c:	d107      	bne.n	80003ae <buzzer_write+0x118>
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	230c      	movs	r3, #12
 80003a6:	18fb      	adds	r3, r7, r3
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	6393      	str	r3, [r2, #56]	@ 0x38
 80003ac:	e02a      	b.n	8000404 <buzzer_write+0x16e>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	88db      	ldrh	r3, [r3, #6]
 80003b2:	2b08      	cmp	r3, #8
 80003b4:	d107      	bne.n	80003c6 <buzzer_write+0x130>
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	230c      	movs	r3, #12
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80003c4:	e01e      	b.n	8000404 <buzzer_write+0x16e>
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	88db      	ldrh	r3, [r3, #6]
 80003ca:	2b0c      	cmp	r3, #12
 80003cc:	d107      	bne.n	80003de <buzzer_write+0x148>
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	230c      	movs	r3, #12
 80003d6:	18fb      	adds	r3, r7, r3
 80003d8:	881b      	ldrh	r3, [r3, #0]
 80003da:	6413      	str	r3, [r2, #64]	@ 0x40
 80003dc:	e012      	b.n	8000404 <buzzer_write+0x16e>
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	88db      	ldrh	r3, [r3, #6]
 80003e2:	2b10      	cmp	r3, #16
 80003e4:	d107      	bne.n	80003f6 <buzzer_write+0x160>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	230c      	movs	r3, #12
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	881b      	ldrh	r3, [r3, #0]
 80003f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80003f4:	e006      	b.n	8000404 <buzzer_write+0x16e>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	230c      	movs	r3, #12
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	65d3      	str	r3, [r2, #92]	@ 0x5c
	HAL_TIM_PWM_Start(buzzer->buzz_timer , buzzer->channel_1);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	889b      	ldrh	r3, [r3, #4]
 800040c:	0019      	movs	r1, r3
 800040e:	0010      	movs	r0, r2
 8000410:	f003 fca4 	bl	8003d5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(buzzer->buzz_timer , buzzer->channel_2);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	88db      	ldrh	r3, [r3, #6]
 800041c:	0019      	movs	r1, r3
 800041e:	0010      	movs	r0, r2
 8000420:	f003 fc9c 	bl	8003d5c <HAL_TIM_PWM_Start>

	/* Update interrupt timer registers to turn off the buzzer after correct delay
	 * A duration of 0 will turn the buzzer on until manually turned off with buzzer_off */
	if (duration != 0){
 8000424:	003b      	movs	r3, r7
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d01a      	beq.n	8000462 <buzzer_write+0x1cc>
		__HAL_TIM_SET_AUTORELOAD(buzzer->interrupt_timer, duration); //Set ARR to the duration. Since timer period is 1ms, duration in ms can be used directly
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	003a      	movs	r2, r7
 8000434:	8812      	ldrh	r2, [r2, #0]
 8000436:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	003a      	movs	r2, r7
 800043e:	8812      	ldrh	r2, [r2, #0]
 8000440:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COUNTER(buzzer->interrupt_timer, 0);	//Reset timer count to 0
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2200      	movs	r2, #0
 800044a:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_CLEAR_FLAG(buzzer->interrupt_timer, TIM_FLAG_UPDATE);	//Clear the interrupt flag to prevent the interrupt triggering immediately
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2202      	movs	r2, #2
 8000454:	4252      	negs	r2, r2
 8000456:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(buzzer->interrupt_timer);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	0018      	movs	r0, r3
 800045e:	f003 fba1 	bl	8003ba4 <HAL_TIM_Base_Start_IT>
	}

	buzzer->state = 1;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2201      	movs	r2, #1
 8000466:	731a      	strb	r2, [r3, #12]
}
 8000468:	46c0      	nop			@ (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b004      	add	sp, #16
 800046e:	bd80      	pop	{r7, pc}

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b086      	sub	sp, #24
 8000474:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000476:	f000 fddb 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047a:	f000 f8df 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047e:	f000 fb5f 	bl	8000b40 <MX_GPIO_Init>
  MX_RTC_Init();
 8000482:	f000 f99d 	bl	80007c0 <MX_RTC_Init>
  MX_TIM14_Init();
 8000486:	f000 fae1 	bl	8000a4c <MX_TIM14_Init>
  MX_TIM16_Init();
 800048a:	f000 fb2f 	bl	8000aec <MX_TIM16_Init>
  MX_TIM1_Init();
 800048e:	f000 fa03 	bl	8000898 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000492:	f000 f929 	bl	80006e8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, 1);
 8000496:	2380      	movs	r3, #128	@ 0x80
 8000498:	019b      	lsls	r3, r3, #6
 800049a:	485e      	ldr	r0, [pc, #376]	@ (8000614 <main+0x1a4>)
 800049c:	2201      	movs	r2, #1
 800049e:	0019      	movs	r1, r3
 80004a0:	f002 fa4c 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 1);
 80004a4:	2380      	movs	r3, #128	@ 0x80
 80004a6:	01db      	lsls	r3, r3, #7
 80004a8:	485a      	ldr	r0, [pc, #360]	@ (8000614 <main+0x1a4>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	0019      	movs	r1, r3
 80004ae:	f002 fa45 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 1);
 80004b2:	2380      	movs	r3, #128	@ 0x80
 80004b4:	021b      	lsls	r3, r3, #8
 80004b6:	4857      	ldr	r0, [pc, #348]	@ (8000614 <main+0x1a4>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	0019      	movs	r1, r3
 80004bc:	f002 fa3e 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 1);
 80004c0:	2380      	movs	r3, #128	@ 0x80
 80004c2:	0059      	lsls	r1, r3, #1
 80004c4:	23a0      	movs	r3, #160	@ 0xa0
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	2201      	movs	r2, #1
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fa36 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, 1);
 80004d0:	2380      	movs	r3, #128	@ 0x80
 80004d2:	0099      	lsls	r1, r3, #2
 80004d4:	23a0      	movs	r3, #160	@ 0xa0
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2201      	movs	r2, #1
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fa2e 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R5_GPIO_Port, R5_Pin, 1);
 80004e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000618 <main+0x1a8>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	2140      	movs	r1, #64	@ 0x40
 80004e6:	0018      	movs	r0, r3
 80004e8:	f002 fa28 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R6_GPIO_Port, R6_Pin, 1);
 80004ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000618 <main+0x1a8>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	2180      	movs	r1, #128	@ 0x80
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 fa22 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R7_GPIO_Port, R7_Pin, 1);
 80004f8:	2380      	movs	r3, #128	@ 0x80
 80004fa:	00d9      	lsls	r1, r3, #3
 80004fc:	23a0      	movs	r3, #160	@ 0xa0
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	2201      	movs	r2, #1
 8000502:	0018      	movs	r0, r3
 8000504:	f002 fa1a 	bl	800293c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, 0);
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	015b      	lsls	r3, r3, #5
 800050c:	4841      	ldr	r0, [pc, #260]	@ (8000614 <main+0x1a4>)
 800050e:	2200      	movs	r2, #0
 8000510:	0019      	movs	r1, r3
 8000512:	f002 fa13 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, 0);
 8000516:	2380      	movs	r3, #128	@ 0x80
 8000518:	011b      	lsls	r3, r3, #4
 800051a:	483e      	ldr	r0, [pc, #248]	@ (8000614 <main+0x1a4>)
 800051c:	2200      	movs	r2, #0
 800051e:	0019      	movs	r1, r3
 8000520:	f002 fa0c 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, 0);
 8000524:	2380      	movs	r3, #128	@ 0x80
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	483a      	ldr	r0, [pc, #232]	@ (8000614 <main+0x1a4>)
 800052a:	2200      	movs	r2, #0
 800052c:	0019      	movs	r1, r3
 800052e:	f002 fa05 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, 0);
 8000532:	4b38      	ldr	r3, [pc, #224]	@ (8000614 <main+0x1a4>)
 8000534:	2200      	movs	r2, #0
 8000536:	2104      	movs	r1, #4
 8000538:	0018      	movs	r0, r3
 800053a:	f002 f9ff 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, 0);
 800053e:	4b35      	ldr	r3, [pc, #212]	@ (8000614 <main+0x1a4>)
 8000540:	2200      	movs	r2, #0
 8000542:	2102      	movs	r1, #2
 8000544:	0018      	movs	r0, r3
 8000546:	f002 f9f9 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, 0);
 800054a:	4b32      	ldr	r3, [pc, #200]	@ (8000614 <main+0x1a4>)
 800054c:	2200      	movs	r2, #0
 800054e:	2101      	movs	r1, #1
 8000550:	0018      	movs	r0, r3
 8000552:	f002 f9f3 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, 0);
 8000556:	23a0      	movs	r3, #160	@ 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	2200      	movs	r2, #0
 800055c:	2180      	movs	r1, #128	@ 0x80
 800055e:	0018      	movs	r0, r3
 8000560:	f002 f9ec 	bl	800293c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, 0);
 8000564:	23a0      	movs	r3, #160	@ 0xa0
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	2200      	movs	r2, #0
 800056a:	2140      	movs	r1, #64	@ 0x40
 800056c:	0018      	movs	r0, r3
 800056e:	f002 f9e5 	bl	800293c <HAL_GPIO_WritePin>

	// Always calibrate ADC first
	HAL_ADCEx_Calibration_Start(&hadc1);
 8000572:	4b2a      	ldr	r3, [pc, #168]	@ (800061c <main+0x1ac>)
 8000574:	0018      	movs	r0, r3
 8000576:	f001 fe83 	bl	8002280 <HAL_ADCEx_Calibration_Start>

	// Start the conversion sequence
	HAL_ADC_Start(&hadc1);
 800057a:	4b28      	ldr	r3, [pc, #160]	@ (800061c <main+0x1ac>)
 800057c:	0018      	movs	r0, r3
 800057e:	f001 f90d 	bl	800179c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0xFFFF);
 8000582:	4a27      	ldr	r2, [pc, #156]	@ (8000620 <main+0x1b0>)
 8000584:	4b25      	ldr	r3, [pc, #148]	@ (800061c <main+0x1ac>)
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f001 f955 	bl	8001838 <HAL_ADC_PollForConversion>
	uint32_t vrefint_raw = HAL_ADC_GetValue(&hadc1);
 800058e:	4b23      	ldr	r3, [pc, #140]	@ (800061c <main+0x1ac>)
 8000590:	0018      	movs	r0, r3
 8000592:	f001 f9e5 	bl	8001960 <HAL_ADC_GetValue>
 8000596:	0003      	movs	r3, r0
 8000598:	60fb      	str	r3, [r7, #12]

	/*
	 * This macro calculates the vdda voltage (as a uint32_t representing the voltage in milliVolts)
	 * using the vref internal raw adc value, and the internal calibration value in ROM
	 */
	uint32_t vdda_voltage = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(vrefint_raw, ADC_RESOLUTION_12B);
 800059a:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <main+0x1b4>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	001a      	movs	r2, r3
 80005a0:	4b21      	ldr	r3, [pc, #132]	@ (8000628 <main+0x1b8>)
 80005a2:	4353      	muls	r3, r2
 80005a4:	68f9      	ldr	r1, [r7, #12]
 80005a6:	0018      	movs	r0, r3
 80005a8:	f7ff fdaa 	bl	8000100 <__udivsi3>
 80005ac:	0003      	movs	r3, r0
 80005ae:	60bb      	str	r3, [r7, #8]
	__NOP();
 80005b0:	46c0      	nop			@ (mov r8, r8)


	uint8_t btn1_val = 0;
 80005b2:	1dfb      	adds	r3, r7, #7
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]


	//I think I should add functionality to setup a queue of buzzer tones.
	//That way the code could automatically tigger for however long is needed for however many tones are needed
	//That would make it easier to play pre-defined music in an elegant way
	buzzer_init(&buzzer, &htim1, TIM_CHANNEL_2, TIM_CHANNEL_3, &htim16);
 80005b8:	491c      	ldr	r1, [pc, #112]	@ (800062c <main+0x1bc>)
 80005ba:	481d      	ldr	r0, [pc, #116]	@ (8000630 <main+0x1c0>)
 80005bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <main+0x1c4>)
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2308      	movs	r3, #8
 80005c2:	2204      	movs	r2, #4
 80005c4:	f7ff fe28 	bl	8000218 <buzzer_init>
	buzzer_write(&buzzer, 1000, 0);
 80005c8:	23fa      	movs	r3, #250	@ 0xfa
 80005ca:	0099      	lsls	r1, r3, #2
 80005cc:	4b18      	ldr	r3, [pc, #96]	@ (8000630 <main+0x1c0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	0018      	movs	r0, r3
 80005d2:	f7ff fe60 	bl	8000296 <buzzer_write>
	HAL_Delay(1100);
 80005d6:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <main+0x1c8>)
 80005d8:	0018      	movs	r0, r3
 80005da:	f000 fdaf 	bl	800113c <HAL_Delay>
	buzzer_write(&buzzer, 2000, 0);
 80005de:	23fa      	movs	r3, #250	@ 0xfa
 80005e0:	00d9      	lsls	r1, r3, #3
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <main+0x1c0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff fe55 	bl	8000296 <buzzer_write>
	HAL_Delay(1100);
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <main+0x1c8>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fda4 	bl	800113c <HAL_Delay>
	buzzer_write(&buzzer, 3000, 0);
 80005f4:	490c      	ldr	r1, [pc, #48]	@ (8000628 <main+0x1b8>)
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <main+0x1c0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff fe4b 	bl	8000296 <buzzer_write>
	HAL_Delay(1100);
 8000600:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <main+0x1c8>)
 8000602:	0018      	movs	r0, r3
 8000604:	f000 fd9a 	bl	800113c <HAL_Delay>
	buzzer_off(&buzzer);
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <main+0x1c0>)
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff fe27 	bl	800025e <buzzer_off>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	e7fd      	b.n	8000610 <main+0x1a0>
 8000614:	50000400 	.word	0x50000400
 8000618:	50000800 	.word	0x50000800
 800061c:	20000028 	.word	0x20000028
 8000620:	0000ffff 	.word	0x0000ffff
 8000624:	1fff75aa 	.word	0x1fff75aa
 8000628:	00000bb8 	.word	0x00000bb8
 800062c:	200000b8 	.word	0x200000b8
 8000630:	2000019c 	.word	0x2000019c
 8000634:	20000150 	.word	0x20000150
 8000638:	0000044c 	.word	0x0000044c

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b590      	push	{r4, r7, lr}
 800063e:	b093      	sub	sp, #76	@ 0x4c
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	2414      	movs	r4, #20
 8000644:	193b      	adds	r3, r7, r4
 8000646:	0018      	movs	r0, r3
 8000648:	2334      	movs	r3, #52	@ 0x34
 800064a:	001a      	movs	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f004 fccd 	bl	8004fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	0018      	movs	r0, r3
 8000656:	2310      	movs	r3, #16
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f004 fcc6 	bl	8004fec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2380      	movs	r3, #128	@ 0x80
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	0018      	movs	r0, r3
 8000666:	f002 f995 	bl	8002994 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800066a:	f002 f985 	bl	8002978 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <SystemClock_Config+0xa8>)
 8000670:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <SystemClock_Config+0xa8>)
 8000674:	2118      	movs	r1, #24
 8000676:	438a      	bics	r2, r1
 8000678:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2206      	movs	r2, #6
 800067e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2201      	movs	r2, #1
 8000684:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2280      	movs	r2, #128	@ 0x80
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2240      	movs	r2, #64	@ 0x40
 8000698:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	f002 f9b6 	bl	8002a14 <HAL_RCC_OscConfig>
 80006a8:	1e03      	subs	r3, r0, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006ac:	f000 fb12 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2207      	movs	r2, #7
 80006b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2100      	movs	r1, #0
 80006cc:	0018      	movs	r0, r3
 80006ce:	f002 fcb1 	bl	8003034 <HAL_RCC_ClockConfig>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006d6:	f000 fafd 	bl	8000cd4 <Error_Handler>
  }
}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b013      	add	sp, #76	@ 0x4c
 80006e0:	bd90      	pop	{r4, r7, pc}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	0018      	movs	r0, r3
 80006f2:	230c      	movs	r3, #12
 80006f4:	001a      	movs	r2, r3
 80006f6:	2100      	movs	r1, #0
 80006f8:	f004 fc78 	bl	8004fec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fc:	4b2d      	ldr	r3, [pc, #180]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 80006fe:	4a2e      	ldr	r2, [pc, #184]	@ (80007b8 <MX_ADC1_Init+0xd0>)
 8000700:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000702:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000704:	2280      	movs	r2, #128	@ 0x80
 8000706:	05d2      	lsls	r2, r2, #23
 8000708:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000710:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 800071e:	2204      	movs	r2, #4
 8000720:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000724:	2200      	movs	r2, #0
 8000726:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000728:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 800072a:	2200      	movs	r2, #0
 800072c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000730:	2200      	movs	r2, #0
 8000732:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000736:	2201      	movs	r2, #1
 8000738:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073a:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 800073c:	2220      	movs	r2, #32
 800073e:	2100      	movs	r1, #0
 8000740:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000750:	222c      	movs	r2, #44	@ 0x2c
 8000752:	2100      	movs	r1, #0
 8000754:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000758:	2200      	movs	r2, #0
 800075a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 800075e:	2205      	movs	r2, #5
 8000760:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000764:	2205      	movs	r2, #5
 8000766:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 800076a:	223c      	movs	r2, #60	@ 0x3c
 800076c:	2100      	movs	r1, #0
 800076e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000772:	2200      	movs	r2, #0
 8000774:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fe67 	bl	800144c <HAL_ADC_Init>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000782:	f000 faa7 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	4a0c      	ldr	r2, [pc, #48]	@ (80007bc <MX_ADC1_Init+0xd4>)
 800078a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	1d3a      	adds	r2, r7, #4
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_ADC1_Init+0xcc>)
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 fa1a 	bl	8001bd8 <HAL_ADC_ConfigChannel>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80007a8:	f000 fa94 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b004      	add	sp, #16
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000028 	.word	0x20000028
 80007b8:	40012400 	.word	0x40012400
 80007bc:	b4002000 	.word	0xb4002000

080007c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	0018      	movs	r0, r3
 80007ca:	2314      	movs	r3, #20
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f004 fc0c 	bl	8004fec <memset>
  RTC_DateTypeDef sDate = {0};
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007da:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <MX_RTC_Init+0xd0>)
 80007dc:	4a2d      	ldr	r2, [pc, #180]	@ (8000894 <MX_RTC_Init+0xd4>)
 80007de:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_RTC_Init+0xd0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80007e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000890 <MX_RTC_Init+0xd0>)
 80007e8:	227f      	movs	r2, #127	@ 0x7f
 80007ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80007ec:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_RTC_Init+0xd0>)
 80007ee:	22ff      	movs	r2, #255	@ 0xff
 80007f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f2:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <MX_RTC_Init+0xd0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007f8:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_RTC_Init+0xd0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007fe:	4b24      	ldr	r3, [pc, #144]	@ (8000890 <MX_RTC_Init+0xd0>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000804:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_RTC_Init+0xd0>)
 8000806:	2280      	movs	r2, #128	@ 0x80
 8000808:	05d2      	lsls	r2, r2, #23
 800080a:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800080c:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <MX_RTC_Init+0xd0>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_RTC_Init+0xd0>)
 8000814:	0018      	movs	r0, r3
 8000816:	f002 febd 	bl	8003594 <HAL_RTC_Init>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800081e:	f000 fa59 	bl	8000cd4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000846:	1d39      	adds	r1, r7, #4
 8000848:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_RTC_Init+0xd0>)
 800084a:	2201      	movs	r2, #1
 800084c:	0018      	movs	r0, r3
 800084e:	f002 ff43 	bl	80036d8 <HAL_RTC_SetTime>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8000856:	f000 fa3d 	bl	8000cd4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800085a:	003b      	movs	r3, r7
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000860:	003b      	movs	r3, r7
 8000862:	2201      	movs	r2, #1
 8000864:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000866:	003b      	movs	r3, r7
 8000868:	2201      	movs	r2, #1
 800086a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800086c:	003b      	movs	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000872:	0039      	movs	r1, r7
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_RTC_Init+0xd0>)
 8000876:	2201      	movs	r2, #1
 8000878:	0018      	movs	r0, r3
 800087a:	f002 ffd5 	bl	8003828 <HAL_RTC_SetDate>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8000882:	f000 fa27 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b006      	add	sp, #24
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	2000008c 	.word	0x2000008c
 8000894:	40002800 	.word	0x40002800

08000898 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b09c      	sub	sp, #112	@ 0x70
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	2360      	movs	r3, #96	@ 0x60
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	0018      	movs	r0, r3
 80008a4:	2310      	movs	r3, #16
 80008a6:	001a      	movs	r2, r3
 80008a8:	2100      	movs	r1, #0
 80008aa:	f004 fb9f 	bl	8004fec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ae:	2354      	movs	r3, #84	@ 0x54
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	0018      	movs	r0, r3
 80008b4:	230c      	movs	r3, #12
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f004 fb97 	bl	8004fec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	2338      	movs	r3, #56	@ 0x38
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	231c      	movs	r3, #28
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f004 fb8f 	bl	8004fec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	0018      	movs	r0, r3
 80008d2:	2334      	movs	r3, #52	@ 0x34
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f004 fb88 	bl	8004fec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008dc:	4b59      	ldr	r3, [pc, #356]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 80008de:	4a5a      	ldr	r2, [pc, #360]	@ (8000a48 <MX_TIM1_Init+0x1b0>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008e2:	4b58      	ldr	r3, [pc, #352]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b56      	ldr	r3, [pc, #344]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 80008ee:	4b55      	ldr	r3, [pc, #340]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 80008f0:	22fa      	movs	r2, #250	@ 0xfa
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f6:	4b53      	ldr	r3, [pc, #332]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008fc:	4b51      	ldr	r3, [pc, #324]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000902:	4b50      	ldr	r3, [pc, #320]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000908:	4b4e      	ldr	r3, [pc, #312]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 800090a:	0018      	movs	r0, r3
 800090c:	f003 f8f2 	bl	8003af4 <HAL_TIM_Base_Init>
 8000910:	1e03      	subs	r3, r0, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000914:	f000 f9de 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000918:	2160      	movs	r1, #96	@ 0x60
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	0152      	lsls	r2, r2, #5
 8000920:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000922:	187a      	adds	r2, r7, r1
 8000924:	4b47      	ldr	r3, [pc, #284]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 8000926:	0011      	movs	r1, r2
 8000928:	0018      	movs	r0, r3
 800092a:	f003 fd7d 	bl	8004428 <HAL_TIM_ConfigClockSource>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000932:	f000 f9cf 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000936:	4b43      	ldr	r3, [pc, #268]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 8000938:	0018      	movs	r0, r3
 800093a:	f003 f9af 	bl	8003c9c <HAL_TIM_PWM_Init>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000942:	f000 f9c7 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2154      	movs	r1, #84	@ 0x54
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800095a:	187a      	adds	r2, r7, r1
 800095c:	4b39      	ldr	r3, [pc, #228]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f004 fa2d 	bl	8004dc0 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800096a:	f000 f9b3 	bl	8000cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096e:	2138      	movs	r1, #56	@ 0x38
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2260      	movs	r2, #96	@ 0x60
 8000974:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2000;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	22fa      	movs	r2, #250	@ 0xfa
 800097a:	00d2      	lsls	r2, r2, #3
 800097c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000996:	187b      	adds	r3, r7, r1
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800099c:	1879      	adds	r1, r7, r1
 800099e:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	0018      	movs	r0, r3
 80009a4:	f003 fc40 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80009ac:	f000 f992 	bl	8000cd4 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80009b0:	2138      	movs	r1, #56	@ 0x38
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2202      	movs	r2, #2
 80009b6:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b8:	1879      	adds	r1, r7, r1
 80009ba:	4b22      	ldr	r3, [pc, #136]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 80009bc:	2208      	movs	r2, #8
 80009be:	0018      	movs	r0, r3
 80009c0:	f003 fc32 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 80009c8:	f000 f984 	bl	8000cd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	0192      	lsls	r2, r2, #6
 80009f0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2280      	movs	r2, #128	@ 0x80
 8000a08:	0492      	lsls	r2, r2, #18
 8000a0a:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a1e:	1d3a      	adds	r2, r7, #4
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 8000a22:	0011      	movs	r1, r2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f004 fa2d 	bl	8004e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a2a:	1e03      	subs	r3, r0, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM1_Init+0x19a>
  {
    Error_Handler();
 8000a2e:	f000 f951 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a32:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <MX_TIM1_Init+0x1ac>)
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fa31 	bl	8000e9c <HAL_TIM_MspPostInit>

}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b01c      	add	sp, #112	@ 0x70
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	200000b8 	.word	0x200000b8
 8000a48:	40012c00 	.word	0x40012c00

08000a4c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	0018      	movs	r0, r3
 8000a56:	231c      	movs	r3, #28
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f004 fac6 	bl	8004fec <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae0 <MX_TIM14_Init+0x94>)
 8000a62:	4a20      	ldr	r2, [pc, #128]	@ (8000ae4 <MX_TIM14_Init+0x98>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <MX_TIM14_Init+0x94>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <MX_TIM14_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <MX_TIM14_Init+0x94>)
 8000a74:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae8 <MX_TIM14_Init+0x9c>)
 8000a76:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <MX_TIM14_Init+0x94>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <MX_TIM14_Init+0x94>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <MX_TIM14_Init+0x94>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f003 f834 	bl	8003af4 <HAL_TIM_Base_Init>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000a90:	f000 f920 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <MX_TIM14_Init+0x94>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f003 f900 	bl	8003c9c <HAL_TIM_PWM_Init>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000aa0:	f000 f918 	bl	8000cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2260      	movs	r2, #96	@ 0x60
 8000aa8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abc:	1d39      	adds	r1, r7, #4
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_TIM14_Init+0x94>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f003 fbb0 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000acc:	f000 f902 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <MX_TIM14_Init+0x94>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f9e2 	bl	8000e9c <HAL_TIM_MspPostInit>

}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b008      	add	sp, #32
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000104 	.word	0x20000104
 8000ae4:	40002000 	.word	0x40002000
 8000ae8:	0000ffff 	.word	0x0000ffff

08000aec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_TIM16_Init+0x44>)
 8000af2:	4a10      	ldr	r2, [pc, #64]	@ (8000b34 <MX_TIM16_Init+0x48>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000 - 1;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_TIM16_Init+0x44>)
 8000af8:	4a0f      	ldr	r2, [pc, #60]	@ (8000b38 <MX_TIM16_Init+0x4c>)
 8000afa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_TIM16_Init+0x44>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_TIM16_Init+0x44>)
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <MX_TIM16_Init+0x50>)
 8000b06:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_TIM16_Init+0x44>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_TIM16_Init+0x44>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_TIM16_Init+0x44>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <MX_TIM16_Init+0x44>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f002 ffe9 	bl	8003af4 <HAL_TIM_Base_Init>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000b26:	f000 f8d5 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000150 	.word	0x20000150
 8000b34:	40014400 	.word	0x40014400
 8000b38:	00003e7f 	.word	0x00003e7f
 8000b3c:	0000ffff 	.word	0x0000ffff

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b08b      	sub	sp, #44	@ 0x2c
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	2414      	movs	r4, #20
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	2314      	movs	r3, #20
 8000b4e:	001a      	movs	r2, r3
 8000b50:	2100      	movs	r1, #0
 8000b52:	f004 fa4b 	bl	8004fec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	4b50      	ldr	r3, [pc, #320]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b62:	4b4d      	ldr	r3, [pc, #308]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b66:	2204      	movs	r2, #4
 8000b68:	4013      	ands	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000b70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b72:	4b49      	ldr	r3, [pc, #292]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b7a:	4b47      	ldr	r3, [pc, #284]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b44      	ldr	r3, [pc, #272]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b8a:	4b43      	ldr	r3, [pc, #268]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b92:	4b41      	ldr	r3, [pc, #260]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b96:	2202      	movs	r2, #2
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000baa:	4b3b      	ldr	r3, [pc, #236]	@ (8000c98 <MX_GPIO_Init+0x158>)
 8000bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bae:	2208      	movs	r2, #8
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C7_Pin|C6_Pin|R3_Pin|R4_Pin
 8000bb6:	23f8      	movs	r3, #248	@ 0xf8
 8000bb8:	00d9      	lsls	r1, r3, #3
 8000bba:	23a0      	movs	r3, #160	@ 0xa0
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f001 febb 	bl	800293c <HAL_GPIO_WritePin>
                          |R7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C5_Pin|C4_Pin|C3_Pin|C2_Pin
 8000bc6:	4935      	ldr	r1, [pc, #212]	@ (8000c9c <MX_GPIO_Init+0x15c>)
 8000bc8:	4b35      	ldr	r3, [pc, #212]	@ (8000ca0 <MX_GPIO_Init+0x160>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f001 feb5 	bl	800293c <HAL_GPIO_WritePin>
                          |C1_Pin|C0_Pin|R0_Pin|R1_Pin
                          |R2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R5_Pin|R6_Pin, GPIO_PIN_RESET);
 8000bd2:	4b34      	ldr	r3, [pc, #208]	@ (8000ca4 <MX_GPIO_Init+0x164>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	21c0      	movs	r1, #192	@ 0xc0
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f001 feaf 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C7_Pin C6_Pin R3_Pin R4_Pin
                           R7_Pin */
  GPIO_InitStruct.Pin = C7_Pin|C6_Pin|R3_Pin|R4_Pin
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	22f8      	movs	r2, #248	@ 0xf8
 8000be2:	00d2      	lsls	r2, r2, #3
 8000be4:	601a      	str	r2, [r3, #0]
                          |R7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2201      	movs	r2, #1
 8000bea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	193a      	adds	r2, r7, r4
 8000bfa:	23a0      	movs	r3, #160	@ 0xa0
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f001 fd37 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : C5_Pin C4_Pin C3_Pin C2_Pin
                           C1_Pin C0_Pin R0_Pin R1_Pin
                           R2_Pin */
  GPIO_InitStruct.Pin = C5_Pin|C4_Pin|C3_Pin|C2_Pin
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	4a24      	ldr	r2, [pc, #144]	@ (8000c9c <MX_GPIO_Init+0x15c>)
 8000c0a:	601a      	str	r2, [r3, #0]
                          |C1_Pin|C0_Pin|R0_Pin|R1_Pin
                          |R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	2201      	movs	r2, #1
 8000c10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca0 <MX_GPIO_Init+0x160>)
 8000c22:	0019      	movs	r1, r3
 8000c24:	0010      	movs	r0, r2
 8000c26:	f001 fd25 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : R5_Pin R6_Pin */
  GPIO_InitStruct.Pin = R5_Pin|R6_Pin;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	22c0      	movs	r2, #192	@ 0xc0
 8000c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2201      	movs	r2, #1
 8000c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	4a17      	ldr	r2, [pc, #92]	@ (8000ca4 <MX_GPIO_Init+0x164>)
 8000c46:	0019      	movs	r1, r3
 8000c48:	0010      	movs	r0, r2
 8000c4a:	f001 fd13 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2280      	movs	r2, #128	@ 0x80
 8000c52:	0212      	lsls	r2, r2, #8
 8000c54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000c62:	193a      	adds	r2, r7, r4
 8000c64:	23a0      	movs	r3, #160	@ 0xa0
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	0011      	movs	r1, r2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 fd02 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN3_Pin;
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	2203      	movs	r2, #3
 8000c74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	4a08      	ldr	r2, [pc, #32]	@ (8000ca8 <MX_GPIO_Init+0x168>)
 8000c86:	0019      	movs	r1, r3
 8000c88:	0010      	movs	r0, r2
 8000c8a:	f001 fcf3 	bl	8002674 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b00b      	add	sp, #44	@ 0x2c
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	0000fc07 	.word	0x0000fc07
 8000ca0:	50000400 	.word	0x50000400
 8000ca4:	50000800 	.word	0x50000800
 8000ca8:	50000c00 	.word	0x50000c00

08000cac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

	if (htim == buzzer.interrupt_timer) {
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d103      	bne.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		buzzer_off(&buzzer);
 8000cbe:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f7ff facc 	bl	800025e <buzzer_off>
	}
}
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b002      	add	sp, #8
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	2000019c 	.word	0x2000019c

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	e7fd      	b.n	8000cdc <Error_Handler+0x8>

08000ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cec:	2101      	movs	r1, #1
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d02:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d04:	2180      	movs	r1, #128	@ 0x80
 8000d06:	0549      	lsls	r1, r1, #21
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d0c:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	055b      	lsls	r3, r3, #21
 8000d14:	4013      	ands	r3, r2
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b002      	add	sp, #8
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0e      	ldr	r2, [pc, #56]	@ (8000d70 <HAL_ADC_MspInit+0x48>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d115      	bne.n	8000d66 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <HAL_ADC_MspInit+0x4c>)
 8000d3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <HAL_ADC_MspInit+0x4c>)
 8000d40:	2180      	movs	r1, #128	@ 0x80
 8000d42:	0349      	lsls	r1, r1, #13
 8000d44:	430a      	orrs	r2, r1
 8000d46:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d48:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <HAL_ADC_MspInit+0x4c>)
 8000d4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d4c:	2380      	movs	r3, #128	@ 0x80
 8000d4e:	035b      	lsls	r3, r3, #13
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2100      	movs	r1, #0
 8000d5a:	200c      	movs	r0, #12
 8000d5c:	f001 fc58 	bl	8002610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000d60:	200c      	movs	r0, #12
 8000d62:	f001 fc6a 	bl	800263a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b004      	add	sp, #16
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	40012400 	.word	0x40012400
 8000d74:	40021000 	.word	0x40021000

08000d78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d78:	b590      	push	{r4, r7, lr}
 8000d7a:	b08b      	sub	sp, #44	@ 0x2c
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d80:	2410      	movs	r4, #16
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	0018      	movs	r0, r3
 8000d86:	2318      	movs	r3, #24
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f004 f92e 	bl	8004fec <memset>
  if(hrtc->Instance==RTC)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a15      	ldr	r2, [pc, #84]	@ (8000dec <HAL_RTC_MspInit+0x74>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d124      	bne.n	8000de4 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	2280      	movs	r2, #128	@ 0x80
 8000d9e:	0292      	lsls	r2, r2, #10
 8000da0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	0052      	lsls	r2, r2, #1
 8000da8:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	0018      	movs	r0, r3
 8000dae:	f002 facb 	bl	8003348 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d001      	beq.n	8000dba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000db6:	f7ff ff8d 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dba:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <HAL_RTC_MspInit+0x78>)
 8000dbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <HAL_RTC_MspInit+0x78>)
 8000dc0:	2180      	movs	r1, #128	@ 0x80
 8000dc2:	0209      	lsls	r1, r1, #8
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <HAL_RTC_MspInit+0x78>)
 8000dca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <HAL_RTC_MspInit+0x78>)
 8000dce:	2180      	movs	r1, #128	@ 0x80
 8000dd0:	00c9      	lsls	r1, r1, #3
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_RTC_MspInit+0x78>)
 8000dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dda:	2380      	movs	r3, #128	@ 0x80
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000de4:	46c0      	nop			@ (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b00b      	add	sp, #44	@ 0x2c
 8000dea:	bd90      	pop	{r4, r7, pc}
 8000dec:	40002800 	.word	0x40002800
 8000df0:	40021000 	.word	0x40021000

08000df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a22      	ldr	r2, [pc, #136]	@ (8000e8c <HAL_TIM_Base_MspInit+0x98>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d10e      	bne.n	8000e24 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e06:	4b22      	ldr	r3, [pc, #136]	@ (8000e90 <HAL_TIM_Base_MspInit+0x9c>)
 8000e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e0a:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <HAL_TIM_Base_MspInit+0x9c>)
 8000e0c:	2180      	movs	r1, #128	@ 0x80
 8000e0e:	0109      	lsls	r1, r1, #4
 8000e10:	430a      	orrs	r2, r1
 8000e12:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <HAL_TIM_Base_MspInit+0x9c>)
 8000e16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000e22:	e02e      	b.n	8000e82 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM14)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a1a      	ldr	r2, [pc, #104]	@ (8000e94 <HAL_TIM_Base_MspInit+0xa0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d10e      	bne.n	8000e4c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_TIM_Base_MspInit+0x9c>)
 8000e30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <HAL_TIM_Base_MspInit+0x9c>)
 8000e34:	2180      	movs	r1, #128	@ 0x80
 8000e36:	0209      	lsls	r1, r1, #8
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e3c:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <HAL_TIM_Base_MspInit+0x9c>)
 8000e3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
}
 8000e4a:	e01a      	b.n	8000e82 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM16)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a11      	ldr	r2, [pc, #68]	@ (8000e98 <HAL_TIM_Base_MspInit+0xa4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d115      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <HAL_TIM_Base_MspInit+0x9c>)
 8000e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <HAL_TIM_Base_MspInit+0x9c>)
 8000e5c:	2180      	movs	r1, #128	@ 0x80
 8000e5e:	0289      	lsls	r1, r1, #10
 8000e60:	430a      	orrs	r2, r1
 8000e62:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e64:	4b0a      	ldr	r3, [pc, #40]	@ (8000e90 <HAL_TIM_Base_MspInit+0x9c>)
 8000e66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	029b      	lsls	r3, r3, #10
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2015      	movs	r0, #21
 8000e78:	f001 fbca 	bl	8002610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000e7c:	2015      	movs	r0, #21
 8000e7e:	f001 fbdc 	bl	800263a <HAL_NVIC_EnableIRQ>
}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b006      	add	sp, #24
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	40012c00 	.word	0x40012c00
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40002000 	.word	0x40002000
 8000e98:	40014400 	.word	0x40014400

08000e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b08b      	sub	sp, #44	@ 0x2c
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	2414      	movs	r4, #20
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	2314      	movs	r3, #20
 8000eac:	001a      	movs	r2, r3
 8000eae:	2100      	movs	r1, #0
 8000eb0:	f004 f89c 	bl	8004fec <memset>
  if(htim->Instance==TIM1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a28      	ldr	r2, [pc, #160]	@ (8000f5c <HAL_TIM_MspPostInit+0xc0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d122      	bne.n	8000f04 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	4b28      	ldr	r3, [pc, #160]	@ (8000f60 <HAL_TIM_MspPostInit+0xc4>)
 8000ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ec2:	4b27      	ldr	r3, [pc, #156]	@ (8000f60 <HAL_TIM_MspPostInit+0xc4>)
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eca:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <HAL_TIM_MspPostInit+0xc4>)
 8000ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000ed6:	0021      	movs	r1, r4
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2248      	movs	r2, #72	@ 0x48
 8000edc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f64 <HAL_TIM_MspPostInit+0xc8>)
 8000efa:	0019      	movs	r1, r3
 8000efc:	0010      	movs	r0, r2
 8000efe:	f001 fbb9 	bl	8002674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000f02:	e027      	b.n	8000f54 <HAL_TIM_MspPostInit+0xb8>
  else if(htim->Instance==TIM14)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <HAL_TIM_MspPostInit+0xcc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d122      	bne.n	8000f54 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <HAL_TIM_MspPostInit+0xc4>)
 8000f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <HAL_TIM_MspPostInit+0xc4>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <HAL_TIM_MspPostInit+0xc4>)
 8000f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8000f26:	2114      	movs	r1, #20
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2202      	movs	r2, #2
 8000f32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2204      	movs	r2, #4
 8000f44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8000f46:	187a      	adds	r2, r7, r1
 8000f48:	23a0      	movs	r3, #160	@ 0xa0
 8000f4a:	05db      	lsls	r3, r3, #23
 8000f4c:	0011      	movs	r1, r2
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 fb90 	bl	8002674 <HAL_GPIO_Init>
}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b00b      	add	sp, #44	@ 0x2c
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	50000400 	.word	0x50000400
 8000f68:	40002000 	.word	0x40002000

08000f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	e7fd      	b.n	8000f70 <NMI_Handler+0x4>

08000f74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f78:	46c0      	nop			@ (mov r8, r8)
 8000f7a:	e7fd      	b.n	8000f78 <HardFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f80:	46c0      	nop			@ (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	46c0      	nop			@ (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f94:	f000 f8b6 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <ADC1_IRQHandler+0x14>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 fce6 	bl	8001978 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	20000028 	.word	0x20000028

08000fb8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <TIM16_IRQHandler+0x14>)
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f003 f82a 	bl	8004018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	20000150 	.word	0x20000150

08000fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fdc:	480d      	ldr	r0, [pc, #52]	@ (8001014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe0:	f7ff fff6 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fe6:	490d      	ldr	r1, [pc, #52]	@ (800101c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8001020 <LoopForever+0xe>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8001028 <LoopForever+0x16>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800100a:	f003 fff7 	bl	8004ffc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800100e:	f7ff fa2f 	bl	8000470 <main>

08001012 <LoopForever>:

LoopForever:
  b LoopForever
 8001012:	e7fe      	b.n	8001012 <LoopForever>
  ldr   r0, =_estack
 8001014:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001020:	080050f8 	.word	0x080050f8
  ldr r2, =_sbss
 8001024:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001028:	200001b0 	.word	0x200001b0

0800102c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800102c:	e7fe      	b.n	800102c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08001030 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <HAL_Init+0x3c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_Init+0x3c>)
 8001042:	2180      	movs	r1, #128	@ 0x80
 8001044:	0049      	lsls	r1, r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104a:	2003      	movs	r0, #3
 800104c:	f000 f810 	bl	8001070 <HAL_InitTick>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d003      	beq.n	800105c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	e001      	b.n	8001060 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fe40 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001060:	1dfb      	adds	r3, r7, #7
 8001062:	781b      	ldrb	r3, [r3, #0]
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40022000 	.word	0x40022000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001078:	230f      	movs	r3, #15
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <HAL_InitTick+0x88>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d02b      	beq.n	80010e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <HAL_InitTick+0x8c>)
 800108a:	681c      	ldr	r4, [r3, #0]
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <HAL_InitTick+0x88>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	0019      	movs	r1, r3
 8001092:	23fa      	movs	r3, #250	@ 0xfa
 8001094:	0098      	lsls	r0, r3, #2
 8001096:	f7ff f833 	bl	8000100 <__udivsi3>
 800109a:	0003      	movs	r3, r0
 800109c:	0019      	movs	r1, r3
 800109e:	0020      	movs	r0, r4
 80010a0:	f7ff f82e 	bl	8000100 <__udivsi3>
 80010a4:	0003      	movs	r3, r0
 80010a6:	0018      	movs	r0, r3
 80010a8:	f001 fad7 	bl	800265a <HAL_SYSTICK_Config>
 80010ac:	1e03      	subs	r3, r0, #0
 80010ae:	d112      	bne.n	80010d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d80a      	bhi.n	80010cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	2301      	movs	r3, #1
 80010ba:	425b      	negs	r3, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	0018      	movs	r0, r3
 80010c0:	f001 faa6 	bl	8002610 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <HAL_InitTick+0x90>)
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e00d      	b.n	80010e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010cc:	230f      	movs	r3, #15
 80010ce:	18fb      	adds	r3, r7, r3
 80010d0:	2201      	movs	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	e008      	b.n	80010e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d6:	230f      	movs	r3, #15
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	e003      	b.n	80010e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e0:	230f      	movs	r3, #15
 80010e2:	18fb      	adds	r3, r7, r3
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	781b      	ldrb	r3, [r3, #0]
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b005      	add	sp, #20
 80010f4:	bd90      	pop	{r4, r7, pc}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000004 	.word	0x20000004

08001104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <HAL_IncTick+0x1c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	001a      	movs	r2, r3
 800110e:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <HAL_IncTick+0x20>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	18d2      	adds	r2, r2, r3
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HAL_IncTick+0x20>)
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	20000008 	.word	0x20000008
 8001124:	200001ac 	.word	0x200001ac

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b02      	ldr	r3, [pc, #8]	@ (8001138 <HAL_GetTick+0x10>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	200001ac 	.word	0x200001ac

0800113c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff fff0 	bl	8001128 <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	001a      	movs	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	189b      	adds	r3, r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	f7ff ffe0 	bl	8001128 <HAL_GetTick>
 8001168:	0002      	movs	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b004      	add	sp, #16
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	20000008 	.word	0x20000008

08001184 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001194:	401a      	ands	r2, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	601a      	str	r2, [r3, #0]
}
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			@ (mov r8, r8)
 80011a8:	fe3fffff 	.word	0xfe3fffff

080011ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	23e0      	movs	r3, #224	@ 0xe0
 80011ba:	045b      	lsls	r3, r3, #17
 80011bc:	4013      	ands	r3, r2
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	2104      	movs	r1, #4
 80011da:	400a      	ands	r2, r1
 80011dc:	2107      	movs	r1, #7
 80011de:	4091      	lsls	r1, r2
 80011e0:	000a      	movs	r2, r1
 80011e2:	43d2      	mvns	r2, r2
 80011e4:	401a      	ands	r2, r3
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2104      	movs	r1, #4
 80011ea:	400b      	ands	r3, r1
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4099      	lsls	r1, r3
 80011f0:	000b      	movs	r3, r1
 80011f2:	431a      	orrs	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b004      	add	sp, #16
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	2104      	movs	r1, #4
 8001212:	400a      	ands	r2, r1
 8001214:	2107      	movs	r1, #7
 8001216:	4091      	lsls	r1, r2
 8001218:	000a      	movs	r2, r1
 800121a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2104      	movs	r1, #4
 8001220:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001222:	40da      	lsrs	r2, r3
 8001224:	0013      	movs	r3, r2
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}

0800122e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	23c0      	movs	r3, #192	@ 0xc0
 800123c:	011b      	lsls	r3, r3, #4
 800123e:	4013      	ands	r3, r2
 8001240:	d101      	bne.n	8001246 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001246:	2300      	movs	r3, #0
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}

08001250 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001260:	68ba      	ldr	r2, [r7, #8]
 8001262:	211f      	movs	r1, #31
 8001264:	400a      	ands	r2, r1
 8001266:	210f      	movs	r1, #15
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	43d2      	mvns	r2, r2
 800126e:	401a      	ands	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	0e9b      	lsrs	r3, r3, #26
 8001274:	210f      	movs	r1, #15
 8001276:	4019      	ands	r1, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	201f      	movs	r0, #31
 800127c:	4003      	ands	r3, r0
 800127e:	4099      	lsls	r1, r3
 8001280:	000b      	movs	r3, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001288:	46c0      	nop			@ (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}

08001290 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	035b      	lsls	r3, r3, #13
 80012a2:	0b5b      	lsrs	r3, r3, #13
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	0352      	lsls	r2, r2, #13
 80012c4:	0b52      	lsrs	r2, r2, #13
 80012c6:	43d2      	mvns	r2, r2
 80012c8:	401a      	ands	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2203      	movs	r2, #3
 80012e4:	4013      	ands	r3, r2
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	0212      	lsls	r2, r2, #8
 8001304:	43d2      	mvns	r2, r2
 8001306:	401a      	ands	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	400b      	ands	r3, r1
 8001310:	4904      	ldr	r1, [pc, #16]	@ (8001324 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001312:	400b      	ands	r3, r1
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800131a:	46c0      	nop			@ (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	b004      	add	sp, #16
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	07ffff00 	.word	0x07ffff00

08001328 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4a05      	ldr	r2, [pc, #20]	@ (800134c <LL_ADC_EnableInternalRegulator+0x24>)
 8001336:	4013      	ands	r3, r2
 8001338:	2280      	movs	r2, #128	@ 0x80
 800133a:	0552      	lsls	r2, r2, #21
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	6fffffe8 	.word	0x6fffffe8

08001350 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	055b      	lsls	r3, r3, #21
 8001360:	401a      	ands	r2, r3
 8001362:	2380      	movs	r3, #128	@ 0x80
 8001364:	055b      	lsls	r3, r3, #21
 8001366:	429a      	cmp	r2, r3
 8001368:	d101      	bne.n	800136e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800136e:	2300      	movs	r3, #0
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <LL_ADC_Enable+0x20>)
 8001386:	4013      	ands	r3, r2
 8001388:	2201      	movs	r2, #1
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001390:	46c0      	nop			@ (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}
 8001398:	7fffffe8 	.word	0x7fffffe8

0800139c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <LL_ADC_Disable+0x20>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	2202      	movs	r2, #2
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80013b4:	46c0      	nop			@ (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	7fffffe8 	.word	0x7fffffe8

080013c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2201      	movs	r2, #1
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <LL_ADC_IsEnabled+0x18>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <LL_ADC_IsEnabled+0x1a>
 80013d8:	2300      	movs	r3, #0
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d101      	bne.n	80013fa <LL_ADC_IsDisableOngoing+0x18>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <LL_ADC_IsDisableOngoing+0x1a>
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}

08001404 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <LL_ADC_REG_StartConversion+0x20>)
 8001412:	4013      	ands	r3, r2
 8001414:	2204      	movs	r2, #4
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	b002      	add	sp, #8
 8001422:	bd80      	pop	{r7, pc}
 8001424:	7fffffe8 	.word	0x7fffffe8

08001428 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2204      	movs	r2, #4
 8001436:	4013      	ands	r3, r2
 8001438:	2b04      	cmp	r3, #4
 800143a:	d101      	bne.n	8001440 <LL_ADC_REG_IsConversionOngoing+0x18>
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001440:	2300      	movs	r3, #0
}
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001454:	231f      	movs	r3, #31
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e17f      	b.n	8001772 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10a      	bne.n	8001490 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fc53 	bl	8000d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2254      	movs	r2, #84	@ 0x54
 800148c:	2100      	movs	r1, #0
 800148e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff ff5b 	bl	8001350 <LL_ADC_IsInternalRegulatorEnabled>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d115      	bne.n	80014ca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff ff40 	bl	8001328 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014a8:	4bb4      	ldr	r3, [pc, #720]	@ (800177c <HAL_ADC_Init+0x330>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	49b4      	ldr	r1, [pc, #720]	@ (8001780 <HAL_ADC_Init+0x334>)
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7fe fe26 	bl	8000100 <__udivsi3>
 80014b4:	0003      	movs	r3, r0
 80014b6:	3301      	adds	r3, #1
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014bc:	e002      	b.n	80014c4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f9      	bne.n	80014be <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff ff3e 	bl	8001350 <LL_ADC_IsInternalRegulatorEnabled>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d10f      	bne.n	80014f8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014dc:	2210      	movs	r2, #16
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e8:	2201      	movs	r2, #1
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80014f0:	231f      	movs	r3, #31
 80014f2:	18fb      	adds	r3, r7, r3
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0018      	movs	r0, r3
 80014fe:	f7ff ff93 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 8001502:	0003      	movs	r3, r0
 8001504:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150a:	2210      	movs	r2, #16
 800150c:	4013      	ands	r3, r2
 800150e:	d000      	beq.n	8001512 <HAL_ADC_Init+0xc6>
 8001510:	e122      	b.n	8001758 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d000      	beq.n	800151a <HAL_ADC_Init+0xce>
 8001518:	e11e      	b.n	8001758 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	4a99      	ldr	r2, [pc, #612]	@ (8001784 <HAL_ADC_Init+0x338>)
 8001520:	4013      	ands	r3, r2
 8001522:	2202      	movs	r2, #2
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0018      	movs	r0, r3
 8001530:	f7ff ff46 	bl	80013c0 <LL_ADC_IsEnabled>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d000      	beq.n	800153a <HAL_ADC_Init+0xee>
 8001538:	e0ad      	b.n	8001696 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7e1b      	ldrb	r3, [r3, #24]
 8001542:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001544:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7e5b      	ldrb	r3, [r3, #25]
 800154a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800154c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e9b      	ldrb	r3, [r3, #26]
 8001552:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001554:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	2b00      	cmp	r3, #0
 800155c:	d002      	beq.n	8001564 <HAL_ADC_Init+0x118>
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	015b      	lsls	r3, r3, #5
 8001562:	e000      	b.n	8001566 <HAL_ADC_Init+0x11a>
 8001564:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001566:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800156c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	2b00      	cmp	r3, #0
 8001574:	da04      	bge.n	8001580 <HAL_ADC_Init+0x134>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	085b      	lsrs	r3, r3, #1
 800157e:	e001      	b.n	8001584 <HAL_ADC_Init+0x138>
 8001580:	2380      	movs	r3, #128	@ 0x80
 8001582:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001584:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	212c      	movs	r1, #44	@ 0x2c
 800158a:	5c5b      	ldrb	r3, [r3, r1]
 800158c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800158e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2220      	movs	r2, #32
 800159a:	5c9b      	ldrb	r3, [r3, r2]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d115      	bne.n	80015cc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e9b      	ldrb	r3, [r3, #26]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d105      	bne.n	80015b4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2280      	movs	r2, #128	@ 0x80
 80015ac:	0252      	lsls	r2, r2, #9
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	e00b      	b.n	80015cc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	2220      	movs	r2, #32
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c4:	2201      	movs	r2, #1
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00a      	beq.n	80015ea <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015d8:	23e0      	movs	r3, #224	@ 0xe0
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015e2:	4313      	orrs	r3, r2
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4a65      	ldr	r2, [pc, #404]	@ (8001788 <HAL_ADC_Init+0x33c>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	0f9b      	lsrs	r3, r3, #30
 8001606:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800160c:	4313      	orrs	r3, r2
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4313      	orrs	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	223c      	movs	r2, #60	@ 0x3c
 8001618:	5c9b      	ldrb	r3, [r3, r2]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d111      	bne.n	8001642 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	0f9b      	lsrs	r3, r3, #30
 8001624:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800162a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001630:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001636:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	4313      	orrs	r3, r2
 800163c:	2201      	movs	r2, #1
 800163e:	4313      	orrs	r3, r2
 8001640:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	4a50      	ldr	r2, [pc, #320]	@ (800178c <HAL_ADC_Init+0x340>)
 800164a:	4013      	ands	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	430a      	orrs	r2, r1
 8001656:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	23c0      	movs	r3, #192	@ 0xc0
 800165e:	061b      	lsls	r3, r3, #24
 8001660:	429a      	cmp	r2, r3
 8001662:	d018      	beq.n	8001696 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001668:	2380      	movs	r3, #128	@ 0x80
 800166a:	05db      	lsls	r3, r3, #23
 800166c:	429a      	cmp	r2, r3
 800166e:	d012      	beq.n	8001696 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001674:	2380      	movs	r3, #128	@ 0x80
 8001676:	061b      	lsls	r3, r3, #24
 8001678:	429a      	cmp	r2, r3
 800167a:	d00c      	beq.n	8001696 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800167c:	4b44      	ldr	r3, [pc, #272]	@ (8001790 <HAL_ADC_Init+0x344>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a44      	ldr	r2, [pc, #272]	@ (8001794 <HAL_ADC_Init+0x348>)
 8001682:	4013      	ands	r3, r2
 8001684:	0019      	movs	r1, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	23f0      	movs	r3, #240	@ 0xf0
 800168c:	039b      	lsls	r3, r3, #14
 800168e:	401a      	ands	r2, r3
 8001690:	4b3f      	ldr	r3, [pc, #252]	@ (8001790 <HAL_ADC_Init+0x344>)
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800169e:	001a      	movs	r2, r3
 80016a0:	2100      	movs	r1, #0
 80016a2:	f7ff fd90 	bl	80011c6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ae:	493a      	ldr	r1, [pc, #232]	@ (8001798 <HAL_ADC_Init+0x34c>)
 80016b0:	001a      	movs	r2, r3
 80016b2:	f7ff fd88 	bl	80011c6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2110      	movs	r1, #16
 80016ca:	4249      	negs	r1, r1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80016d0:	e018      	b.n	8001704 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	039b      	lsls	r3, r3, #14
 80016da:	429a      	cmp	r2, r3
 80016dc:	d112      	bne.n	8001704 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	221c      	movs	r2, #28
 80016ee:	4013      	ands	r3, r2
 80016f0:	2210      	movs	r2, #16
 80016f2:	4252      	negs	r2, r2
 80016f4:	409a      	lsls	r2, r3
 80016f6:	0011      	movs	r1, r2
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2100      	movs	r1, #0
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff fd78 	bl	8001200 <LL_ADC_GetSamplingTimeCommonChannels>
 8001710:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001716:	429a      	cmp	r2, r3
 8001718:	d10b      	bne.n	8001732 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001724:	2203      	movs	r2, #3
 8001726:	4393      	bics	r3, r2
 8001728:	2201      	movs	r2, #1
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001730:	e01c      	b.n	800176c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001736:	2212      	movs	r2, #18
 8001738:	4393      	bics	r3, r2
 800173a:	2210      	movs	r2, #16
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001746:	2201      	movs	r2, #1
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800174e:	231f      	movs	r3, #31
 8001750:	18fb      	adds	r3, r7, r3
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001756:	e009      	b.n	800176c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	2210      	movs	r2, #16
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001764:	231f      	movs	r3, #31
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800176c:	231f      	movs	r3, #31
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	781b      	ldrb	r3, [r3, #0]
}
 8001772:	0018      	movs	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	b008      	add	sp, #32
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			@ (mov r8, r8)
 800177c:	20000000 	.word	0x20000000
 8001780:	00030d40 	.word	0x00030d40
 8001784:	fffffefd 	.word	0xfffffefd
 8001788:	ffde0201 	.word	0xffde0201
 800178c:	1ffffc02 	.word	0x1ffffc02
 8001790:	40012708 	.word	0x40012708
 8001794:	ffc3ffff 	.word	0xffc3ffff
 8001798:	07ffff04 	.word	0x07ffff04

0800179c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800179c:	b5b0      	push	{r4, r5, r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff fe3d 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d135      	bne.n	800181e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2254      	movs	r2, #84	@ 0x54
 80017b6:	5c9b      	ldrb	r3, [r3, r2]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_ADC_Start+0x24>
 80017bc:	2302      	movs	r3, #2
 80017be:	e035      	b.n	800182c <HAL_ADC_Start+0x90>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2254      	movs	r2, #84	@ 0x54
 80017c4:	2101      	movs	r1, #1
 80017c6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017c8:	250f      	movs	r5, #15
 80017ca:	197c      	adds	r4, r7, r5
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 fbda 	bl	8001f88 <ADC_Enable>
 80017d4:	0003      	movs	r3, r0
 80017d6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017d8:	197b      	adds	r3, r7, r5
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d119      	bne.n	8001814 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e4:	4a13      	ldr	r2, [pc, #76]	@ (8001834 <HAL_ADC_Start+0x98>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	2280      	movs	r2, #128	@ 0x80
 80017ea:	0052      	lsls	r2, r2, #1
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	221c      	movs	r2, #28
 80017fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2254      	movs	r2, #84	@ 0x54
 8001804:	2100      	movs	r1, #0
 8001806:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff fdf9 	bl	8001404 <LL_ADC_REG_StartConversion>
 8001812:	e008      	b.n	8001826 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2254      	movs	r2, #84	@ 0x54
 8001818:	2100      	movs	r1, #0
 800181a:	5499      	strb	r1, [r3, r2]
 800181c:	e003      	b.n	8001826 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800181e:	230f      	movs	r3, #15
 8001820:	18fb      	adds	r3, r7, r3
 8001822:	2202      	movs	r2, #2
 8001824:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001826:	230f      	movs	r3, #15
 8001828:	18fb      	adds	r3, r7, r3
 800182a:	781b      	ldrb	r3, [r3, #0]
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bdb0      	pop	{r4, r5, r7, pc}
 8001834:	fffff0fe 	.word	0xfffff0fe

08001838 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	2b08      	cmp	r3, #8
 8001848:	d102      	bne.n	8001850 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800184a:	2308      	movs	r3, #8
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	e00f      	b.n	8001870 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	4013      	ands	r3, r2
 800185a:	d007      	beq.n	800186c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	2220      	movs	r2, #32
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e072      	b.n	8001952 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800186c:	2304      	movs	r3, #4
 800186e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001870:	f7ff fc5a 	bl	8001128 <HAL_GetTick>
 8001874:	0003      	movs	r3, r0
 8001876:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001878:	e01f      	b.n	80018ba <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	d01c      	beq.n	80018ba <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001880:	f7ff fc52 	bl	8001128 <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d302      	bcc.n	8001896 <HAL_ADC_PollForConversion+0x5e>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d111      	bne.n	80018ba <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4013      	ands	r3, r2
 80018a0:	d10b      	bne.n	80018ba <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a6:	2204      	movs	r2, #4
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2254      	movs	r2, #84	@ 0x54
 80018b2:	2100      	movs	r1, #0
 80018b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e04b      	b.n	8001952 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	4013      	ands	r3, r2
 80018c4:	d0d9      	beq.n	800187a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	0092      	lsls	r2, r2, #2
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	0018      	movs	r0, r3
 80018da:	f7ff fca8 	bl	800122e <LL_ADC_REG_IsTriggerSourceSWStart>
 80018de:	1e03      	subs	r3, r0, #0
 80018e0:	d02e      	beq.n	8001940 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7e9b      	ldrb	r3, [r3, #26]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d12a      	bne.n	8001940 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2208      	movs	r2, #8
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d123      	bne.n	8001940 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff fd93 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d110      	bne.n	8001928 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	210c      	movs	r1, #12
 8001912:	438a      	bics	r2, r1
 8001914:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191a:	4a10      	ldr	r2, [pc, #64]	@ (800195c <HAL_ADC_PollForConversion+0x124>)
 800191c:	4013      	ands	r3, r2
 800191e:	2201      	movs	r2, #1
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	659a      	str	r2, [r3, #88]	@ 0x58
 8001926:	e00b      	b.n	8001940 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	2220      	movs	r2, #32
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001938:	2201      	movs	r2, #1
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7e1b      	ldrb	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d103      	bne.n	8001950 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	220c      	movs	r2, #12
 800194e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b004      	add	sp, #16
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	fffffefe 	.word	0xfffffefe

08001960 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d017      	beq.n	80019cc <HAL_ADC_IRQHandler+0x54>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2202      	movs	r2, #2
 80019a0:	4013      	ands	r3, r2
 80019a2:	d013      	beq.n	80019cc <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a8:	2210      	movs	r2, #16
 80019aa:	4013      	ands	r3, r2
 80019ac:	d106      	bne.n	80019bc <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b2:	2280      	movs	r2, #128	@ 0x80
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 fd6a 	bl	8002498 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	2204      	movs	r2, #4
 80019d0:	4013      	ands	r3, r2
 80019d2:	d003      	beq.n	80019dc <HAL_ADC_IRQHandler+0x64>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2204      	movs	r2, #4
 80019d8:	4013      	ands	r3, r2
 80019da:	d107      	bne.n	80019ec <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2208      	movs	r2, #8
 80019e0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019e2:	d04d      	beq.n	8001a80 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2208      	movs	r2, #8
 80019e8:	4013      	ands	r3, r2
 80019ea:	d049      	beq.n	8001a80 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	2210      	movs	r2, #16
 80019f2:	4013      	ands	r3, r2
 80019f4:	d106      	bne.n	8001a04 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fa:	2280      	movs	r2, #128	@ 0x80
 80019fc:	0092      	lsls	r2, r2, #2
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff fc10 	bl	800122e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a0e:	1e03      	subs	r3, r0, #0
 8001a10:	d02e      	beq.n	8001a70 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7e9b      	ldrb	r3, [r3, #26]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d12a      	bne.n	8001a70 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2208      	movs	r2, #8
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d123      	bne.n	8001a70 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff fcfb 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d110      	bne.n	8001a58 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	210c      	movs	r1, #12
 8001a42:	438a      	bics	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	4a56      	ldr	r2, [pc, #344]	@ (8001ba4 <HAL_ADC_IRQHandler+0x22c>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2201      	movs	r2, #1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a56:	e00b      	b.n	8001a70 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a68:	2201      	movs	r2, #1
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	0018      	movs	r0, r3
 8001a74:	f000 f898 	bl	8001ba8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	220c      	movs	r2, #12
 8001a7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2280      	movs	r2, #128	@ 0x80
 8001a84:	4013      	ands	r3, r2
 8001a86:	d012      	beq.n	8001aae <HAL_ADC_IRQHandler+0x136>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2280      	movs	r2, #128	@ 0x80
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d00e      	beq.n	8001aae <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a94:	2280      	movs	r2, #128	@ 0x80
 8001a96:	0252      	lsls	r2, r2, #9
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 f889 	bl	8001bb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2280      	movs	r2, #128	@ 0x80
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d014      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x16a>
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d00f      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac6:	2280      	movs	r2, #128	@ 0x80
 8001ac8:	0292      	lsls	r2, r2, #10
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f000 fcd0 	bl	8002478 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2280      	movs	r2, #128	@ 0x80
 8001ade:	0052      	lsls	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d014      	beq.n	8001b16 <HAL_ADC_IRQHandler+0x19e>
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	2380      	movs	r3, #128	@ 0x80
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4013      	ands	r3, r2
 8001af4:	d00f      	beq.n	8001b16 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	2280      	movs	r2, #128	@ 0x80
 8001afc:	02d2      	lsls	r2, r2, #11
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f000 fcbe 	bl	8002488 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2210      	movs	r2, #16
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d02b      	beq.n	8001b76 <HAL_ADC_IRQHandler+0x1fe>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2210      	movs	r2, #16
 8001b22:	4013      	ands	r3, r2
 8001b24:	d027      	beq.n	8001b76 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d102      	bne.n	8001b34 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	e008      	b.n	8001b46 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff fbcc 	bl	80012d6 <LL_ADC_REG_GetDMATransfer>
 8001b3e:	1e03      	subs	r3, r0, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001b42:	2301      	movs	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d110      	bne.n	8001b6e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b50:	2280      	movs	r2, #128	@ 0x80
 8001b52:	00d2      	lsls	r2, r2, #3
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5e:	2202      	movs	r2, #2
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f000 f82d 	bl	8001bc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2210      	movs	r2, #16
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	019b      	lsls	r3, r3, #6
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d00d      	beq.n	8001b9c <HAL_ADC_IRQHandler+0x224>
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	2380      	movs	r3, #128	@ 0x80
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	4013      	ands	r3, r2
 8001b88:	d008      	beq.n	8001b9c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 fc8b 	bl	80024a8 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	0192      	lsls	r2, r2, #6
 8001b9a:	601a      	str	r2, [r3, #0]
  }
}
 8001b9c:	46c0      	nop			@ (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b006      	add	sp, #24
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	fffffefe 	.word	0xfffffefe

08001ba8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001bc0:	46c0      	nop			@ (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b002      	add	sp, #8
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001bd0:	46c0      	nop			@ (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be2:	2317      	movs	r3, #23
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2254      	movs	r2, #84	@ 0x54
 8001bf2:	5c9b      	ldrb	r3, [r3, r2]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x24>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e1c0      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x3a6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2254      	movs	r2, #84	@ 0x54
 8001c00:	2101      	movs	r1, #1
 8001c02:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff fc0d 	bl	8001428 <LL_ADC_REG_IsConversionOngoing>
 8001c0e:	1e03      	subs	r3, r0, #0
 8001c10:	d000      	beq.n	8001c14 <HAL_ADC_ConfigChannel+0x3c>
 8001c12:	e1a3      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d100      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x46>
 8001c1c:	e143      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	2380      	movs	r3, #128	@ 0x80
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d004      	beq.n	8001c34 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c2e:	4ac1      	ldr	r2, [pc, #772]	@ (8001f34 <HAL_ADC_ConfigChannel+0x35c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d108      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	0010      	movs	r0, r2
 8001c40:	f7ff fb26 	bl	8001290 <LL_ADC_REG_SetSequencerChAdd>
 8001c44:	e0c9      	b.n	8001dda <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	211f      	movs	r1, #31
 8001c50:	400b      	ands	r3, r1
 8001c52:	210f      	movs	r1, #15
 8001c54:	4099      	lsls	r1, r3
 8001c56:	000b      	movs	r3, r1
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	035b      	lsls	r3, r3, #13
 8001c64:	0b5b      	lsrs	r3, r3, #13
 8001c66:	d105      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x9c>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0e9b      	lsrs	r3, r3, #26
 8001c6e:	221f      	movs	r2, #31
 8001c70:	4013      	ands	r3, r2
 8001c72:	e098      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d000      	beq.n	8001c80 <HAL_ADC_ConfigChannel+0xa8>
 8001c7e:	e091      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x1cc>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2202      	movs	r2, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	d000      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0xb4>
 8001c8a:	e089      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x1c8>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2204      	movs	r2, #4
 8001c92:	4013      	ands	r3, r2
 8001c94:	d000      	beq.n	8001c98 <HAL_ADC_ConfigChannel+0xc0>
 8001c96:	e081      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x1c4>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d000      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0xcc>
 8001ca2:	e079      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x1c0>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	d000      	beq.n	8001cb0 <HAL_ADC_ConfigChannel+0xd8>
 8001cae:	e071      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x1bc>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d000      	beq.n	8001cbc <HAL_ADC_ConfigChannel+0xe4>
 8001cba:	e069      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x1b8>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2240      	movs	r2, #64	@ 0x40
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d000      	beq.n	8001cc8 <HAL_ADC_ConfigChannel+0xf0>
 8001cc6:	e061      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x1b4>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2280      	movs	r2, #128	@ 0x80
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d000      	beq.n	8001cd4 <HAL_ADC_ConfigChannel+0xfc>
 8001cd2:	e059      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x1b0>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	2380      	movs	r3, #128	@ 0x80
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d151      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1ac>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d149      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x1a8>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	@ 0x80
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d141      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x1a4>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	@ 0x80
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	4013      	ands	r3, r2
 8001d02:	d139      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x1a0>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	015b      	lsls	r3, r3, #5
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d131      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x19c>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	019b      	lsls	r3, r3, #6
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d129      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x198>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	01db      	lsls	r3, r3, #7
 8001d24:	4013      	ands	r3, r2
 8001d26:	d121      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x194>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4013      	ands	r3, r2
 8001d32:	d119      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x190>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	025b      	lsls	r3, r3, #9
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d111      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x18c>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	029b      	lsls	r3, r3, #10
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d109      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x188>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2380      	movs	r3, #128	@ 0x80
 8001d52:	02db      	lsls	r3, r3, #11
 8001d54:	4013      	ands	r3, r2
 8001d56:	d001      	beq.n	8001d5c <HAL_ADC_ConfigChannel+0x184>
 8001d58:	2312      	movs	r3, #18
 8001d5a:	e024      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e022      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d60:	2311      	movs	r3, #17
 8001d62:	e020      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d64:	2310      	movs	r3, #16
 8001d66:	e01e      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d68:	230f      	movs	r3, #15
 8001d6a:	e01c      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d6c:	230e      	movs	r3, #14
 8001d6e:	e01a      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d70:	230d      	movs	r3, #13
 8001d72:	e018      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d74:	230c      	movs	r3, #12
 8001d76:	e016      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d78:	230b      	movs	r3, #11
 8001d7a:	e014      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d7c:	230a      	movs	r3, #10
 8001d7e:	e012      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d80:	2309      	movs	r3, #9
 8001d82:	e010      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d84:	2308      	movs	r3, #8
 8001d86:	e00e      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d88:	2307      	movs	r3, #7
 8001d8a:	e00c      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d8c:	2306      	movs	r3, #6
 8001d8e:	e00a      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d90:	2305      	movs	r3, #5
 8001d92:	e008      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d94:	2304      	movs	r3, #4
 8001d96:	e006      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e004      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x1ce>
 8001da4:	2300      	movs	r3, #0
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	6852      	ldr	r2, [r2, #4]
 8001daa:	201f      	movs	r0, #31
 8001dac:	4002      	ands	r2, r0
 8001dae:	4093      	lsls	r3, r2
 8001db0:	000a      	movs	r2, r1
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d808      	bhi.n	8001dda <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	f7ff fa3b 	bl	8001250 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6819      	ldr	r1, [r3, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	001a      	movs	r2, r3
 8001de8:	f7ff fa82 	bl	80012f0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db00      	blt.n	8001df6 <HAL_ADC_ConfigChannel+0x21e>
 8001df4:	e0bc      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df6:	4b50      	ldr	r3, [pc, #320]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7ff f9d7 	bl	80011ac <LL_ADC_GetCommonPathInternalCh>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a4d      	ldr	r2, [pc, #308]	@ (8001f3c <HAL_ADC_ConfigChannel+0x364>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d122      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	041b      	lsls	r3, r3, #16
 8001e12:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e14:	d11d      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2280      	movs	r2, #128	@ 0x80
 8001e1a:	0412      	lsls	r2, r2, #16
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	4a46      	ldr	r2, [pc, #280]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001e20:	0019      	movs	r1, r3
 8001e22:	0010      	movs	r0, r2
 8001e24:	f7ff f9ae 	bl	8001184 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e28:	4b45      	ldr	r3, [pc, #276]	@ (8001f40 <HAL_ADC_ConfigChannel+0x368>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4945      	ldr	r1, [pc, #276]	@ (8001f44 <HAL_ADC_ConfigChannel+0x36c>)
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7fe f966 	bl	8000100 <__udivsi3>
 8001e34:	0003      	movs	r3, r0
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	0013      	movs	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	189b      	adds	r3, r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e42:	e002      	b.n	8001e4a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f9      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e50:	e08e      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a3c      	ldr	r2, [pc, #240]	@ (8001f48 <HAL_ADC_ConfigChannel+0x370>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d10e      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	2380      	movs	r3, #128	@ 0x80
 8001e60:	045b      	lsls	r3, r3, #17
 8001e62:	4013      	ands	r3, r2
 8001e64:	d109      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2280      	movs	r2, #128	@ 0x80
 8001e6a:	0452      	lsls	r2, r2, #17
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	4a32      	ldr	r2, [pc, #200]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001e70:	0019      	movs	r1, r3
 8001e72:	0010      	movs	r0, r2
 8001e74:	f7ff f986 	bl	8001184 <LL_ADC_SetCommonPathInternalCh>
 8001e78:	e07a      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a33      	ldr	r2, [pc, #204]	@ (8001f4c <HAL_ADC_ConfigChannel+0x374>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d000      	beq.n	8001e86 <HAL_ADC_ConfigChannel+0x2ae>
 8001e84:	e074      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	2380      	movs	r3, #128	@ 0x80
 8001e8a:	03db      	lsls	r3, r3, #15
 8001e8c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e8e:	d000      	beq.n	8001e92 <HAL_ADC_ConfigChannel+0x2ba>
 8001e90:	e06e      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2280      	movs	r2, #128	@ 0x80
 8001e96:	03d2      	lsls	r2, r2, #15
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	4a27      	ldr	r2, [pc, #156]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	f7ff f970 	bl	8001184 <LL_ADC_SetCommonPathInternalCh>
 8001ea4:	e064      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	2380      	movs	r3, #128	@ 0x80
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d004      	beq.n	8001ebc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f34 <HAL_ADC_ConfigChannel+0x35c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d107      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	0010      	movs	r0, r2
 8001ec8:	f7ff f9f3 	bl	80012b2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da4d      	bge.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed4:	4b18      	ldr	r3, [pc, #96]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff f968 	bl	80011ac <LL_ADC_GetCommonPathInternalCh>
 8001edc:	0003      	movs	r3, r0
 8001ede:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a15      	ldr	r2, [pc, #84]	@ (8001f3c <HAL_ADC_ConfigChannel+0x364>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d108      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <HAL_ADC_ConfigChannel+0x378>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	4a11      	ldr	r2, [pc, #68]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	0010      	movs	r0, r2
 8001ef6:	f7ff f945 	bl	8001184 <LL_ADC_SetCommonPathInternalCh>
 8001efa:	e039      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a11      	ldr	r2, [pc, #68]	@ (8001f48 <HAL_ADC_ConfigChannel+0x370>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d108      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <HAL_ADC_ConfigChannel+0x37c>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001f0e:	0019      	movs	r1, r3
 8001f10:	0010      	movs	r0, r2
 8001f12:	f7ff f937 	bl	8001184 <LL_ADC_SetCommonPathInternalCh>
 8001f16:	e02b      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f4c <HAL_ADC_ConfigChannel+0x374>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d126      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4a0c      	ldr	r2, [pc, #48]	@ (8001f58 <HAL_ADC_ConfigChannel+0x380>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	4a03      	ldr	r2, [pc, #12]	@ (8001f38 <HAL_ADC_ConfigChannel+0x360>)
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	0010      	movs	r0, r2
 8001f2e:	f7ff f929 	bl	8001184 <LL_ADC_SetCommonPathInternalCh>
 8001f32:	e01d      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x398>
 8001f34:	80000004 	.word	0x80000004
 8001f38:	40012708 	.word	0x40012708
 8001f3c:	b0001000 	.word	0xb0001000
 8001f40:	20000000 	.word	0x20000000
 8001f44:	00030d40 	.word	0x00030d40
 8001f48:	b8004000 	.word	0xb8004000
 8001f4c:	b4002000 	.word	0xb4002000
 8001f50:	ff7fffff 	.word	0xff7fffff
 8001f54:	feffffff 	.word	0xfeffffff
 8001f58:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	2220      	movs	r2, #32
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f68:	2317      	movs	r3, #23
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2254      	movs	r2, #84	@ 0x54
 8001f74:	2100      	movs	r1, #0
 8001f76:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f78:	2317      	movs	r3, #23
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	781b      	ldrb	r3, [r3, #0]
}
 8001f7e:	0018      	movs	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	b006      	add	sp, #24
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			@ (mov r8, r8)

08001f88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff fa11 	bl	80013c0 <LL_ADC_IsEnabled>
 8001f9e:	1e03      	subs	r3, r0, #0
 8001fa0:	d000      	beq.n	8001fa4 <ADC_Enable+0x1c>
 8001fa2:	e069      	b.n	8002078 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4a36      	ldr	r2, [pc, #216]	@ (8002084 <ADC_Enable+0xfc>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	d00d      	beq.n	8001fcc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e056      	b.n	800207a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	f7ff f9d1 	bl	8001378 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8002088 <ADC_Enable+0x100>)
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff f8e7 	bl	80011ac <LL_ADC_GetCommonPathInternalCh>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	041b      	lsls	r3, r3, #16
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d00f      	beq.n	8002008 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe8:	4b28      	ldr	r3, [pc, #160]	@ (800208c <ADC_Enable+0x104>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4928      	ldr	r1, [pc, #160]	@ (8002090 <ADC_Enable+0x108>)
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f7fe f886 	bl	8000100 <__udivsi3>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001ff8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001ffa:	e002      	b.n	8002002 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1f9      	bne.n	8001ffc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7e5b      	ldrb	r3, [r3, #25]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d033      	beq.n	8002078 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002010:	f7ff f88a 	bl	8001128 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002018:	e027      	b.n	800206a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff f9ce 	bl	80013c0 <LL_ADC_IsEnabled>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d104      	bne.n	8002032 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff f9a3 	bl	8001378 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002032:	f7ff f879 	bl	8001128 <HAL_GetTick>
 8002036:	0002      	movs	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d914      	bls.n	800206a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2201      	movs	r2, #1
 8002048:	4013      	ands	r3, r2
 800204a:	2b01      	cmp	r3, #1
 800204c:	d00d      	beq.n	800206a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002052:	2210      	movs	r2, #16
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800205e:	2201      	movs	r2, #1
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e007      	b.n	800207a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2201      	movs	r2, #1
 8002072:	4013      	ands	r3, r2
 8002074:	2b01      	cmp	r3, #1
 8002076:	d1d0      	bne.n	800201a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b004      	add	sp, #16
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	80000017 	.word	0x80000017
 8002088:	40012708 	.word	0x40012708
 800208c:	20000000 	.word	0x20000000
 8002090:	00030d40 	.word	0x00030d40

08002094 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7ff f99e 	bl	80013e2 <LL_ADC_IsDisableOngoing>
 80020a6:	0003      	movs	r3, r0
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	0018      	movs	r0, r3
 80020b0:	f7ff f986 	bl	80013c0 <LL_ADC_IsEnabled>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d046      	beq.n	8002146 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d143      	bne.n	8002146 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2205      	movs	r2, #5
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d10d      	bne.n	80020e8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff f963 	bl	800139c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2203      	movs	r2, #3
 80020dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020de:	f7ff f823 	bl	8001128 <HAL_GetTick>
 80020e2:	0003      	movs	r3, r0
 80020e4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020e6:	e028      	b.n	800213a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ec:	2210      	movs	r2, #16
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f8:	2201      	movs	r2, #1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e021      	b.n	8002148 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002104:	f7ff f810 	bl	8001128 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d913      	bls.n	800213a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2201      	movs	r2, #1
 800211a:	4013      	ands	r3, r2
 800211c:	d00d      	beq.n	800213a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002122:	2210      	movs	r2, #16
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212e:	2201      	movs	r2, #1
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e006      	b.n	8002148 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
 8002144:	d1de      	bne.n	8002104 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b004      	add	sp, #16
 800214e:	bd80      	pop	{r7, pc}

08002150 <LL_ADC_GetCommonClock>:
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	23f0      	movs	r3, #240	@ 0xf0
 800215e:	039b      	lsls	r3, r3, #14
 8002160:	4013      	ands	r3, r2
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}

0800216a <LL_ADC_GetClock>:
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	0f9b      	lsrs	r3, r3, #30
 8002178:	079b      	lsls	r3, r3, #30
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b002      	add	sp, #8
 8002180:	bd80      	pop	{r7, pc}

08002182 <LL_ADC_SetCalibrationFactor>:
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	22b4      	movs	r2, #180	@ 0xb4
 8002190:	589b      	ldr	r3, [r3, r2]
 8002192:	227f      	movs	r2, #127	@ 0x7f
 8002194:	4393      	bics	r3, r2
 8002196:	001a      	movs	r2, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	21b4      	movs	r1, #180	@ 0xb4
 80021a0:	505a      	str	r2, [r3, r1]
}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b002      	add	sp, #8
 80021a8:	bd80      	pop	{r7, pc}

080021aa <LL_ADC_GetCalibrationFactor>:
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	22b4      	movs	r2, #180	@ 0xb4
 80021b6:	589b      	ldr	r3, [r3, r2]
 80021b8:	227f      	movs	r2, #127	@ 0x7f
 80021ba:	4013      	ands	r3, r2
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b002      	add	sp, #8
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <LL_ADC_Enable>:
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <LL_ADC_Enable+0x20>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	2201      	movs	r2, #1
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	609a      	str	r2, [r3, #8]
}
 80021dc:	46c0      	nop			@ (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	7fffffe8 	.word	0x7fffffe8

080021e8 <LL_ADC_Disable>:
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <LL_ADC_Disable+0x20>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	2202      	movs	r2, #2
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
}
 8002200:	46c0      	nop			@ (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}
 8002208:	7fffffe8 	.word	0x7fffffe8

0800220c <LL_ADC_IsEnabled>:
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2201      	movs	r2, #1
 800221a:	4013      	ands	r3, r2
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <LL_ADC_IsEnabled+0x18>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <LL_ADC_IsEnabled+0x1a>
 8002224:	2300      	movs	r3, #0
}
 8002226:	0018      	movs	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	b002      	add	sp, #8
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <LL_ADC_StartCalibration>:
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a05      	ldr	r2, [pc, #20]	@ (8002254 <LL_ADC_StartCalibration+0x24>)
 800223e:	4013      	ands	r3, r2
 8002240:	2280      	movs	r2, #128	@ 0x80
 8002242:	0612      	lsls	r2, r2, #24
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	609a      	str	r2, [r3, #8]
}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	7fffffe8 	.word	0x7fffffe8

08002258 <LL_ADC_IsCalibrationOnGoing>:
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	0fdb      	lsrs	r3, r3, #31
 8002266:	07da      	lsls	r2, r3, #31
 8002268:	2380      	movs	r3, #128	@ 0x80
 800226a:	061b      	lsls	r3, r3, #24
 800226c:	429a      	cmp	r2, r3
 800226e:	d101      	bne.n	8002274 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002274:	2300      	movs	r3, #0
}
 8002276:	0018      	movs	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	b002      	add	sp, #8
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b08b      	sub	sp, #44	@ 0x2c
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2254      	movs	r2, #84	@ 0x54
 8002294:	5c9b      	ldrb	r3, [r3, r2]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_ADCEx_Calibration_Start+0x1e>
 800229a:	2302      	movs	r3, #2
 800229c:	e0dd      	b.n	800245a <HAL_ADCEx_Calibration_Start+0x1da>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2254      	movs	r2, #84	@ 0x54
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80022a6:	231f      	movs	r3, #31
 80022a8:	18fc      	adds	r4, r7, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7ff fef1 	bl	8002094 <ADC_Disable>
 80022b2:	0003      	movs	r3, r0
 80022b4:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7ff ffa6 	bl	800220c <LL_ADC_IsEnabled>
 80022c0:	1e03      	subs	r3, r0, #0
 80022c2:	d000      	beq.n	80022c6 <HAL_ADCEx_Calibration_Start+0x46>
 80022c4:	e0bc      	b.n	8002440 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ca:	4a66      	ldr	r2, [pc, #408]	@ (8002464 <HAL_ADCEx_Calibration_Start+0x1e4>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	2202      	movs	r2, #2
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a62      	ldr	r2, [pc, #392]	@ (8002468 <HAL_ADCEx_Calibration_Start+0x1e8>)
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	495f      	ldr	r1, [pc, #380]	@ (800246c <HAL_ADCEx_Calibration_Start+0x1ec>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f6:	e02d      	b.n	8002354 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff ff97 	bl	8002230 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002302:	e014      	b.n	800232e <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3301      	adds	r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4a58      	ldr	r2, [pc, #352]	@ (8002470 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d90d      	bls.n	800232e <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002316:	2212      	movs	r2, #18
 8002318:	4393      	bics	r3, r2
 800231a:	2210      	movs	r2, #16
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2254      	movs	r2, #84	@ 0x54
 8002326:	2100      	movs	r1, #0
 8002328:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e095      	b.n	800245a <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	0018      	movs	r0, r3
 8002334:	f7ff ff90 	bl	8002258 <LL_ADC_IsCalibrationOnGoing>
 8002338:	1e03      	subs	r3, r0, #0
 800233a:	d1e3      	bne.n	8002304 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff ff32 	bl	80021aa <LL_ADC_GetCalibrationFactor>
 8002346:	0002      	movs	r2, r0
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	189b      	adds	r3, r3, r2
 800234c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	3301      	adds	r3, #1
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	2b07      	cmp	r3, #7
 8002358:	d9ce      	bls.n	80022f8 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800235a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800235c:	6a38      	ldr	r0, [r7, #32]
 800235e:	f7fd fecf 	bl	8000100 <__udivsi3>
 8002362:	0003      	movs	r3, r0
 8002364:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	0018      	movs	r0, r3
 800236c:	f7ff ff2a 	bl	80021c4 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0018      	movs	r0, r3
 8002376:	f7ff fef8 	bl	800216a <LL_ADC_GetClock>
 800237a:	1e03      	subs	r3, r0, #0
 800237c:	d11b      	bne.n	80023b6 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800237e:	4b3d      	ldr	r3, [pc, #244]	@ (8002474 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff fee5 	bl	8002150 <LL_ADC_GetCommonClock>
 8002386:	0003      	movs	r3, r0
 8002388:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	23e0      	movs	r3, #224	@ 0xe0
 800238e:	035b      	lsls	r3, r3, #13
 8002390:	429a      	cmp	r2, r3
 8002392:	d310      	bcc.n	80023b6 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	0c9b      	lsrs	r3, r3, #18
 8002398:	3b03      	subs	r3, #3
 800239a:	2201      	movs	r2, #1
 800239c:	409a      	lsls	r2, r3
 800239e:	0013      	movs	r3, r2
 80023a0:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	085b      	lsrs	r3, r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 80023a8:	e002      	b.n	80023b0 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f9      	bne.n	80023aa <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a3a      	ldr	r2, [r7, #32]
 80023bc:	0011      	movs	r1, r2
 80023be:	0018      	movs	r0, r3
 80023c0:	f7ff fedf 	bl	8002182 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7ff ff0d 	bl	80021e8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023ce:	f7fe feab 	bl	8001128 <HAL_GetTick>
 80023d2:	0003      	movs	r3, r0
 80023d4:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023d6:	e01b      	b.n	8002410 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023d8:	f7fe fea6 	bl	8001128 <HAL_GetTick>
 80023dc:	0002      	movs	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d914      	bls.n	8002410 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	0018      	movs	r0, r3
 80023ec:	f7ff ff0e 	bl	800220c <LL_ADC_IsEnabled>
 80023f0:	1e03      	subs	r3, r0, #0
 80023f2:	d00d      	beq.n	8002410 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f8:	2210      	movs	r2, #16
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002404:	2201      	movs	r2, #1
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e024      	b.n	800245a <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff fef9 	bl	800220c <LL_ADC_IsEnabled>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d1dc      	bne.n	80023d8 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68d9      	ldr	r1, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	430a      	orrs	r2, r1
 800242c:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	2203      	movs	r2, #3
 8002434:	4393      	bics	r3, r2
 8002436:	2201      	movs	r2, #1
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	659a      	str	r2, [r3, #88]	@ 0x58
 800243e:	e005      	b.n	800244c <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002444:	2210      	movs	r2, #16
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2254      	movs	r2, #84	@ 0x54
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002454:	231f      	movs	r3, #31
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	781b      	ldrb	r3, [r3, #0]
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b00b      	add	sp, #44	@ 0x2c
 8002460:	bd90      	pop	{r4, r7, pc}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	fffffefd 	.word	0xfffffefd
 8002468:	00008003 	.word	0x00008003
 800246c:	ffff7ffc 	.word	0xffff7ffc
 8002470:	0002f1ff 	.word	0x0002f1ff
 8002474:	40012708 	.word	0x40012708

08002478 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002480:	46c0      	nop			@ (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002490:	46c0      	nop			@ (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80024a0:	46c0      	nop			@ (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b002      	add	sp, #8
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80024b0:	46c0      	nop			@ (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	0002      	movs	r2, r0
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	1dfb      	adds	r3, r7, #7
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80024ca:	d809      	bhi.n	80024e0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024cc:	1dfb      	adds	r3, r7, #7
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	001a      	movs	r2, r3
 80024d2:	231f      	movs	r3, #31
 80024d4:	401a      	ands	r2, r3
 80024d6:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <__NVIC_EnableIRQ+0x30>)
 80024d8:	2101      	movs	r1, #1
 80024da:	4091      	lsls	r1, r2
 80024dc:	000a      	movs	r2, r1
 80024de:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80024e0:	46c0      	nop			@ (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	e000e100 	.word	0xe000e100

080024ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	0002      	movs	r2, r0
 80024f4:	6039      	str	r1, [r7, #0]
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	1dfb      	adds	r3, r7, #7
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8002500:	d828      	bhi.n	8002554 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002502:	4a2f      	ldr	r2, [pc, #188]	@ (80025c0 <__NVIC_SetPriority+0xd4>)
 8002504:	1dfb      	adds	r3, r7, #7
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b25b      	sxtb	r3, r3
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	33c0      	adds	r3, #192	@ 0xc0
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	589b      	ldr	r3, [r3, r2]
 8002512:	1dfa      	adds	r2, r7, #7
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	0011      	movs	r1, r2
 8002518:	2203      	movs	r2, #3
 800251a:	400a      	ands	r2, r1
 800251c:	00d2      	lsls	r2, r2, #3
 800251e:	21ff      	movs	r1, #255	@ 0xff
 8002520:	4091      	lsls	r1, r2
 8002522:	000a      	movs	r2, r1
 8002524:	43d2      	mvns	r2, r2
 8002526:	401a      	ands	r2, r3
 8002528:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	22ff      	movs	r2, #255	@ 0xff
 8002530:	401a      	ands	r2, r3
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	0018      	movs	r0, r3
 8002538:	2303      	movs	r3, #3
 800253a:	4003      	ands	r3, r0
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002540:	481f      	ldr	r0, [pc, #124]	@ (80025c0 <__NVIC_SetPriority+0xd4>)
 8002542:	1dfb      	adds	r3, r7, #7
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b25b      	sxtb	r3, r3
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	430a      	orrs	r2, r1
 800254c:	33c0      	adds	r3, #192	@ 0xc0
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002552:	e031      	b.n	80025b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002554:	4a1b      	ldr	r2, [pc, #108]	@ (80025c4 <__NVIC_SetPriority+0xd8>)
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	0019      	movs	r1, r3
 800255c:	230f      	movs	r3, #15
 800255e:	400b      	ands	r3, r1
 8002560:	3b08      	subs	r3, #8
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3306      	adds	r3, #6
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	18d3      	adds	r3, r2, r3
 800256a:	3304      	adds	r3, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	1dfa      	adds	r2, r7, #7
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	0011      	movs	r1, r2
 8002574:	2203      	movs	r2, #3
 8002576:	400a      	ands	r2, r1
 8002578:	00d2      	lsls	r2, r2, #3
 800257a:	21ff      	movs	r1, #255	@ 0xff
 800257c:	4091      	lsls	r1, r2
 800257e:	000a      	movs	r2, r1
 8002580:	43d2      	mvns	r2, r2
 8002582:	401a      	ands	r2, r3
 8002584:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	22ff      	movs	r2, #255	@ 0xff
 800258c:	401a      	ands	r2, r3
 800258e:	1dfb      	adds	r3, r7, #7
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	0018      	movs	r0, r3
 8002594:	2303      	movs	r3, #3
 8002596:	4003      	ands	r3, r0
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800259c:	4809      	ldr	r0, [pc, #36]	@ (80025c4 <__NVIC_SetPriority+0xd8>)
 800259e:	1dfb      	adds	r3, r7, #7
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	001c      	movs	r4, r3
 80025a4:	230f      	movs	r3, #15
 80025a6:	4023      	ands	r3, r4
 80025a8:	3b08      	subs	r3, #8
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	430a      	orrs	r2, r1
 80025ae:	3306      	adds	r3, #6
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	18c3      	adds	r3, r0, r3
 80025b4:	3304      	adds	r3, #4
 80025b6:	601a      	str	r2, [r3, #0]
}
 80025b8:	46c0      	nop			@ (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b003      	add	sp, #12
 80025be:	bd90      	pop	{r4, r7, pc}
 80025c0:	e000e100 	.word	0xe000e100
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1e5a      	subs	r2, r3, #1
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	045b      	lsls	r3, r3, #17
 80025d8:	429a      	cmp	r2, r3
 80025da:	d301      	bcc.n	80025e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025dc:	2301      	movs	r3, #1
 80025de:	e010      	b.n	8002602 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e0:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <SysTick_Config+0x44>)
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	3a01      	subs	r2, #1
 80025e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e8:	2301      	movs	r3, #1
 80025ea:	425b      	negs	r3, r3
 80025ec:	2103      	movs	r1, #3
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7ff ff7c 	bl	80024ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f4:	4b05      	ldr	r3, [pc, #20]	@ (800260c <SysTick_Config+0x44>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fa:	4b04      	ldr	r3, [pc, #16]	@ (800260c <SysTick_Config+0x44>)
 80025fc:	2207      	movs	r2, #7
 80025fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002600:	2300      	movs	r3, #0
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b002      	add	sp, #8
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			@ (mov r8, r8)
 800260c:	e000e010 	.word	0xe000e010

08002610 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	210f      	movs	r1, #15
 800261c:	187b      	adds	r3, r7, r1
 800261e:	1c02      	adds	r2, r0, #0
 8002620:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	187b      	adds	r3, r7, r1
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b25b      	sxtb	r3, r3
 800262a:	0011      	movs	r1, r2
 800262c:	0018      	movs	r0, r3
 800262e:	f7ff ff5d 	bl	80024ec <__NVIC_SetPriority>
}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b004      	add	sp, #16
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	0002      	movs	r2, r0
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002646:	1dfb      	adds	r3, r7, #7
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	b25b      	sxtb	r3, r3
 800264c:	0018      	movs	r0, r3
 800264e:	f7ff ff33 	bl	80024b8 <__NVIC_EnableIRQ>
}
 8002652:	46c0      	nop			@ (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	b002      	add	sp, #8
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	0018      	movs	r0, r3
 8002666:	f7ff ffaf 	bl	80025c8 <SysTick_Config>
 800266a:	0003      	movs	r3, r0
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b002      	add	sp, #8
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002682:	e147      	b.n	8002914 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2101      	movs	r1, #1
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4091      	lsls	r1, r2
 800268e:	000a      	movs	r2, r1
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d100      	bne.n	800269c <HAL_GPIO_Init+0x28>
 800269a:	e138      	b.n	800290e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2203      	movs	r2, #3
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d005      	beq.n	80026b4 <HAL_GPIO_Init+0x40>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2203      	movs	r2, #3
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d130      	bne.n	8002716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	409a      	lsls	r2, r3
 80026c2:	0013      	movs	r3, r2
 80026c4:	43da      	mvns	r2, r3
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	409a      	lsls	r2, r3
 80026d6:	0013      	movs	r3, r2
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ea:	2201      	movs	r2, #1
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	409a      	lsls	r2, r3
 80026f0:	0013      	movs	r3, r2
 80026f2:	43da      	mvns	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	2201      	movs	r2, #1
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
 8002708:	0013      	movs	r3, r2
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2203      	movs	r2, #3
 800271c:	4013      	ands	r3, r2
 800271e:	2b03      	cmp	r3, #3
 8002720:	d017      	beq.n	8002752 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	2203      	movs	r2, #3
 800272e:	409a      	lsls	r2, r3
 8002730:	0013      	movs	r3, r2
 8002732:	43da      	mvns	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	409a      	lsls	r2, r3
 8002744:	0013      	movs	r3, r2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2203      	movs	r2, #3
 8002758:	4013      	ands	r3, r2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d123      	bne.n	80027a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	08da      	lsrs	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3208      	adds	r2, #8
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	58d3      	ldr	r3, [r2, r3]
 800276a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2207      	movs	r2, #7
 8002770:	4013      	ands	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	220f      	movs	r2, #15
 8002776:	409a      	lsls	r2, r3
 8002778:	0013      	movs	r3, r2
 800277a:	43da      	mvns	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2107      	movs	r1, #7
 800278a:	400b      	ands	r3, r1
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	409a      	lsls	r2, r3
 8002790:	0013      	movs	r3, r2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	08da      	lsrs	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3208      	adds	r2, #8
 80027a0:	0092      	lsls	r2, r2, #2
 80027a2:	6939      	ldr	r1, [r7, #16]
 80027a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	2203      	movs	r2, #3
 80027b2:	409a      	lsls	r2, r3
 80027b4:	0013      	movs	r3, r2
 80027b6:	43da      	mvns	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2203      	movs	r2, #3
 80027c4:	401a      	ands	r2, r3
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	409a      	lsls	r2, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	23c0      	movs	r3, #192	@ 0xc0
 80027e0:	029b      	lsls	r3, r3, #10
 80027e2:	4013      	ands	r3, r2
 80027e4:	d100      	bne.n	80027e8 <HAL_GPIO_Init+0x174>
 80027e6:	e092      	b.n	800290e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80027e8:	4a50      	ldr	r2, [pc, #320]	@ (800292c <HAL_GPIO_Init+0x2b8>)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	089b      	lsrs	r3, r3, #2
 80027ee:	3318      	adds	r3, #24
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	589b      	ldr	r3, [r3, r2]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2203      	movs	r2, #3
 80027fa:	4013      	ands	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	220f      	movs	r2, #15
 8002800:	409a      	lsls	r2, r3
 8002802:	0013      	movs	r3, r2
 8002804:	43da      	mvns	r2, r3
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4013      	ands	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	23a0      	movs	r3, #160	@ 0xa0
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	429a      	cmp	r2, r3
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0x1ca>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a45      	ldr	r2, [pc, #276]	@ (8002930 <HAL_GPIO_Init+0x2bc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_GPIO_Init+0x1c6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a44      	ldr	r2, [pc, #272]	@ (8002934 <HAL_GPIO_Init+0x2c0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0x1c2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a43      	ldr	r2, [pc, #268]	@ (8002938 <HAL_GPIO_Init+0x2c4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_GPIO_Init+0x1be>
 800282e:	2303      	movs	r3, #3
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x1cc>
 8002832:	2305      	movs	r3, #5
 8002834:	e004      	b.n	8002840 <HAL_GPIO_Init+0x1cc>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_Init+0x1cc>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x1cc>
 800283e:	2300      	movs	r3, #0
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	2103      	movs	r1, #3
 8002844:	400a      	ands	r2, r1
 8002846:	00d2      	lsls	r2, r2, #3
 8002848:	4093      	lsls	r3, r2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4313      	orrs	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002850:	4936      	ldr	r1, [pc, #216]	@ (800292c <HAL_GPIO_Init+0x2b8>)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3318      	adds	r3, #24
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800285e:	4b33      	ldr	r3, [pc, #204]	@ (800292c <HAL_GPIO_Init+0x2b8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43da      	mvns	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	2380      	movs	r3, #128	@ 0x80
 8002874:	035b      	lsls	r3, r3, #13
 8002876:	4013      	ands	r3, r2
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002882:	4b2a      	ldr	r3, [pc, #168]	@ (800292c <HAL_GPIO_Init+0x2b8>)
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002888:	4b28      	ldr	r3, [pc, #160]	@ (800292c <HAL_GPIO_Init+0x2b8>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	43da      	mvns	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	039b      	lsls	r3, r3, #14
 80028a0:	4013      	ands	r3, r2
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ac:	4b1f      	ldr	r3, [pc, #124]	@ (800292c <HAL_GPIO_Init+0x2b8>)
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028b2:	4a1e      	ldr	r2, [pc, #120]	@ (800292c <HAL_GPIO_Init+0x2b8>)
 80028b4:	2384      	movs	r3, #132	@ 0x84
 80028b6:	58d3      	ldr	r3, [r2, r3]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43da      	mvns	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	2380      	movs	r3, #128	@ 0x80
 80028ca:	029b      	lsls	r3, r3, #10
 80028cc:	4013      	ands	r3, r2
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028d8:	4914      	ldr	r1, [pc, #80]	@ (800292c <HAL_GPIO_Init+0x2b8>)
 80028da:	2284      	movs	r2, #132	@ 0x84
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80028e0:	4a12      	ldr	r2, [pc, #72]	@ (800292c <HAL_GPIO_Init+0x2b8>)
 80028e2:	2380      	movs	r3, #128	@ 0x80
 80028e4:	58d3      	ldr	r3, [r2, r3]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	43da      	mvns	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	025b      	lsls	r3, r3, #9
 80028fa:	4013      	ands	r3, r2
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002906:	4909      	ldr	r1, [pc, #36]	@ (800292c <HAL_GPIO_Init+0x2b8>)
 8002908:	2280      	movs	r2, #128	@ 0x80
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	40da      	lsrs	r2, r3
 800291c:	1e13      	subs	r3, r2, #0
 800291e:	d000      	beq.n	8002922 <HAL_GPIO_Init+0x2ae>
 8002920:	e6b0      	b.n	8002684 <HAL_GPIO_Init+0x10>
  }
}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	46c0      	nop			@ (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b006      	add	sp, #24
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021800 	.word	0x40021800
 8002930:	50000400 	.word	0x50000400
 8002934:	50000800 	.word	0x50000800
 8002938:	50000c00 	.word	0x50000c00

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	0008      	movs	r0, r1
 8002946:	0011      	movs	r1, r2
 8002948:	1cbb      	adds	r3, r7, #2
 800294a:	1c02      	adds	r2, r0, #0
 800294c:	801a      	strh	r2, [r3, #0]
 800294e:	1c7b      	adds	r3, r7, #1
 8002950:	1c0a      	adds	r2, r1, #0
 8002952:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002954:	1c7b      	adds	r3, r7, #1
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800295c:	1cbb      	adds	r3, r7, #2
 800295e:	881a      	ldrh	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002964:	e003      	b.n	800296e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002966:	1cbb      	adds	r3, r7, #2
 8002968:	881a      	ldrh	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800296e:	46c0      	nop			@ (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b002      	add	sp, #8
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800297c:	4b04      	ldr	r3, [pc, #16]	@ (8002990 <HAL_PWR_EnableBkUpAccess+0x18>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b03      	ldr	r3, [pc, #12]	@ (8002990 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002982:	2180      	movs	r1, #128	@ 0x80
 8002984:	0049      	lsls	r1, r1, #1
 8002986:	430a      	orrs	r2, r1
 8002988:	601a      	str	r2, [r3, #0]
}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40007000 	.word	0x40007000

08002994 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800299c:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a19      	ldr	r2, [pc, #100]	@ (8002a08 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d11f      	bne.n	80029f8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80029b8:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	0013      	movs	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	189b      	adds	r3, r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4912      	ldr	r1, [pc, #72]	@ (8002a10 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80029c6:	0018      	movs	r0, r3
 80029c8:	f7fd fb9a 	bl	8000100 <__udivsi3>
 80029cc:	0003      	movs	r3, r0
 80029ce:	3301      	adds	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029d2:	e008      	b.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3b01      	subs	r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	e001      	b.n	80029e6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e009      	b.n	80029fa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029e6:	4b07      	ldr	r3, [pc, #28]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	2380      	movs	r3, #128	@ 0x80
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	401a      	ands	r2, r3
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d0ed      	beq.n	80029d4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	0018      	movs	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b004      	add	sp, #16
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	40007000 	.word	0x40007000
 8002a08:	fffff9ff 	.word	0xfffff9ff
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	000f4240 	.word	0x000f4240

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e2f3      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d100      	bne.n	8002a32 <HAL_RCC_OscConfig+0x1e>
 8002a30:	e07c      	b.n	8002b2c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a32:	4bc3      	ldr	r3, [pc, #780]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2238      	movs	r2, #56	@ 0x38
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a3c:	4bc0      	ldr	r3, [pc, #768]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2203      	movs	r2, #3
 8002a42:	4013      	ands	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d102      	bne.n	8002a52 <HAL_RCC_OscConfig+0x3e>
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d002      	beq.n	8002a58 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d10b      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a58:	4bb9      	ldr	r3, [pc, #740]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	029b      	lsls	r3, r3, #10
 8002a60:	4013      	ands	r3, r2
 8002a62:	d062      	beq.n	8002b2a <HAL_RCC_OscConfig+0x116>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d15e      	bne.n	8002b2a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e2ce      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	025b      	lsls	r3, r3, #9
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d107      	bne.n	8002a8c <HAL_RCC_OscConfig+0x78>
 8002a7c:	4bb0      	ldr	r3, [pc, #704]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4baf      	ldr	r3, [pc, #700]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	2180      	movs	r1, #128	@ 0x80
 8002a84:	0249      	lsls	r1, r1, #9
 8002a86:	430a      	orrs	r2, r1
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e020      	b.n	8002ace <HAL_RCC_OscConfig+0xba>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	23a0      	movs	r3, #160	@ 0xa0
 8002a92:	02db      	lsls	r3, r3, #11
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d10e      	bne.n	8002ab6 <HAL_RCC_OscConfig+0xa2>
 8002a98:	4ba9      	ldr	r3, [pc, #676]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4ba8      	ldr	r3, [pc, #672]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002a9e:	2180      	movs	r1, #128	@ 0x80
 8002aa0:	02c9      	lsls	r1, r1, #11
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	4ba6      	ldr	r3, [pc, #664]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4ba5      	ldr	r3, [pc, #660]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002aac:	2180      	movs	r1, #128	@ 0x80
 8002aae:	0249      	lsls	r1, r1, #9
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	e00b      	b.n	8002ace <HAL_RCC_OscConfig+0xba>
 8002ab6:	4ba2      	ldr	r3, [pc, #648]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4ba1      	ldr	r3, [pc, #644]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002abc:	49a1      	ldr	r1, [pc, #644]	@ (8002d44 <HAL_RCC_OscConfig+0x330>)
 8002abe:	400a      	ands	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	4b9f      	ldr	r3, [pc, #636]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b9e      	ldr	r3, [pc, #632]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ac8:	499f      	ldr	r1, [pc, #636]	@ (8002d48 <HAL_RCC_OscConfig+0x334>)
 8002aca:	400a      	ands	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d014      	beq.n	8002b00 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fb27 	bl	8001128 <HAL_GetTick>
 8002ada:	0003      	movs	r3, r0
 8002adc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7fe fb22 	bl	8001128 <HAL_GetTick>
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	@ 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e28d      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af2:	4b93      	ldr	r3, [pc, #588]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	029b      	lsls	r3, r3, #10
 8002afa:	4013      	ands	r3, r2
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0xcc>
 8002afe:	e015      	b.n	8002b2c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fb12 	bl	8001128 <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0a:	f7fe fb0d 	bl	8001128 <HAL_GetTick>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b64      	cmp	r3, #100	@ 0x64
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e278      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b1c:	4b88      	ldr	r3, [pc, #544]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	029b      	lsls	r3, r3, #10
 8002b24:	4013      	ands	r3, r2
 8002b26:	d1f0      	bne.n	8002b0a <HAL_RCC_OscConfig+0xf6>
 8002b28:	e000      	b.n	8002b2c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2202      	movs	r2, #2
 8002b32:	4013      	ands	r3, r2
 8002b34:	d100      	bne.n	8002b38 <HAL_RCC_OscConfig+0x124>
 8002b36:	e099      	b.n	8002c6c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b38:	4b81      	ldr	r3, [pc, #516]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2238      	movs	r2, #56	@ 0x38
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b42:	4b7f      	ldr	r3, [pc, #508]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2203      	movs	r2, #3
 8002b48:	4013      	ands	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d102      	bne.n	8002b58 <HAL_RCC_OscConfig+0x144>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d002      	beq.n	8002b5e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d135      	bne.n	8002bca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b5e:	4b78      	ldr	r3, [pc, #480]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4013      	ands	r3, r2
 8002b68:	d005      	beq.n	8002b76 <HAL_RCC_OscConfig+0x162>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e24b      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b76:	4b72      	ldr	r3, [pc, #456]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4a74      	ldr	r2, [pc, #464]	@ (8002d4c <HAL_RCC_OscConfig+0x338>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	0019      	movs	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	021a      	lsls	r2, r3, #8
 8002b86:	4b6e      	ldr	r3, [pc, #440]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d112      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b92:	4b6b      	ldr	r3, [pc, #428]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a6e      	ldr	r2, [pc, #440]	@ (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	4b67      	ldr	r3, [pc, #412]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ba6:	4b66      	ldr	r3, [pc, #408]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0adb      	lsrs	r3, r3, #11
 8002bac:	2207      	movs	r2, #7
 8002bae:	4013      	ands	r3, r2
 8002bb0:	4a68      	ldr	r2, [pc, #416]	@ (8002d54 <HAL_RCC_OscConfig+0x340>)
 8002bb2:	40da      	lsrs	r2, r3
 8002bb4:	4b68      	ldr	r3, [pc, #416]	@ (8002d58 <HAL_RCC_OscConfig+0x344>)
 8002bb6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bb8:	4b68      	ldr	r3, [pc, #416]	@ (8002d5c <HAL_RCC_OscConfig+0x348>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7fe fa57 	bl	8001070 <HAL_InitTick>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d051      	beq.n	8002c6a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e221      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d030      	beq.n	8002c34 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a5e      	ldr	r2, [pc, #376]	@ (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	0019      	movs	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	4b57      	ldr	r3, [pc, #348]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002be2:	430a      	orrs	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002be6:	4b56      	ldr	r3, [pc, #344]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b55      	ldr	r3, [pc, #340]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002bec:	2180      	movs	r1, #128	@ 0x80
 8002bee:	0049      	lsls	r1, r1, #1
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fa98 	bl	8001128 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7fe fa93 	bl	8001128 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1fe      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c10:	4b4b      	ldr	r3, [pc, #300]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	2380      	movs	r3, #128	@ 0x80
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1c:	4b48      	ldr	r3, [pc, #288]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a4a      	ldr	r2, [pc, #296]	@ (8002d4c <HAL_RCC_OscConfig+0x338>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	0019      	movs	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	021a      	lsls	r2, r3, #8
 8002c2c:	4b44      	ldr	r3, [pc, #272]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	e01b      	b.n	8002c6c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c34:	4b42      	ldr	r3, [pc, #264]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b41      	ldr	r3, [pc, #260]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c3a:	4949      	ldr	r1, [pc, #292]	@ (8002d60 <HAL_RCC_OscConfig+0x34c>)
 8002c3c:	400a      	ands	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe fa72 	bl	8001128 <HAL_GetTick>
 8002c44:	0003      	movs	r3, r0
 8002c46:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fa6d 	bl	8001128 <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e1d8      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c5c:	4b38      	ldr	r3, [pc, #224]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4013      	ands	r3, r2
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x236>
 8002c68:	e000      	b.n	8002c6c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c6a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2208      	movs	r2, #8
 8002c72:	4013      	ands	r3, r2
 8002c74:	d047      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c76:	4b32      	ldr	r3, [pc, #200]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2238      	movs	r2, #56	@ 0x38
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b18      	cmp	r3, #24
 8002c80:	d10a      	bne.n	8002c98 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c82:	4b2f      	ldr	r3, [pc, #188]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c86:	2202      	movs	r2, #2
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d03c      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2f2>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d138      	bne.n	8002d06 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e1ba      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d019      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002ca0:	4b27      	ldr	r3, [pc, #156]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ca2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ca4:	4b26      	ldr	r3, [pc, #152]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe fa3c 	bl	8001128 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7fe fa37 	bl	8001128 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1a2      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ccc:	2202      	movs	r2, #2
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d0f1      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2a2>
 8002cd2:	e018      	b.n	8002d06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002cd6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cd8:	4b19      	ldr	r3, [pc, #100]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002cda:	2101      	movs	r1, #1
 8002cdc:	438a      	bics	r2, r1
 8002cde:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fa22 	bl	8001128 <HAL_GetTick>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cea:	f7fe fa1d 	bl	8001128 <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e188      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cfc:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d00:	2202      	movs	r2, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d1f1      	bne.n	8002cea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d100      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2fe>
 8002d10:	e0c6      	b.n	8002ea0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d12:	231f      	movs	r3, #31
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d1a:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2238      	movs	r2, #56	@ 0x38
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d11e      	bne.n	8002d64 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <HAL_RCC_OscConfig+0x32c>)
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d100      	bne.n	8002d32 <HAL_RCC_OscConfig+0x31e>
 8002d30:	e0b6      	b.n	8002ea0 <HAL_RCC_OscConfig+0x48c>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d000      	beq.n	8002d3c <HAL_RCC_OscConfig+0x328>
 8002d3a:	e0b1      	b.n	8002ea0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e166      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
 8002d40:	40021000 	.word	0x40021000
 8002d44:	fffeffff 	.word	0xfffeffff
 8002d48:	fffbffff 	.word	0xfffbffff
 8002d4c:	ffff80ff 	.word	0xffff80ff
 8002d50:	ffffc7ff 	.word	0xffffc7ff
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	20000004 	.word	0x20000004
 8002d60:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d64:	4bac      	ldr	r3, [pc, #688]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002d66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d68:	2380      	movs	r3, #128	@ 0x80
 8002d6a:	055b      	lsls	r3, r3, #21
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x360>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x362>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d011      	beq.n	8002d9e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	4ba7      	ldr	r3, [pc, #668]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002d7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d7e:	4ba6      	ldr	r3, [pc, #664]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002d80:	2180      	movs	r1, #128	@ 0x80
 8002d82:	0549      	lsls	r1, r1, #21
 8002d84:	430a      	orrs	r2, r1
 8002d86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d88:	4ba3      	ldr	r3, [pc, #652]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002d8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	055b      	lsls	r3, r3, #21
 8002d90:	4013      	ands	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d96:	231f      	movs	r3, #31
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9e:	4b9f      	ldr	r3, [pc, #636]	@ (800301c <HAL_RCC_OscConfig+0x608>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	2380      	movs	r3, #128	@ 0x80
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	d11a      	bne.n	8002de0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002daa:	4b9c      	ldr	r3, [pc, #624]	@ (800301c <HAL_RCC_OscConfig+0x608>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b9b      	ldr	r3, [pc, #620]	@ (800301c <HAL_RCC_OscConfig+0x608>)
 8002db0:	2180      	movs	r1, #128	@ 0x80
 8002db2:	0049      	lsls	r1, r1, #1
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002db8:	f7fe f9b6 	bl	8001128 <HAL_GetTick>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc2:	f7fe f9b1 	bl	8001128 <HAL_GetTick>
 8002dc6:	0002      	movs	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e11c      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd4:	4b91      	ldr	r3, [pc, #580]	@ (800301c <HAL_RCC_OscConfig+0x608>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d106      	bne.n	8002df6 <HAL_RCC_OscConfig+0x3e2>
 8002de8:	4b8b      	ldr	r3, [pc, #556]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002dea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dec:	4b8a      	ldr	r3, [pc, #552]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	430a      	orrs	r2, r1
 8002df2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002df4:	e01c      	b.n	8002e30 <HAL_RCC_OscConfig+0x41c>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x404>
 8002dfe:	4b86      	ldr	r3, [pc, #536]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e02:	4b85      	ldr	r3, [pc, #532]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e04:	2104      	movs	r1, #4
 8002e06:	430a      	orrs	r2, r1
 8002e08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e0a:	4b83      	ldr	r3, [pc, #524]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e0e:	4b82      	ldr	r3, [pc, #520]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e10:	2101      	movs	r1, #1
 8002e12:	430a      	orrs	r2, r1
 8002e14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0x41c>
 8002e18:	4b7f      	ldr	r3, [pc, #508]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e1e:	2101      	movs	r1, #1
 8002e20:	438a      	bics	r2, r1
 8002e22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e24:	4b7c      	ldr	r3, [pc, #496]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e28:	4b7b      	ldr	r3, [pc, #492]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	438a      	bics	r2, r1
 8002e2e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d014      	beq.n	8002e62 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7fe f976 	bl	8001128 <HAL_GetTick>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e40:	e009      	b.n	8002e56 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fe f971 	bl	8001128 <HAL_GetTick>
 8002e46:	0002      	movs	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	4a74      	ldr	r2, [pc, #464]	@ (8003020 <HAL_RCC_OscConfig+0x60c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0db      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e56:	4b70      	ldr	r3, [pc, #448]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x42e>
 8002e60:	e013      	b.n	8002e8a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe f961 	bl	8001128 <HAL_GetTick>
 8002e66:	0003      	movs	r3, r0
 8002e68:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e6a:	e009      	b.n	8002e80 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fe f95c 	bl	8001128 <HAL_GetTick>
 8002e70:	0002      	movs	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	4a6a      	ldr	r2, [pc, #424]	@ (8003020 <HAL_RCC_OscConfig+0x60c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0c6      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e80:	4b65      	ldr	r3, [pc, #404]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	2202      	movs	r2, #2
 8002e86:	4013      	ands	r3, r2
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e8a:	231f      	movs	r3, #31
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e94:	4b60      	ldr	r3, [pc, #384]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e98:	4b5f      	ldr	r3, [pc, #380]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002e9a:	4962      	ldr	r1, [pc, #392]	@ (8003024 <HAL_RCC_OscConfig+0x610>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d100      	bne.n	8002eaa <HAL_RCC_OscConfig+0x496>
 8002ea8:	e0b0      	b.n	800300c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2238      	movs	r2, #56	@ 0x38
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d100      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4a4>
 8002eb6:	e078      	b.n	8002faa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d153      	bne.n	8002f68 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec0:	4b55      	ldr	r3, [pc, #340]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b54      	ldr	r3, [pc, #336]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002ec6:	4958      	ldr	r1, [pc, #352]	@ (8003028 <HAL_RCC_OscConfig+0x614>)
 8002ec8:	400a      	ands	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ecc:	f7fe f92c 	bl	8001128 <HAL_GetTick>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed6:	f7fe f927 	bl	8001128 <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e092      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee8:	4b4b      	ldr	r3, [pc, #300]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	049b      	lsls	r3, r3, #18
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef4:	4b48      	ldr	r3, [pc, #288]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800302c <HAL_RCC_OscConfig+0x618>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f22:	4b3d      	ldr	r3, [pc, #244]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b3c      	ldr	r3, [pc, #240]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002f28:	2180      	movs	r1, #128	@ 0x80
 8002f2a:	0449      	lsls	r1, r1, #17
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f30:	4b39      	ldr	r3, [pc, #228]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	4b38      	ldr	r3, [pc, #224]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002f36:	2180      	movs	r1, #128	@ 0x80
 8002f38:	0549      	lsls	r1, r1, #21
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fe f8f3 	bl	8001128 <HAL_GetTick>
 8002f42:	0003      	movs	r3, r0
 8002f44:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fe f8ee 	bl	8001128 <HAL_GetTick>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e059      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	2380      	movs	r3, #128	@ 0x80
 8002f60:	049b      	lsls	r3, r3, #18
 8002f62:	4013      	ands	r3, r2
 8002f64:	d0f0      	beq.n	8002f48 <HAL_RCC_OscConfig+0x534>
 8002f66:	e051      	b.n	800300c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f68:	4b2b      	ldr	r3, [pc, #172]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002f6e:	492e      	ldr	r1, [pc, #184]	@ (8003028 <HAL_RCC_OscConfig+0x614>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe f8d8 	bl	8001128 <HAL_GetTick>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7e:	f7fe f8d3 	bl	8001128 <HAL_GetTick>
 8002f82:	0002      	movs	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e03e      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f90:	4b21      	ldr	r3, [pc, #132]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	2380      	movs	r3, #128	@ 0x80
 8002f96:	049b      	lsls	r3, r3, #18
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d1f0      	bne.n	8002f7e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002fa2:	4923      	ldr	r1, [pc, #140]	@ (8003030 <HAL_RCC_OscConfig+0x61c>)
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	60da      	str	r2, [r3, #12]
 8002fa8:	e030      	b.n	800300c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e02b      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002fb6:	4b18      	ldr	r3, [pc, #96]	@ (8003018 <HAL_RCC_OscConfig+0x604>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d11e      	bne.n	8003008 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2270      	movs	r2, #112	@ 0x70
 8002fce:	401a      	ands	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d117      	bne.n	8003008 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	23fe      	movs	r3, #254	@ 0xfe
 8002fdc:	01db      	lsls	r3, r3, #7
 8002fde:	401a      	ands	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d10e      	bne.n	8003008 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	23f8      	movs	r3, #248	@ 0xf8
 8002fee:	039b      	lsls	r3, r3, #14
 8002ff0:	401a      	ands	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d106      	bne.n	8003008 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	0f5b      	lsrs	r3, r3, #29
 8002ffe:	075a      	lsls	r2, r3, #29
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b008      	add	sp, #32
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	40021000 	.word	0x40021000
 800301c:	40007000 	.word	0x40007000
 8003020:	00001388 	.word	0x00001388
 8003024:	efffffff 	.word	0xefffffff
 8003028:	feffffff 	.word	0xfeffffff
 800302c:	1fc1808c 	.word	0x1fc1808c
 8003030:	effefffc 	.word	0xeffefffc

08003034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0e9      	b.n	800321c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b76      	ldr	r3, [pc, #472]	@ (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2207      	movs	r2, #7
 800304e:	4013      	ands	r3, r2
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d91e      	bls.n	8003094 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b73      	ldr	r3, [pc, #460]	@ (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2207      	movs	r2, #7
 800305c:	4393      	bics	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	4b70      	ldr	r3, [pc, #448]	@ (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003068:	f7fe f85e 	bl	8001128 <HAL_GetTick>
 800306c:	0003      	movs	r3, r0
 800306e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003070:	e009      	b.n	8003086 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003072:	f7fe f859 	bl	8001128 <HAL_GetTick>
 8003076:	0002      	movs	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	4a6a      	ldr	r2, [pc, #424]	@ (8003228 <HAL_RCC_ClockConfig+0x1f4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e0ca      	b.n	800321c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003086:	4b67      	ldr	r3, [pc, #412]	@ (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2207      	movs	r2, #7
 800308c:	4013      	ands	r3, r2
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d1ee      	bne.n	8003072 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2202      	movs	r2, #2
 800309a:	4013      	ands	r3, r2
 800309c:	d015      	beq.n	80030ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2204      	movs	r2, #4
 80030a4:	4013      	ands	r3, r2
 80030a6:	d006      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030a8:	4b60      	ldr	r3, [pc, #384]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	4b5f      	ldr	r3, [pc, #380]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 80030ae:	21e0      	movs	r1, #224	@ 0xe0
 80030b0:	01c9      	lsls	r1, r1, #7
 80030b2:	430a      	orrs	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b6:	4b5d      	ldr	r3, [pc, #372]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003230 <HAL_RCC_ClockConfig+0x1fc>)
 80030bc:	4013      	ands	r3, r2
 80030be:	0019      	movs	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	4b59      	ldr	r3, [pc, #356]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2201      	movs	r2, #1
 80030d0:	4013      	ands	r3, r2
 80030d2:	d057      	beq.n	8003184 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d107      	bne.n	80030ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030dc:	4b53      	ldr	r3, [pc, #332]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	2380      	movs	r3, #128	@ 0x80
 80030e2:	029b      	lsls	r3, r3, #10
 80030e4:	4013      	ands	r3, r2
 80030e6:	d12b      	bne.n	8003140 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e097      	b.n	800321c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f4:	4b4d      	ldr	r3, [pc, #308]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2380      	movs	r3, #128	@ 0x80
 80030fa:	049b      	lsls	r3, r3, #18
 80030fc:	4013      	ands	r3, r2
 80030fe:	d11f      	bne.n	8003140 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e08b      	b.n	800321c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d107      	bne.n	800311c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310c:	4b47      	ldr	r3, [pc, #284]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4013      	ands	r3, r2
 8003116:	d113      	bne.n	8003140 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e07f      	b.n	800321c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d106      	bne.n	8003132 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003124:	4b41      	ldr	r3, [pc, #260]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 8003126:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003128:	2202      	movs	r2, #2
 800312a:	4013      	ands	r3, r2
 800312c:	d108      	bne.n	8003140 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e074      	b.n	800321c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003132:	4b3e      	ldr	r3, [pc, #248]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 8003134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003136:	2202      	movs	r2, #2
 8003138:	4013      	ands	r3, r2
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e06d      	b.n	800321c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003140:	4b3a      	ldr	r3, [pc, #232]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2207      	movs	r2, #7
 8003146:	4393      	bics	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	4b37      	ldr	r3, [pc, #220]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003154:	f7fd ffe8 	bl	8001128 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315c:	e009      	b.n	8003172 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315e:	f7fd ffe3 	bl	8001128 <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	4a2f      	ldr	r2, [pc, #188]	@ (8003228 <HAL_RCC_ClockConfig+0x1f4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e054      	b.n	800321c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	4b2e      	ldr	r3, [pc, #184]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2238      	movs	r2, #56	@ 0x38
 8003178:	401a      	ands	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	429a      	cmp	r2, r3
 8003182:	d1ec      	bne.n	800315e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003184:	4b27      	ldr	r3, [pc, #156]	@ (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2207      	movs	r2, #7
 800318a:	4013      	ands	r3, r2
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d21e      	bcs.n	80031d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003192:	4b24      	ldr	r3, [pc, #144]	@ (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2207      	movs	r2, #7
 8003198:	4393      	bics	r3, r2
 800319a:	0019      	movs	r1, r3
 800319c:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031a4:	f7fd ffc0 	bl	8001128 <HAL_GetTick>
 80031a8:	0003      	movs	r3, r0
 80031aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031ac:	e009      	b.n	80031c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ae:	f7fd ffbb 	bl	8001128 <HAL_GetTick>
 80031b2:	0002      	movs	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003228 <HAL_RCC_ClockConfig+0x1f4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e02c      	b.n	800321c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031c2:	4b18      	ldr	r3, [pc, #96]	@ (8003224 <HAL_RCC_ClockConfig+0x1f0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2207      	movs	r2, #7
 80031c8:	4013      	ands	r3, r2
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1ee      	bne.n	80031ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2204      	movs	r2, #4
 80031d6:	4013      	ands	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031da:	4b14      	ldr	r3, [pc, #80]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	4a15      	ldr	r2, [pc, #84]	@ (8003234 <HAL_RCC_ClockConfig+0x200>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031ee:	f000 f829 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 80031f2:	0001      	movs	r1, r0
 80031f4:	4b0d      	ldr	r3, [pc, #52]	@ (800322c <HAL_RCC_ClockConfig+0x1f8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	220f      	movs	r2, #15
 80031fc:	401a      	ands	r2, r3
 80031fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <HAL_RCC_ClockConfig+0x204>)
 8003200:	0092      	lsls	r2, r2, #2
 8003202:	58d3      	ldr	r3, [r2, r3]
 8003204:	221f      	movs	r2, #31
 8003206:	4013      	ands	r3, r2
 8003208:	000a      	movs	r2, r1
 800320a:	40da      	lsrs	r2, r3
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <HAL_RCC_ClockConfig+0x208>)
 800320e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003210:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <HAL_RCC_ClockConfig+0x20c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0018      	movs	r0, r3
 8003216:	f7fd ff2b 	bl	8001070 <HAL_InitTick>
 800321a:	0003      	movs	r3, r0
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b004      	add	sp, #16
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40022000 	.word	0x40022000
 8003228:	00001388 	.word	0x00001388
 800322c:	40021000 	.word	0x40021000
 8003230:	fffff0ff 	.word	0xfffff0ff
 8003234:	ffff8fff 	.word	0xffff8fff
 8003238:	0800505c 	.word	0x0800505c
 800323c:	20000000 	.word	0x20000000
 8003240:	20000004 	.word	0x20000004

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800324a:	4b3c      	ldr	r3, [pc, #240]	@ (800333c <HAL_RCC_GetSysClockFreq+0xf8>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	2238      	movs	r2, #56	@ 0x38
 8003250:	4013      	ands	r3, r2
 8003252:	d10f      	bne.n	8003274 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003254:	4b39      	ldr	r3, [pc, #228]	@ (800333c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	0adb      	lsrs	r3, r3, #11
 800325a:	2207      	movs	r2, #7
 800325c:	4013      	ands	r3, r2
 800325e:	2201      	movs	r2, #1
 8003260:	409a      	lsls	r2, r3
 8003262:	0013      	movs	r3, r2
 8003264:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003266:	6839      	ldr	r1, [r7, #0]
 8003268:	4835      	ldr	r0, [pc, #212]	@ (8003340 <HAL_RCC_GetSysClockFreq+0xfc>)
 800326a:	f7fc ff49 	bl	8000100 <__udivsi3>
 800326e:	0003      	movs	r3, r0
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	e05d      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003274:	4b31      	ldr	r3, [pc, #196]	@ (800333c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2238      	movs	r2, #56	@ 0x38
 800327a:	4013      	ands	r3, r2
 800327c:	2b08      	cmp	r3, #8
 800327e:	d102      	bne.n	8003286 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003280:	4b30      	ldr	r3, [pc, #192]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x100>)
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	e054      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003286:	4b2d      	ldr	r3, [pc, #180]	@ (800333c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2238      	movs	r2, #56	@ 0x38
 800328c:	4013      	ands	r3, r2
 800328e:	2b10      	cmp	r3, #16
 8003290:	d138      	bne.n	8003304 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003292:	4b2a      	ldr	r3, [pc, #168]	@ (800333c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2203      	movs	r2, #3
 8003298:	4013      	ands	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800329c:	4b27      	ldr	r3, [pc, #156]	@ (800333c <HAL_RCC_GetSysClockFreq+0xf8>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	2207      	movs	r2, #7
 80032a4:	4013      	ands	r3, r2
 80032a6:	3301      	adds	r3, #1
 80032a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d10d      	bne.n	80032cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	4824      	ldr	r0, [pc, #144]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x100>)
 80032b4:	f7fc ff24 	bl	8000100 <__udivsi3>
 80032b8:	0003      	movs	r3, r0
 80032ba:	0019      	movs	r1, r3
 80032bc:	4b1f      	ldr	r3, [pc, #124]	@ (800333c <HAL_RCC_GetSysClockFreq+0xf8>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	0a1b      	lsrs	r3, r3, #8
 80032c2:	227f      	movs	r2, #127	@ 0x7f
 80032c4:	4013      	ands	r3, r2
 80032c6:	434b      	muls	r3, r1
 80032c8:	617b      	str	r3, [r7, #20]
        break;
 80032ca:	e00d      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	481c      	ldr	r0, [pc, #112]	@ (8003340 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032d0:	f7fc ff16 	bl	8000100 <__udivsi3>
 80032d4:	0003      	movs	r3, r0
 80032d6:	0019      	movs	r1, r3
 80032d8:	4b18      	ldr	r3, [pc, #96]	@ (800333c <HAL_RCC_GetSysClockFreq+0xf8>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	227f      	movs	r2, #127	@ 0x7f
 80032e0:	4013      	ands	r3, r2
 80032e2:	434b      	muls	r3, r1
 80032e4:	617b      	str	r3, [r7, #20]
        break;
 80032e6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80032e8:	4b14      	ldr	r3, [pc, #80]	@ (800333c <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	0f5b      	lsrs	r3, r3, #29
 80032ee:	2207      	movs	r2, #7
 80032f0:	4013      	ands	r3, r2
 80032f2:	3301      	adds	r3, #1
 80032f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	6978      	ldr	r0, [r7, #20]
 80032fa:	f7fc ff01 	bl	8000100 <__udivsi3>
 80032fe:	0003      	movs	r3, r0
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	e015      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003304:	4b0d      	ldr	r3, [pc, #52]	@ (800333c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2238      	movs	r2, #56	@ 0x38
 800330a:	4013      	ands	r3, r2
 800330c:	2b20      	cmp	r3, #32
 800330e:	d103      	bne.n	8003318 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003310:	2380      	movs	r3, #128	@ 0x80
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	e00b      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003318:	4b08      	ldr	r3, [pc, #32]	@ (800333c <HAL_RCC_GetSysClockFreq+0xf8>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2238      	movs	r2, #56	@ 0x38
 800331e:	4013      	ands	r3, r2
 8003320:	2b18      	cmp	r3, #24
 8003322:	d103      	bne.n	800332c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003324:	23fa      	movs	r3, #250	@ 0xfa
 8003326:	01db      	lsls	r3, r3, #7
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	e001      	b.n	8003330 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003330:	693b      	ldr	r3, [r7, #16]
}
 8003332:	0018      	movs	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	b006      	add	sp, #24
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	40021000 	.word	0x40021000
 8003340:	00f42400 	.word	0x00f42400
 8003344:	007a1200 	.word	0x007a1200

08003348 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003350:	2313      	movs	r3, #19
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003358:	2312      	movs	r3, #18
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2380      	movs	r3, #128	@ 0x80
 8003366:	029b      	lsls	r3, r3, #10
 8003368:	4013      	ands	r3, r2
 800336a:	d100      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800336c:	e0a3      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336e:	2011      	movs	r0, #17
 8003370:	183b      	adds	r3, r7, r0
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003376:	4b7f      	ldr	r3, [pc, #508]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003378:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800337a:	2380      	movs	r3, #128	@ 0x80
 800337c:	055b      	lsls	r3, r3, #21
 800337e:	4013      	ands	r3, r2
 8003380:	d110      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	4b7c      	ldr	r3, [pc, #496]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003384:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003386:	4b7b      	ldr	r3, [pc, #492]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003388:	2180      	movs	r1, #128	@ 0x80
 800338a:	0549      	lsls	r1, r1, #21
 800338c:	430a      	orrs	r2, r1
 800338e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003390:	4b78      	ldr	r3, [pc, #480]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003394:	2380      	movs	r3, #128	@ 0x80
 8003396:	055b      	lsls	r3, r3, #21
 8003398:	4013      	ands	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339e:	183b      	adds	r3, r7, r0
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033a4:	4b74      	ldr	r3, [pc, #464]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b73      	ldr	r3, [pc, #460]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033aa:	2180      	movs	r1, #128	@ 0x80
 80033ac:	0049      	lsls	r1, r1, #1
 80033ae:	430a      	orrs	r2, r1
 80033b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033b2:	f7fd feb9 	bl	8001128 <HAL_GetTick>
 80033b6:	0003      	movs	r3, r0
 80033b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ba:	e00b      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033bc:	f7fd feb4 	bl	8001128 <HAL_GetTick>
 80033c0:	0002      	movs	r2, r0
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d904      	bls.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80033ca:	2313      	movs	r3, #19
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	2203      	movs	r2, #3
 80033d0:	701a      	strb	r2, [r3, #0]
        break;
 80033d2:	e005      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033d4:	4b68      	ldr	r3, [pc, #416]	@ (8003578 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	2380      	movs	r3, #128	@ 0x80
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	4013      	ands	r3, r2
 80033de:	d0ed      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80033e0:	2313      	movs	r3, #19
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d154      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ea:	4b62      	ldr	r3, [pc, #392]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80033ee:	23c0      	movs	r3, #192	@ 0xc0
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4013      	ands	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d019      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	429a      	cmp	r2, r3
 8003404:	d014      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003406:	4b5b      	ldr	r3, [pc, #364]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340a:	4a5c      	ldr	r2, [pc, #368]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800340c:	4013      	ands	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003410:	4b58      	ldr	r3, [pc, #352]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003412:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003414:	4b57      	ldr	r3, [pc, #348]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003416:	2180      	movs	r1, #128	@ 0x80
 8003418:	0249      	lsls	r1, r1, #9
 800341a:	430a      	orrs	r2, r1
 800341c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800341e:	4b55      	ldr	r3, [pc, #340]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003420:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003422:	4b54      	ldr	r3, [pc, #336]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003424:	4956      	ldr	r1, [pc, #344]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003426:	400a      	ands	r2, r1
 8003428:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800342a:	4b52      	ldr	r3, [pc, #328]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2201      	movs	r2, #1
 8003434:	4013      	ands	r3, r2
 8003436:	d016      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fd fe76 	bl	8001128 <HAL_GetTick>
 800343c:	0003      	movs	r3, r0
 800343e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003440:	e00c      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fd fe71 	bl	8001128 <HAL_GetTick>
 8003446:	0002      	movs	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	4a4d      	ldr	r2, [pc, #308]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d904      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003452:	2313      	movs	r3, #19
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	2203      	movs	r2, #3
 8003458:	701a      	strb	r2, [r3, #0]
            break;
 800345a:	e004      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345c:	4b45      	ldr	r3, [pc, #276]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800345e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003460:	2202      	movs	r2, #2
 8003462:	4013      	ands	r3, r2
 8003464:	d0ed      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003466:	2313      	movs	r3, #19
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003470:	4b40      	ldr	r3, [pc, #256]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	4a41      	ldr	r2, [pc, #260]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003476:	4013      	ands	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695a      	ldr	r2, [r3, #20]
 800347e:	4b3d      	ldr	r3, [pc, #244]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003480:	430a      	orrs	r2, r1
 8003482:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003484:	e00c      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003486:	2312      	movs	r3, #18
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	2213      	movs	r2, #19
 800348c:	18ba      	adds	r2, r7, r2
 800348e:	7812      	ldrb	r2, [r2, #0]
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e005      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003494:	2312      	movs	r3, #18
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2213      	movs	r2, #19
 800349a:	18ba      	adds	r2, r7, r2
 800349c:	7812      	ldrb	r2, [r2, #0]
 800349e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034a0:	2311      	movs	r3, #17
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034aa:	4b32      	ldr	r3, [pc, #200]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80034ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034ae:	4b31      	ldr	r3, [pc, #196]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80034b0:	4935      	ldr	r1, [pc, #212]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2201      	movs	r2, #1
 80034bc:	4013      	ands	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80034c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c4:	2203      	movs	r2, #3
 80034c6:	4393      	bics	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	4b29      	ldr	r3, [pc, #164]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80034d0:	430a      	orrs	r2, r1
 80034d2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2220      	movs	r2, #32
 80034da:	4013      	ands	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034de:	4b25      	ldr	r3, [pc, #148]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80034e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e2:	4a2a      	ldr	r2, [pc, #168]	@ (800358c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	4b21      	ldr	r3, [pc, #132]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80034ee:	430a      	orrs	r2, r1
 80034f0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	2380      	movs	r3, #128	@ 0x80
 80034f8:	01db      	lsls	r3, r3, #7
 80034fa:	4013      	ands	r3, r2
 80034fc:	d015      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	0899      	lsrs	r1, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	4b1a      	ldr	r3, [pc, #104]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800350c:	430a      	orrs	r2, r1
 800350e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	05db      	lsls	r3, r3, #23
 8003518:	429a      	cmp	r2, r3
 800351a:	d106      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800351c:	4b15      	ldr	r3, [pc, #84]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	4b14      	ldr	r3, [pc, #80]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003522:	2180      	movs	r1, #128	@ 0x80
 8003524:	0249      	lsls	r1, r1, #9
 8003526:	430a      	orrs	r2, r1
 8003528:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	@ 0x80
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	4013      	ands	r3, r2
 8003534:	d016      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003536:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353a:	4a15      	ldr	r2, [pc, #84]	@ (8003590 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800353c:	4013      	ands	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003546:	430a      	orrs	r2, r1
 8003548:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	2380      	movs	r3, #128	@ 0x80
 8003550:	01db      	lsls	r3, r3, #7
 8003552:	429a      	cmp	r2, r3
 8003554:	d106      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003556:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003558:	68da      	ldr	r2, [r3, #12]
 800355a:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800355c:	2180      	movs	r1, #128	@ 0x80
 800355e:	0249      	lsls	r1, r1, #9
 8003560:	430a      	orrs	r2, r1
 8003562:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003564:	2312      	movs	r3, #18
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	781b      	ldrb	r3, [r3, #0]
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b006      	add	sp, #24
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	40021000 	.word	0x40021000
 8003578:	40007000 	.word	0x40007000
 800357c:	fffffcff 	.word	0xfffffcff
 8003580:	fffeffff 	.word	0xfffeffff
 8003584:	00001388 	.word	0x00001388
 8003588:	efffffff 	.word	0xefffffff
 800358c:	ffffcfff 	.word	0xffffcfff
 8003590:	ffff3fff 	.word	0xffff3fff

08003594 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003594:	b5b0      	push	{r4, r5, r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800359c:	230f      	movs	r3, #15
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d100      	bne.n	80035ac <HAL_RTC_Init+0x18>
 80035aa:	e08c      	b.n	80036c6 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2229      	movs	r2, #41	@ 0x29
 80035b0:	5c9b      	ldrb	r3, [r3, r2]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2228      	movs	r2, #40	@ 0x28
 80035bc:	2100      	movs	r1, #0
 80035be:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2288      	movs	r2, #136	@ 0x88
 80035c4:	0212      	lsls	r2, r2, #8
 80035c6:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7fd fbd4 	bl	8000d78 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2229      	movs	r2, #41	@ 0x29
 80035d4:	2102      	movs	r1, #2
 80035d6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2210      	movs	r2, #16
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d062      	beq.n	80036ac <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	22ca      	movs	r2, #202	@ 0xca
 80035ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2253      	movs	r2, #83	@ 0x53
 80035f4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80035f6:	250f      	movs	r5, #15
 80035f8:	197c      	adds	r4, r7, r5
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 f9cb 	bl	8003998 <RTC_EnterInitMode>
 8003602:	0003      	movs	r3, r0
 8003604:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8003606:	0028      	movs	r0, r5
 8003608:	183b      	adds	r3, r7, r0
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d12c      	bne.n	800366a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	492e      	ldr	r1, [pc, #184]	@ (80036d4 <HAL_RTC_Init+0x140>)
 800361c:	400a      	ands	r2, r1
 800361e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689a      	ldr	r2, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6912      	ldr	r2, [r2, #16]
 8003646:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6919      	ldr	r1, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	041a      	lsls	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800365c:	183c      	adds	r4, r7, r0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 f9db 	bl	8003a1c <RTC_ExitInitMode>
 8003666:	0003      	movs	r3, r0
 8003668:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800366a:	230f      	movs	r3, #15
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d116      	bne.n	80036a2 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	00d2      	lsls	r2, r2, #3
 8003680:	08d2      	lsrs	r2, r2, #3
 8003682:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6999      	ldr	r1, [r3, #24]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	431a      	orrs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	22ff      	movs	r2, #255	@ 0xff
 80036a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80036aa:	e003      	b.n	80036b4 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80036ac:	230f      	movs	r3, #15
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80036b4:	230f      	movs	r3, #15
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d103      	bne.n	80036c6 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2229      	movs	r2, #41	@ 0x29
 80036c2:	2101      	movs	r1, #1
 80036c4:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80036c6:	230f      	movs	r3, #15
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	781b      	ldrb	r3, [r3, #0]
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b004      	add	sp, #16
 80036d2:	bdb0      	pop	{r4, r5, r7, pc}
 80036d4:	fb8fffbf 	.word	0xfb8fffbf

080036d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036d8:	b5b0      	push	{r4, r5, r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2228      	movs	r2, #40	@ 0x28
 80036e8:	5c9b      	ldrb	r3, [r3, r2]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_RTC_SetTime+0x1a>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e092      	b.n	8003818 <HAL_RTC_SetTime+0x140>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2228      	movs	r2, #40	@ 0x28
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2229      	movs	r2, #41	@ 0x29
 80036fe:	2102      	movs	r1, #2
 8003700:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	22ca      	movs	r2, #202	@ 0xca
 8003708:	625a      	str	r2, [r3, #36]	@ 0x24
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2253      	movs	r2, #83	@ 0x53
 8003710:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003712:	2513      	movs	r5, #19
 8003714:	197c      	adds	r4, r7, r5
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	0018      	movs	r0, r3
 800371a:	f000 f93d 	bl	8003998 <RTC_EnterInitMode>
 800371e:	0003      	movs	r3, r0
 8003720:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003722:	197b      	adds	r3, r7, r5
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d162      	bne.n	80037f0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d125      	bne.n	800377c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2240      	movs	r2, #64	@ 0x40
 8003738:	4013      	ands	r3, r2
 800373a:	d102      	bne.n	8003742 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2200      	movs	r2, #0
 8003740:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	0018      	movs	r0, r3
 8003748:	f000 f9ac 	bl	8003aa4 <RTC_ByteToBcd2>
 800374c:	0003      	movs	r3, r0
 800374e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	0018      	movs	r0, r3
 8003756:	f000 f9a5 	bl	8003aa4 <RTC_ByteToBcd2>
 800375a:	0003      	movs	r3, r0
 800375c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800375e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	789b      	ldrb	r3, [r3, #2]
 8003764:	0018      	movs	r0, r3
 8003766:	f000 f99d 	bl	8003aa4 <RTC_ByteToBcd2>
 800376a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800376c:	0022      	movs	r2, r4
 800376e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	78db      	ldrb	r3, [r3, #3]
 8003774:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	e017      	b.n	80037ac <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2240      	movs	r2, #64	@ 0x40
 8003784:	4013      	ands	r3, r2
 8003786:	d102      	bne.n	800378e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2200      	movs	r2, #0
 800378c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	785b      	ldrb	r3, [r3, #1]
 8003798:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800379a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037a0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	78db      	ldrb	r3, [r3, #3]
 80037a6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	491b      	ldr	r1, [pc, #108]	@ (8003820 <HAL_RTC_SetTime+0x148>)
 80037b4:	400a      	ands	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4918      	ldr	r1, [pc, #96]	@ (8003824 <HAL_RTC_SetTime+0x14c>)
 80037c4:	400a      	ands	r2, r1
 80037c6:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6999      	ldr	r1, [r3, #24]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80037e0:	2313      	movs	r3, #19
 80037e2:	18fc      	adds	r4, r7, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f000 f918 	bl	8003a1c <RTC_ExitInitMode>
 80037ec:	0003      	movs	r3, r0
 80037ee:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	22ff      	movs	r2, #255	@ 0xff
 80037f6:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 80037f8:	2313      	movs	r3, #19
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2229      	movs	r2, #41	@ 0x29
 8003806:	2101      	movs	r1, #1
 8003808:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2228      	movs	r2, #40	@ 0x28
 800380e:	2100      	movs	r1, #0
 8003810:	5499      	strb	r1, [r3, r2]

  return status;
 8003812:	2313      	movs	r3, #19
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	781b      	ldrb	r3, [r3, #0]
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	b006      	add	sp, #24
 800381e:	bdb0      	pop	{r4, r5, r7, pc}
 8003820:	007f7f7f 	.word	0x007f7f7f
 8003824:	fffbffff 	.word	0xfffbffff

08003828 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003828:	b5b0      	push	{r4, r5, r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2228      	movs	r2, #40	@ 0x28
 8003838:	5c9b      	ldrb	r3, [r3, r2]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_RTC_SetDate+0x1a>
 800383e:	2302      	movs	r3, #2
 8003840:	e07e      	b.n	8003940 <HAL_RTC_SetDate+0x118>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2228      	movs	r2, #40	@ 0x28
 8003846:	2101      	movs	r1, #1
 8003848:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2229      	movs	r2, #41	@ 0x29
 800384e:	2102      	movs	r1, #2
 8003850:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10e      	bne.n	8003876 <HAL_RTC_SetDate+0x4e>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	785b      	ldrb	r3, [r3, #1]
 800385c:	001a      	movs	r2, r3
 800385e:	2310      	movs	r3, #16
 8003860:	4013      	ands	r3, r2
 8003862:	d008      	beq.n	8003876 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	2210      	movs	r2, #16
 800386a:	4393      	bics	r3, r2
 800386c:	b2db      	uxtb	r3, r3
 800386e:	330a      	adds	r3, #10
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d11c      	bne.n	80038b6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	78db      	ldrb	r3, [r3, #3]
 8003880:	0018      	movs	r0, r3
 8003882:	f000 f90f 	bl	8003aa4 <RTC_ByteToBcd2>
 8003886:	0003      	movs	r3, r0
 8003888:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	0018      	movs	r0, r3
 8003890:	f000 f908 	bl	8003aa4 <RTC_ByteToBcd2>
 8003894:	0003      	movs	r3, r0
 8003896:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003898:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	789b      	ldrb	r3, [r3, #2]
 800389e:	0018      	movs	r0, r3
 80038a0:	f000 f900 	bl	8003aa4 <RTC_ByteToBcd2>
 80038a4:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80038a6:	0022      	movs	r2, r4
 80038a8:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	e00e      	b.n	80038d4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	78db      	ldrb	r3, [r3, #3]
 80038ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	785b      	ldrb	r3, [r3, #1]
 80038c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80038c2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80038c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	22ca      	movs	r2, #202	@ 0xca
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2253      	movs	r2, #83	@ 0x53
 80038e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80038e4:	2513      	movs	r5, #19
 80038e6:	197c      	adds	r4, r7, r5
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 f854 	bl	8003998 <RTC_EnterInitMode>
 80038f0:	0003      	movs	r3, r0
 80038f2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80038f4:	0028      	movs	r0, r5
 80038f6:	183b      	adds	r3, r7, r0
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10c      	bne.n	8003918 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4910      	ldr	r1, [pc, #64]	@ (8003948 <HAL_RTC_SetDate+0x120>)
 8003906:	400a      	ands	r2, r1
 8003908:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800390a:	183c      	adds	r4, r7, r0
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	0018      	movs	r0, r3
 8003910:	f000 f884 	bl	8003a1c <RTC_ExitInitMode>
 8003914:	0003      	movs	r3, r0
 8003916:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	22ff      	movs	r2, #255	@ 0xff
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003920:	2313      	movs	r3, #19
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2229      	movs	r2, #41	@ 0x29
 800392e:	2101      	movs	r1, #1
 8003930:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2228      	movs	r2, #40	@ 0x28
 8003936:	2100      	movs	r1, #0
 8003938:	5499      	strb	r1, [r3, r2]

  return status;
 800393a:	2313      	movs	r3, #19
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	781b      	ldrb	r3, [r3, #0]
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b006      	add	sp, #24
 8003946:	bdb0      	pop	{r4, r5, r7, pc}
 8003948:	00ffff3f 	.word	0x00ffff3f

0800394c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0e      	ldr	r2, [pc, #56]	@ (8003994 <HAL_RTC_WaitForSynchro+0x48>)
 800395a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800395c:	f7fd fbe4 	bl	8001128 <HAL_GetTick>
 8003960:	0003      	movs	r3, r0
 8003962:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003964:	e00a      	b.n	800397c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003966:	f7fd fbdf 	bl	8001128 <HAL_GetTick>
 800396a:	0002      	movs	r2, r0
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1ad2      	subs	r2, r2, r3
 8003970:	23fa      	movs	r3, #250	@ 0xfa
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d901      	bls.n	800397c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e006      	b.n	800398a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	4013      	ands	r3, r2
 8003986:	d0ee      	beq.n	8003966 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b004      	add	sp, #16
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	0001005f 	.word	0x0001005f

08003998 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80039a0:	230f      	movs	r3, #15
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	2240      	movs	r2, #64	@ 0x40
 80039b0:	4013      	ands	r3, r2
 80039b2:	d12c      	bne.n	8003a0e <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2180      	movs	r1, #128	@ 0x80
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80039c4:	f7fd fbb0 	bl	8001128 <HAL_GetTick>
 80039c8:	0003      	movs	r3, r0
 80039ca:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80039cc:	e014      	b.n	80039f8 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80039ce:	f7fd fbab 	bl	8001128 <HAL_GetTick>
 80039d2:	0002      	movs	r2, r0
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	1ad2      	subs	r2, r2, r3
 80039d8:	200f      	movs	r0, #15
 80039da:	183b      	adds	r3, r7, r0
 80039dc:	1839      	adds	r1, r7, r0
 80039de:	7809      	ldrb	r1, [r1, #0]
 80039e0:	7019      	strb	r1, [r3, #0]
 80039e2:	23fa      	movs	r3, #250	@ 0xfa
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d906      	bls.n	80039f8 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80039ea:	183b      	adds	r3, r7, r0
 80039ec:	2203      	movs	r2, #3
 80039ee:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2229      	movs	r2, #41	@ 0x29
 80039f4:	2103      	movs	r1, #3
 80039f6:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2240      	movs	r2, #64	@ 0x40
 8003a00:	4013      	ands	r3, r2
 8003a02:	d104      	bne.n	8003a0e <RTC_EnterInitMode+0x76>
 8003a04:	230f      	movs	r3, #15
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	d1df      	bne.n	80039ce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003a0e:	230f      	movs	r3, #15
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	781b      	ldrb	r3, [r3, #0]
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b004      	add	sp, #16
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a24:	240f      	movs	r4, #15
 8003a26:	193b      	adds	r3, r7, r4
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa0 <RTC_ExitInitMode+0x84>)
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa0 <RTC_ExitInitMode+0x84>)
 8003a32:	2180      	movs	r1, #128	@ 0x80
 8003a34:	438a      	bics	r2, r1
 8003a36:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003a38:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <RTC_ExitInitMode+0x84>)
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d10d      	bne.n	8003a5e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7ff ff81 	bl	800394c <HAL_RTC_WaitForSynchro>
 8003a4a:	1e03      	subs	r3, r0, #0
 8003a4c:	d021      	beq.n	8003a92 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2229      	movs	r2, #41	@ 0x29
 8003a52:	2103      	movs	r1, #3
 8003a54:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	2203      	movs	r2, #3
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e019      	b.n	8003a92 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a5e:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <RTC_ExitInitMode+0x84>)
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <RTC_ExitInitMode+0x84>)
 8003a64:	2120      	movs	r1, #32
 8003a66:	438a      	bics	r2, r1
 8003a68:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f7ff ff6d 	bl	800394c <HAL_RTC_WaitForSynchro>
 8003a72:	1e03      	subs	r3, r0, #0
 8003a74:	d007      	beq.n	8003a86 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2229      	movs	r2, #41	@ 0x29
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003a7e:	230f      	movs	r3, #15
 8003a80:	18fb      	adds	r3, r7, r3
 8003a82:	2203      	movs	r2, #3
 8003a84:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a86:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <RTC_ExitInitMode+0x84>)
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <RTC_ExitInitMode+0x84>)
 8003a8c:	2120      	movs	r1, #32
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003a92:	230f      	movs	r3, #15
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	781b      	ldrb	r3, [r3, #0]
}
 8003a98:	0018      	movs	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b005      	add	sp, #20
 8003a9e:	bd90      	pop	{r4, r7, pc}
 8003aa0:	40002800 	.word	0x40002800

08003aa4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	0002      	movs	r2, r0
 8003aac:	1dfb      	adds	r3, r7, #7
 8003aae:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003ab4:	230b      	movs	r3, #11
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	1dfa      	adds	r2, r7, #7
 8003aba:	7812      	ldrb	r2, [r2, #0]
 8003abc:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003abe:	e008      	b.n	8003ad2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003ac6:	220b      	movs	r2, #11
 8003ac8:	18bb      	adds	r3, r7, r2
 8003aca:	18ba      	adds	r2, r7, r2
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	3a0a      	subs	r2, #10
 8003ad0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003ad2:	210b      	movs	r1, #11
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b09      	cmp	r3, #9
 8003ada:	d8f1      	bhi.n	8003ac0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	187b      	adds	r3, r7, r1
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	b2db      	uxtb	r3, r3
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b004      	add	sp, #16
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e04a      	b.n	8003b9c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	223d      	movs	r2, #61	@ 0x3d
 8003b0a:	5c9b      	ldrb	r3, [r3, r2]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	223c      	movs	r2, #60	@ 0x3c
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7fd f969 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	223d      	movs	r2, #61	@ 0x3d
 8003b26:	2102      	movs	r1, #2
 8003b28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3304      	adds	r3, #4
 8003b32:	0019      	movs	r1, r3
 8003b34:	0010      	movs	r0, r2
 8003b36:	f000 fd6d 	bl	8004614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2248      	movs	r2, #72	@ 0x48
 8003b3e:	2101      	movs	r1, #1
 8003b40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	223e      	movs	r2, #62	@ 0x3e
 8003b46:	2101      	movs	r1, #1
 8003b48:	5499      	strb	r1, [r3, r2]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	223f      	movs	r2, #63	@ 0x3f
 8003b4e:	2101      	movs	r1, #1
 8003b50:	5499      	strb	r1, [r3, r2]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2240      	movs	r2, #64	@ 0x40
 8003b56:	2101      	movs	r1, #1
 8003b58:	5499      	strb	r1, [r3, r2]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2241      	movs	r2, #65	@ 0x41
 8003b5e:	2101      	movs	r1, #1
 8003b60:	5499      	strb	r1, [r3, r2]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2242      	movs	r2, #66	@ 0x42
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2243      	movs	r2, #67	@ 0x43
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2244      	movs	r2, #68	@ 0x44
 8003b76:	2101      	movs	r1, #1
 8003b78:	5499      	strb	r1, [r3, r2]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2245      	movs	r2, #69	@ 0x45
 8003b7e:	2101      	movs	r1, #1
 8003b80:	5499      	strb	r1, [r3, r2]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2246      	movs	r2, #70	@ 0x46
 8003b86:	2101      	movs	r1, #1
 8003b88:	5499      	strb	r1, [r3, r2]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2247      	movs	r2, #71	@ 0x47
 8003b8e:	2101      	movs	r1, #1
 8003b90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	223d      	movs	r2, #61	@ 0x3d
 8003b96:	2101      	movs	r1, #1
 8003b98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	223d      	movs	r2, #61	@ 0x3d
 8003bb0:	5c9b      	ldrb	r3, [r3, r2]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d001      	beq.n	8003bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e037      	b.n	8003c2c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	223d      	movs	r2, #61	@ 0x3d
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2101      	movs	r1, #1
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a16      	ldr	r2, [pc, #88]	@ (8003c34 <HAL_TIM_Base_Start_IT+0x90>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_TIM_Base_Start_IT+0x44>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a15      	ldr	r2, [pc, #84]	@ (8003c38 <HAL_TIM_Base_Start_IT+0x94>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d116      	bne.n	8003c16 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	4a13      	ldr	r2, [pc, #76]	@ (8003c3c <HAL_TIM_Base_Start_IT+0x98>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d016      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x84>
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	2380      	movs	r3, #128	@ 0x80
 8003bfe:	025b      	lsls	r3, r3, #9
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d011      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2101      	movs	r1, #1
 8003c10:	430a      	orrs	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c14:	e008      	b.n	8003c28 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2101      	movs	r1, #1
 8003c22:	430a      	orrs	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e000      	b.n	8003c2a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c28:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b004      	add	sp, #16
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	00010007 	.word	0x00010007

08003c40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2101      	movs	r1, #1
 8003c54:	438a      	bics	r2, r1
 8003c56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c94 <HAL_TIM_Base_Stop_IT+0x54>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	d10d      	bne.n	8003c80 <HAL_TIM_Base_Stop_IT+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8003c98 <HAL_TIM_Base_Stop_IT+0x58>)
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d107      	bne.n	8003c80 <HAL_TIM_Base_Stop_IT+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	438a      	bics	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	223d      	movs	r2, #61	@ 0x3d
 8003c84:	2101      	movs	r1, #1
 8003c86:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b002      	add	sp, #8
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	00001111 	.word	0x00001111
 8003c98:	00000444 	.word	0x00000444

08003c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e04a      	b.n	8003d44 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	223d      	movs	r2, #61	@ 0x3d
 8003cb2:	5c9b      	ldrb	r3, [r3, r2]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d107      	bne.n	8003cca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	223c      	movs	r2, #60	@ 0x3c
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f000 f841 	bl	8003d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	223d      	movs	r2, #61	@ 0x3d
 8003cce:	2102      	movs	r1, #2
 8003cd0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	0019      	movs	r1, r3
 8003cdc:	0010      	movs	r0, r2
 8003cde:	f000 fc99 	bl	8004614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2248      	movs	r2, #72	@ 0x48
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	223e      	movs	r2, #62	@ 0x3e
 8003cee:	2101      	movs	r1, #1
 8003cf0:	5499      	strb	r1, [r3, r2]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	223f      	movs	r2, #63	@ 0x3f
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2240      	movs	r2, #64	@ 0x40
 8003cfe:	2101      	movs	r1, #1
 8003d00:	5499      	strb	r1, [r3, r2]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2241      	movs	r2, #65	@ 0x41
 8003d06:	2101      	movs	r1, #1
 8003d08:	5499      	strb	r1, [r3, r2]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2242      	movs	r2, #66	@ 0x42
 8003d0e:	2101      	movs	r1, #1
 8003d10:	5499      	strb	r1, [r3, r2]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2243      	movs	r2, #67	@ 0x43
 8003d16:	2101      	movs	r1, #1
 8003d18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2244      	movs	r2, #68	@ 0x44
 8003d1e:	2101      	movs	r1, #1
 8003d20:	5499      	strb	r1, [r3, r2]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2245      	movs	r2, #69	@ 0x45
 8003d26:	2101      	movs	r1, #1
 8003d28:	5499      	strb	r1, [r3, r2]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2246      	movs	r2, #70	@ 0x46
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2247      	movs	r2, #71	@ 0x47
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	223d      	movs	r2, #61	@ 0x3d
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d54:	46c0      	nop			@ (mov r8, r8)
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b002      	add	sp, #8
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <HAL_TIM_PWM_Start+0x22>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	223e      	movs	r2, #62	@ 0x3e
 8003d70:	5c9b      	ldrb	r3, [r3, r2]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	1e5a      	subs	r2, r3, #1
 8003d78:	4193      	sbcs	r3, r2
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	e037      	b.n	8003dee <HAL_TIM_PWM_Start+0x92>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d108      	bne.n	8003d96 <HAL_TIM_PWM_Start+0x3a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	223f      	movs	r2, #63	@ 0x3f
 8003d88:	5c9b      	ldrb	r3, [r3, r2]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	1e5a      	subs	r2, r3, #1
 8003d90:	4193      	sbcs	r3, r2
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	e02b      	b.n	8003dee <HAL_TIM_PWM_Start+0x92>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d108      	bne.n	8003dae <HAL_TIM_PWM_Start+0x52>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2240      	movs	r2, #64	@ 0x40
 8003da0:	5c9b      	ldrb	r3, [r3, r2]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	1e5a      	subs	r2, r3, #1
 8003da8:	4193      	sbcs	r3, r2
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	e01f      	b.n	8003dee <HAL_TIM_PWM_Start+0x92>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	d108      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x6a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2241      	movs	r2, #65	@ 0x41
 8003db8:	5c9b      	ldrb	r3, [r3, r2]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	1e5a      	subs	r2, r3, #1
 8003dc0:	4193      	sbcs	r3, r2
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e013      	b.n	8003dee <HAL_TIM_PWM_Start+0x92>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d108      	bne.n	8003dde <HAL_TIM_PWM_Start+0x82>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2242      	movs	r2, #66	@ 0x42
 8003dd0:	5c9b      	ldrb	r3, [r3, r2]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	1e5a      	subs	r2, r3, #1
 8003dd8:	4193      	sbcs	r3, r2
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e007      	b.n	8003dee <HAL_TIM_PWM_Start+0x92>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2243      	movs	r2, #67	@ 0x43
 8003de2:	5c9b      	ldrb	r3, [r3, r2]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	1e5a      	subs	r2, r3, #1
 8003dea:	4193      	sbcs	r3, r2
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e07b      	b.n	8003eee <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d104      	bne.n	8003e06 <HAL_TIM_PWM_Start+0xaa>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	223e      	movs	r2, #62	@ 0x3e
 8003e00:	2102      	movs	r1, #2
 8003e02:	5499      	strb	r1, [r3, r2]
 8003e04:	e023      	b.n	8003e4e <HAL_TIM_PWM_Start+0xf2>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d104      	bne.n	8003e16 <HAL_TIM_PWM_Start+0xba>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	223f      	movs	r2, #63	@ 0x3f
 8003e10:	2102      	movs	r1, #2
 8003e12:	5499      	strb	r1, [r3, r2]
 8003e14:	e01b      	b.n	8003e4e <HAL_TIM_PWM_Start+0xf2>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d104      	bne.n	8003e26 <HAL_TIM_PWM_Start+0xca>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2240      	movs	r2, #64	@ 0x40
 8003e20:	2102      	movs	r1, #2
 8003e22:	5499      	strb	r1, [r3, r2]
 8003e24:	e013      	b.n	8003e4e <HAL_TIM_PWM_Start+0xf2>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b0c      	cmp	r3, #12
 8003e2a:	d104      	bne.n	8003e36 <HAL_TIM_PWM_Start+0xda>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2241      	movs	r2, #65	@ 0x41
 8003e30:	2102      	movs	r1, #2
 8003e32:	5499      	strb	r1, [r3, r2]
 8003e34:	e00b      	b.n	8003e4e <HAL_TIM_PWM_Start+0xf2>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_PWM_Start+0xea>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2242      	movs	r2, #66	@ 0x42
 8003e40:	2102      	movs	r1, #2
 8003e42:	5499      	strb	r1, [r3, r2]
 8003e44:	e003      	b.n	8003e4e <HAL_TIM_PWM_Start+0xf2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2243      	movs	r2, #67	@ 0x43
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6839      	ldr	r1, [r7, #0]
 8003e54:	2201      	movs	r2, #1
 8003e56:	0018      	movs	r0, r3
 8003e58:	f000 ff8e 	bl	8004d78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a25      	ldr	r2, [pc, #148]	@ (8003ef8 <HAL_TIM_PWM_Start+0x19c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_TIM_PWM_Start+0x11e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a24      	ldr	r2, [pc, #144]	@ (8003efc <HAL_TIM_PWM_Start+0x1a0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_TIM_PWM_Start+0x11e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a22      	ldr	r2, [pc, #136]	@ (8003f00 <HAL_TIM_PWM_Start+0x1a4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d101      	bne.n	8003e7e <HAL_TIM_PWM_Start+0x122>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <HAL_TIM_PWM_Start+0x124>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2180      	movs	r1, #128	@ 0x80
 8003e90:	0209      	lsls	r1, r1, #8
 8003e92:	430a      	orrs	r2, r1
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a17      	ldr	r2, [pc, #92]	@ (8003ef8 <HAL_TIM_PWM_Start+0x19c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_TIM_PWM_Start+0x14e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a17      	ldr	r2, [pc, #92]	@ (8003f04 <HAL_TIM_PWM_Start+0x1a8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d116      	bne.n	8003ed8 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a15      	ldr	r2, [pc, #84]	@ (8003f08 <HAL_TIM_PWM_Start+0x1ac>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d016      	beq.n	8003eea <HAL_TIM_PWM_Start+0x18e>
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	2380      	movs	r3, #128	@ 0x80
 8003ec0:	025b      	lsls	r3, r3, #9
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d011      	beq.n	8003eea <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed6:	e008      	b.n	8003eea <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40014400 	.word	0x40014400
 8003f00:	40014800 	.word	0x40014800
 8003f04:	40000400 	.word	0x40000400
 8003f08:	00010007 	.word	0x00010007

08003f0c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6839      	ldr	r1, [r7, #0]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f000 ff2a 	bl	8004d78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a35      	ldr	r2, [pc, #212]	@ (8004000 <HAL_TIM_PWM_Stop+0xf4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_TIM_PWM_Stop+0x36>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a34      	ldr	r2, [pc, #208]	@ (8004004 <HAL_TIM_PWM_Stop+0xf8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_TIM_PWM_Stop+0x36>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a32      	ldr	r2, [pc, #200]	@ (8004008 <HAL_TIM_PWM_Stop+0xfc>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_PWM_Stop+0x3a>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_TIM_PWM_Stop+0x3c>
 8003f46:	2300      	movs	r3, #0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d013      	beq.n	8003f74 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	4a2e      	ldr	r2, [pc, #184]	@ (800400c <HAL_TIM_PWM_Stop+0x100>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	d10d      	bne.n	8003f74 <HAL_TIM_PWM_Stop+0x68>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004010 <HAL_TIM_PWM_Stop+0x104>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	d107      	bne.n	8003f74 <HAL_TIM_PWM_Stop+0x68>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4929      	ldr	r1, [pc, #164]	@ (8004014 <HAL_TIM_PWM_Stop+0x108>)
 8003f70:	400a      	ands	r2, r1
 8003f72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4a24      	ldr	r2, [pc, #144]	@ (800400c <HAL_TIM_PWM_Stop+0x100>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d10d      	bne.n	8003f9c <HAL_TIM_PWM_Stop+0x90>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4a22      	ldr	r2, [pc, #136]	@ (8004010 <HAL_TIM_PWM_Stop+0x104>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d107      	bne.n	8003f9c <HAL_TIM_PWM_Stop+0x90>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2101      	movs	r1, #1
 8003f98:	438a      	bics	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d104      	bne.n	8003fac <HAL_TIM_PWM_Stop+0xa0>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	223e      	movs	r2, #62	@ 0x3e
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	5499      	strb	r1, [r3, r2]
 8003faa:	e023      	b.n	8003ff4 <HAL_TIM_PWM_Stop+0xe8>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d104      	bne.n	8003fbc <HAL_TIM_PWM_Stop+0xb0>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	223f      	movs	r2, #63	@ 0x3f
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	5499      	strb	r1, [r3, r2]
 8003fba:	e01b      	b.n	8003ff4 <HAL_TIM_PWM_Stop+0xe8>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d104      	bne.n	8003fcc <HAL_TIM_PWM_Stop+0xc0>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2240      	movs	r2, #64	@ 0x40
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	5499      	strb	r1, [r3, r2]
 8003fca:	e013      	b.n	8003ff4 <HAL_TIM_PWM_Stop+0xe8>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b0c      	cmp	r3, #12
 8003fd0:	d104      	bne.n	8003fdc <HAL_TIM_PWM_Stop+0xd0>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2241      	movs	r2, #65	@ 0x41
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	5499      	strb	r1, [r3, r2]
 8003fda:	e00b      	b.n	8003ff4 <HAL_TIM_PWM_Stop+0xe8>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d104      	bne.n	8003fec <HAL_TIM_PWM_Stop+0xe0>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2242      	movs	r2, #66	@ 0x42
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	5499      	strb	r1, [r3, r2]
 8003fea:	e003      	b.n	8003ff4 <HAL_TIM_PWM_Stop+0xe8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2243      	movs	r2, #67	@ 0x43
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b002      	add	sp, #8
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	46c0      	nop			@ (mov r8, r8)
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40014400 	.word	0x40014400
 8004008:	40014800 	.word	0x40014800
 800400c:	00001111 	.word	0x00001111
 8004010:	00000444 	.word	0x00000444
 8004014:	ffff7fff 	.word	0xffff7fff

08004018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2202      	movs	r2, #2
 8004034:	4013      	ands	r3, r2
 8004036:	d021      	beq.n	800407c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2202      	movs	r2, #2
 800403c:	4013      	ands	r3, r2
 800403e:	d01d      	beq.n	800407c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2203      	movs	r2, #3
 8004046:	4252      	negs	r2, r2
 8004048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2203      	movs	r2, #3
 8004058:	4013      	ands	r3, r2
 800405a:	d004      	beq.n	8004066 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0018      	movs	r0, r3
 8004060:	f000 fac0 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004064:	e007      	b.n	8004076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0018      	movs	r0, r3
 800406a:	f000 fab3 	bl	80045d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	0018      	movs	r0, r3
 8004072:	f000 fabf 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2204      	movs	r2, #4
 8004080:	4013      	ands	r3, r2
 8004082:	d022      	beq.n	80040ca <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2204      	movs	r2, #4
 8004088:	4013      	ands	r3, r2
 800408a:	d01e      	beq.n	80040ca <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2205      	movs	r2, #5
 8004092:	4252      	negs	r2, r2
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	23c0      	movs	r3, #192	@ 0xc0
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4013      	ands	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f000 fa99 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80040b2:	e007      	b.n	80040c4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	0018      	movs	r0, r3
 80040b8:	f000 fa8c 	bl	80045d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	0018      	movs	r0, r3
 80040c0:	f000 fa98 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2208      	movs	r2, #8
 80040ce:	4013      	ands	r3, r2
 80040d0:	d021      	beq.n	8004116 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2208      	movs	r2, #8
 80040d6:	4013      	ands	r3, r2
 80040d8:	d01d      	beq.n	8004116 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2209      	movs	r2, #9
 80040e0:	4252      	negs	r2, r2
 80040e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2204      	movs	r2, #4
 80040e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	2203      	movs	r2, #3
 80040f2:	4013      	ands	r3, r2
 80040f4:	d004      	beq.n	8004100 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	0018      	movs	r0, r3
 80040fa:	f000 fa73 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80040fe:	e007      	b.n	8004110 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 fa66 	bl	80045d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	0018      	movs	r0, r3
 800410c:	f000 fa72 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2210      	movs	r2, #16
 800411a:	4013      	ands	r3, r2
 800411c:	d022      	beq.n	8004164 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2210      	movs	r2, #16
 8004122:	4013      	ands	r3, r2
 8004124:	d01e      	beq.n	8004164 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2211      	movs	r2, #17
 800412c:	4252      	negs	r2, r2
 800412e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2208      	movs	r2, #8
 8004134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	23c0      	movs	r3, #192	@ 0xc0
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4013      	ands	r3, r2
 8004142:	d004      	beq.n	800414e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	0018      	movs	r0, r3
 8004148:	f000 fa4c 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 800414c:	e007      	b.n	800415e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0018      	movs	r0, r3
 8004152:	f000 fa3f 	bl	80045d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	0018      	movs	r0, r3
 800415a:	f000 fa4b 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2201      	movs	r2, #1
 8004168:	4013      	ands	r3, r2
 800416a:	d00c      	beq.n	8004186 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2201      	movs	r2, #1
 8004170:	4013      	ands	r3, r2
 8004172:	d008      	beq.n	8004186 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2202      	movs	r2, #2
 800417a:	4252      	negs	r2, r2
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	0018      	movs	r0, r3
 8004182:	f7fc fd93 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2280      	movs	r2, #128	@ 0x80
 800418a:	4013      	ands	r3, r2
 800418c:	d104      	bne.n	8004198 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	019b      	lsls	r3, r3, #6
 8004194:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004196:	d00b      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2280      	movs	r2, #128	@ 0x80
 800419c:	4013      	ands	r3, r2
 800419e:	d007      	beq.n	80041b0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004220 <HAL_TIM_IRQHandler+0x208>)
 80041a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f000 ff0e 	bl	8004fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4013      	ands	r3, r2
 80041b8:	d00b      	beq.n	80041d2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2280      	movs	r2, #128	@ 0x80
 80041be:	4013      	ands	r3, r2
 80041c0:	d007      	beq.n	80041d2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a17      	ldr	r2, [pc, #92]	@ (8004224 <HAL_TIM_IRQHandler+0x20c>)
 80041c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f000 ff05 	bl	8004fdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2240      	movs	r2, #64	@ 0x40
 80041d6:	4013      	ands	r3, r2
 80041d8:	d00c      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2240      	movs	r2, #64	@ 0x40
 80041de:	4013      	ands	r3, r2
 80041e0:	d008      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2241      	movs	r2, #65	@ 0x41
 80041e8:	4252      	negs	r2, r2
 80041ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	0018      	movs	r0, r3
 80041f0:	f000 fa08 	bl	8004604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2220      	movs	r2, #32
 80041f8:	4013      	ands	r3, r2
 80041fa:	d00c      	beq.n	8004216 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	4013      	ands	r3, r2
 8004202:	d008      	beq.n	8004216 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2221      	movs	r2, #33	@ 0x21
 800420a:	4252      	negs	r2, r2
 800420c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0018      	movs	r0, r3
 8004212:	f000 fed3 	bl	8004fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	46bd      	mov	sp, r7
 800421a:	b004      	add	sp, #16
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	ffffdf7f 	.word	0xffffdf7f
 8004224:	fffffeff 	.word	0xfffffeff

08004228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004234:	2317      	movs	r3, #23
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	2200      	movs	r2, #0
 800423a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	223c      	movs	r2, #60	@ 0x3c
 8004240:	5c9b      	ldrb	r3, [r3, r2]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004246:	2302      	movs	r3, #2
 8004248:	e0e5      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	223c      	movs	r2, #60	@ 0x3c
 800424e:	2101      	movs	r1, #1
 8004250:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b14      	cmp	r3, #20
 8004256:	d900      	bls.n	800425a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004258:	e0d1      	b.n	80043fe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	009a      	lsls	r2, r3, #2
 800425e:	4b70      	ldr	r3, [pc, #448]	@ (8004420 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004260:	18d3      	adds	r3, r2, r3
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	0011      	movs	r1, r2
 800426e:	0018      	movs	r0, r3
 8004270:	f000 fa4a 	bl	8004708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2108      	movs	r1, #8
 8004280:	430a      	orrs	r2, r1
 8004282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2104      	movs	r1, #4
 8004290:	438a      	bics	r2, r1
 8004292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6999      	ldr	r1, [r3, #24]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	619a      	str	r2, [r3, #24]
      break;
 80042a6:	e0af      	b.n	8004408 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	0011      	movs	r1, r2
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 faa9 	bl	8004808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2180      	movs	r1, #128	@ 0x80
 80042c2:	0109      	lsls	r1, r1, #4
 80042c4:	430a      	orrs	r2, r1
 80042c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4954      	ldr	r1, [pc, #336]	@ (8004424 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80042d4:	400a      	ands	r2, r1
 80042d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6999      	ldr	r1, [r3, #24]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	021a      	lsls	r2, r3, #8
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	619a      	str	r2, [r3, #24]
      break;
 80042ec:	e08c      	b.n	8004408 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	0011      	movs	r1, r2
 80042f6:	0018      	movs	r0, r3
 80042f8:	f000 fb04 	bl	8004904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2108      	movs	r1, #8
 8004308:	430a      	orrs	r2, r1
 800430a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2104      	movs	r1, #4
 8004318:	438a      	bics	r2, r1
 800431a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69d9      	ldr	r1, [r3, #28]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	61da      	str	r2, [r3, #28]
      break;
 800432e:	e06b      	b.n	8004408 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	0011      	movs	r1, r2
 8004338:	0018      	movs	r0, r3
 800433a:	f000 fb65 	bl	8004a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2180      	movs	r1, #128	@ 0x80
 800434a:	0109      	lsls	r1, r1, #4
 800434c:	430a      	orrs	r2, r1
 800434e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69da      	ldr	r2, [r3, #28]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4932      	ldr	r1, [pc, #200]	@ (8004424 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800435c:	400a      	ands	r2, r1
 800435e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69d9      	ldr	r1, [r3, #28]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	021a      	lsls	r2, r3, #8
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	61da      	str	r2, [r3, #28]
      break;
 8004374:	e048      	b.n	8004408 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	0011      	movs	r1, r2
 800437e:	0018      	movs	r0, r3
 8004380:	f000 fba6 	bl	8004ad0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2108      	movs	r1, #8
 8004390:	430a      	orrs	r2, r1
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2104      	movs	r1, #4
 80043a0:	438a      	bics	r2, r1
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043b6:	e027      	b.n	8004408 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	0011      	movs	r1, r2
 80043c0:	0018      	movs	r0, r3
 80043c2:	f000 fbdf 	bl	8004b84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2180      	movs	r1, #128	@ 0x80
 80043d2:	0109      	lsls	r1, r1, #4
 80043d4:	430a      	orrs	r2, r1
 80043d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4910      	ldr	r1, [pc, #64]	@ (8004424 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80043e4:	400a      	ands	r2, r1
 80043e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	021a      	lsls	r2, r3, #8
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043fc:	e004      	b.n	8004408 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80043fe:	2317      	movs	r3, #23
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
      break;
 8004406:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	223c      	movs	r2, #60	@ 0x3c
 800440c:	2100      	movs	r1, #0
 800440e:	5499      	strb	r1, [r3, r2]

  return status;
 8004410:	2317      	movs	r3, #23
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	781b      	ldrb	r3, [r3, #0]
}
 8004416:	0018      	movs	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	b006      	add	sp, #24
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	0800509c 	.word	0x0800509c
 8004424:	fffffbff 	.word	0xfffffbff

08004428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	230f      	movs	r3, #15
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	223c      	movs	r2, #60	@ 0x3c
 800443e:	5c9b      	ldrb	r3, [r3, r2]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_TIM_ConfigClockSource+0x20>
 8004444:	2302      	movs	r3, #2
 8004446:	e0bc      	b.n	80045c2 <HAL_TIM_ConfigClockSource+0x19a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	223c      	movs	r2, #60	@ 0x3c
 800444c:	2101      	movs	r1, #1
 800444e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	223d      	movs	r2, #61	@ 0x3d
 8004454:	2102      	movs	r1, #2
 8004456:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4a5a      	ldr	r2, [pc, #360]	@ (80045cc <HAL_TIM_ConfigClockSource+0x1a4>)
 8004464:	4013      	ands	r3, r2
 8004466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4a59      	ldr	r2, [pc, #356]	@ (80045d0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800446c:	4013      	ands	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2280      	movs	r2, #128	@ 0x80
 800447e:	0192      	lsls	r2, r2, #6
 8004480:	4293      	cmp	r3, r2
 8004482:	d040      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0xde>
 8004484:	2280      	movs	r2, #128	@ 0x80
 8004486:	0192      	lsls	r2, r2, #6
 8004488:	4293      	cmp	r3, r2
 800448a:	d900      	bls.n	800448e <HAL_TIM_ConfigClockSource+0x66>
 800448c:	e088      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x178>
 800448e:	2280      	movs	r2, #128	@ 0x80
 8004490:	0152      	lsls	r2, r2, #5
 8004492:	4293      	cmp	r3, r2
 8004494:	d100      	bne.n	8004498 <HAL_TIM_ConfigClockSource+0x70>
 8004496:	e088      	b.n	80045aa <HAL_TIM_ConfigClockSource+0x182>
 8004498:	2280      	movs	r2, #128	@ 0x80
 800449a:	0152      	lsls	r2, r2, #5
 800449c:	4293      	cmp	r3, r2
 800449e:	d900      	bls.n	80044a2 <HAL_TIM_ConfigClockSource+0x7a>
 80044a0:	e07e      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x178>
 80044a2:	2b70      	cmp	r3, #112	@ 0x70
 80044a4:	d018      	beq.n	80044d8 <HAL_TIM_ConfigClockSource+0xb0>
 80044a6:	d900      	bls.n	80044aa <HAL_TIM_ConfigClockSource+0x82>
 80044a8:	e07a      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x178>
 80044aa:	2b60      	cmp	r3, #96	@ 0x60
 80044ac:	d04f      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x126>
 80044ae:	d900      	bls.n	80044b2 <HAL_TIM_ConfigClockSource+0x8a>
 80044b0:	e076      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x178>
 80044b2:	2b50      	cmp	r3, #80	@ 0x50
 80044b4:	d03b      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x106>
 80044b6:	d900      	bls.n	80044ba <HAL_TIM_ConfigClockSource+0x92>
 80044b8:	e072      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x178>
 80044ba:	2b40      	cmp	r3, #64	@ 0x40
 80044bc:	d057      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x146>
 80044be:	d900      	bls.n	80044c2 <HAL_TIM_ConfigClockSource+0x9a>
 80044c0:	e06e      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x178>
 80044c2:	2b30      	cmp	r3, #48	@ 0x30
 80044c4:	d063      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x166>
 80044c6:	d86b      	bhi.n	80045a0 <HAL_TIM_ConfigClockSource+0x178>
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d060      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x166>
 80044cc:	d868      	bhi.n	80045a0 <HAL_TIM_ConfigClockSource+0x178>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d05d      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x166>
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d05b      	beq.n	800458e <HAL_TIM_ConfigClockSource+0x166>
 80044d6:	e063      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044e8:	f000 fc26 	bl	8004d38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2277      	movs	r2, #119	@ 0x77
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]
      break;
 8004504:	e052      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004516:	f000 fc0f 	bl	8004d38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2180      	movs	r1, #128	@ 0x80
 8004526:	01c9      	lsls	r1, r1, #7
 8004528:	430a      	orrs	r2, r1
 800452a:	609a      	str	r2, [r3, #8]
      break;
 800452c:	e03e      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800453a:	001a      	movs	r2, r3
 800453c:	f000 fb80 	bl	8004c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2150      	movs	r1, #80	@ 0x50
 8004546:	0018      	movs	r0, r3
 8004548:	f000 fbda 	bl	8004d00 <TIM_ITRx_SetConfig>
      break;
 800454c:	e02e      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800455a:	001a      	movs	r2, r3
 800455c:	f000 fb9e 	bl	8004c9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2160      	movs	r1, #96	@ 0x60
 8004566:	0018      	movs	r0, r3
 8004568:	f000 fbca 	bl	8004d00 <TIM_ITRx_SetConfig>
      break;
 800456c:	e01e      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800457a:	001a      	movs	r2, r3
 800457c:	f000 fb60 	bl	8004c40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2140      	movs	r1, #64	@ 0x40
 8004586:	0018      	movs	r0, r3
 8004588:	f000 fbba 	bl	8004d00 <TIM_ITRx_SetConfig>
      break;
 800458c:	e00e      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	0019      	movs	r1, r3
 8004598:	0010      	movs	r0, r2
 800459a:	f000 fbb1 	bl	8004d00 <TIM_ITRx_SetConfig>
      break;
 800459e:	e005      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80045a0:	230f      	movs	r3, #15
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]
      break;
 80045a8:	e000      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 80045aa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	223d      	movs	r2, #61	@ 0x3d
 80045b0:	2101      	movs	r1, #1
 80045b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	223c      	movs	r2, #60	@ 0x3c
 80045b8:	2100      	movs	r1, #0
 80045ba:	5499      	strb	r1, [r3, r2]

  return status;
 80045bc:	230f      	movs	r3, #15
 80045be:	18fb      	adds	r3, r7, r3
 80045c0:	781b      	ldrb	r3, [r3, #0]
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b004      	add	sp, #16
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	ffceff88 	.word	0xffceff88
 80045d0:	ffff00ff 	.word	0xffff00ff

080045d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045dc:	46c0      	nop			@ (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b002      	add	sp, #8
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ec:	46c0      	nop			@ (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b002      	add	sp, #8
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045fc:	46c0      	nop			@ (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b002      	add	sp, #8
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460c:	46c0      	nop			@ (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}

08004614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a32      	ldr	r2, [pc, #200]	@ (80046f0 <TIM_Base_SetConfig+0xdc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0x20>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a31      	ldr	r2, [pc, #196]	@ (80046f4 <TIM_Base_SetConfig+0xe0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2270      	movs	r2, #112	@ 0x70
 8004638:	4393      	bics	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a29      	ldr	r2, [pc, #164]	@ (80046f0 <TIM_Base_SetConfig+0xdc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00f      	beq.n	800466e <TIM_Base_SetConfig+0x5a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a28      	ldr	r2, [pc, #160]	@ (80046f4 <TIM_Base_SetConfig+0xe0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00b      	beq.n	800466e <TIM_Base_SetConfig+0x5a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a27      	ldr	r2, [pc, #156]	@ (80046f8 <TIM_Base_SetConfig+0xe4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <TIM_Base_SetConfig+0x5a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a26      	ldr	r2, [pc, #152]	@ (80046fc <TIM_Base_SetConfig+0xe8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_Base_SetConfig+0x5a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a25      	ldr	r2, [pc, #148]	@ (8004700 <TIM_Base_SetConfig+0xec>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d108      	bne.n	8004680 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4a24      	ldr	r2, [pc, #144]	@ (8004704 <TIM_Base_SetConfig+0xf0>)
 8004672:	4013      	ands	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2280      	movs	r2, #128	@ 0x80
 8004684:	4393      	bics	r3, r2
 8004686:	001a      	movs	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a11      	ldr	r2, [pc, #68]	@ (80046f0 <TIM_Base_SetConfig+0xdc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <TIM_Base_SetConfig+0xaa>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a12      	ldr	r2, [pc, #72]	@ (80046fc <TIM_Base_SetConfig+0xe8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_Base_SetConfig+0xaa>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a11      	ldr	r2, [pc, #68]	@ (8004700 <TIM_Base_SetConfig+0xec>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d103      	bne.n	80046c6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2201      	movs	r2, #1
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d106      	bne.n	80046e6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2201      	movs	r2, #1
 80046de:	4393      	bics	r3, r2
 80046e0:	001a      	movs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	611a      	str	r2, [r3, #16]
  }
}
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b004      	add	sp, #16
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40002000 	.word	0x40002000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800
 8004704:	fffffcff 	.word	0xfffffcff

08004708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	2201      	movs	r2, #1
 800471e:	4393      	bics	r3, r2
 8004720:	001a      	movs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4a2e      	ldr	r2, [pc, #184]	@ (80047f0 <TIM_OC1_SetConfig+0xe8>)
 8004736:	4013      	ands	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2203      	movs	r2, #3
 800473e:	4393      	bics	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2202      	movs	r2, #2
 8004750:	4393      	bics	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a24      	ldr	r2, [pc, #144]	@ (80047f4 <TIM_OC1_SetConfig+0xec>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_OC1_SetConfig+0x6e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a23      	ldr	r2, [pc, #140]	@ (80047f8 <TIM_OC1_SetConfig+0xf0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_OC1_SetConfig+0x6e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a22      	ldr	r2, [pc, #136]	@ (80047fc <TIM_OC1_SetConfig+0xf4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d10c      	bne.n	8004790 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2208      	movs	r2, #8
 800477a:	4393      	bics	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2204      	movs	r2, #4
 800478c:	4393      	bics	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a18      	ldr	r2, [pc, #96]	@ (80047f4 <TIM_OC1_SetConfig+0xec>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d007      	beq.n	80047a8 <TIM_OC1_SetConfig+0xa0>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a17      	ldr	r2, [pc, #92]	@ (80047f8 <TIM_OC1_SetConfig+0xf0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_OC1_SetConfig+0xa0>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a16      	ldr	r2, [pc, #88]	@ (80047fc <TIM_OC1_SetConfig+0xf4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d111      	bne.n	80047cc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	4a15      	ldr	r2, [pc, #84]	@ (8004800 <TIM_OC1_SetConfig+0xf8>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4a14      	ldr	r2, [pc, #80]	@ (8004804 <TIM_OC1_SetConfig+0xfc>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b006      	add	sp, #24
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	fffeff8f 	.word	0xfffeff8f
 80047f4:	40012c00 	.word	0x40012c00
 80047f8:	40014400 	.word	0x40014400
 80047fc:	40014800 	.word	0x40014800
 8004800:	fffffeff 	.word	0xfffffeff
 8004804:	fffffdff 	.word	0xfffffdff

08004808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	2210      	movs	r2, #16
 800481e:	4393      	bics	r3, r2
 8004820:	001a      	movs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a2c      	ldr	r2, [pc, #176]	@ (80048e8 <TIM_OC2_SetConfig+0xe0>)
 8004836:	4013      	ands	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a2b      	ldr	r2, [pc, #172]	@ (80048ec <TIM_OC2_SetConfig+0xe4>)
 800483e:	4013      	ands	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2220      	movs	r2, #32
 8004852:	4393      	bics	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a22      	ldr	r2, [pc, #136]	@ (80048f0 <TIM_OC2_SetConfig+0xe8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d10d      	bne.n	8004886 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2280      	movs	r2, #128	@ 0x80
 800486e:	4393      	bics	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2240      	movs	r2, #64	@ 0x40
 8004882:	4393      	bics	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a19      	ldr	r2, [pc, #100]	@ (80048f0 <TIM_OC2_SetConfig+0xe8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <TIM_OC2_SetConfig+0x96>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a18      	ldr	r2, [pc, #96]	@ (80048f4 <TIM_OC2_SetConfig+0xec>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d003      	beq.n	800489e <TIM_OC2_SetConfig+0x96>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a17      	ldr	r2, [pc, #92]	@ (80048f8 <TIM_OC2_SetConfig+0xf0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d113      	bne.n	80048c6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4a16      	ldr	r2, [pc, #88]	@ (80048fc <TIM_OC2_SetConfig+0xf4>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4a15      	ldr	r2, [pc, #84]	@ (8004900 <TIM_OC2_SetConfig+0xf8>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	621a      	str	r2, [r3, #32]
}
 80048e0:	46c0      	nop			@ (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b006      	add	sp, #24
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	feff8fff 	.word	0xfeff8fff
 80048ec:	fffffcff 	.word	0xfffffcff
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40014400 	.word	0x40014400
 80048f8:	40014800 	.word	0x40014800
 80048fc:	fffffbff 	.word	0xfffffbff
 8004900:	fffff7ff 	.word	0xfffff7ff

08004904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	4a31      	ldr	r2, [pc, #196]	@ (80049e0 <TIM_OC3_SetConfig+0xdc>)
 800491a:	401a      	ands	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4a2d      	ldr	r2, [pc, #180]	@ (80049e4 <TIM_OC3_SetConfig+0xe0>)
 8004930:	4013      	ands	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2203      	movs	r2, #3
 8004938:	4393      	bics	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	4a27      	ldr	r2, [pc, #156]	@ (80049e8 <TIM_OC3_SetConfig+0xe4>)
 800494a:	4013      	ands	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a23      	ldr	r2, [pc, #140]	@ (80049ec <TIM_OC3_SetConfig+0xe8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10d      	bne.n	800497e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	4a22      	ldr	r2, [pc, #136]	@ (80049f0 <TIM_OC3_SetConfig+0xec>)
 8004966:	4013      	ands	r3, r2
 8004968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <TIM_OC3_SetConfig+0xf0>)
 800497a:	4013      	ands	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1a      	ldr	r2, [pc, #104]	@ (80049ec <TIM_OC3_SetConfig+0xe8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d007      	beq.n	8004996 <TIM_OC3_SetConfig+0x92>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a1b      	ldr	r2, [pc, #108]	@ (80049f8 <TIM_OC3_SetConfig+0xf4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d003      	beq.n	8004996 <TIM_OC3_SetConfig+0x92>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a1a      	ldr	r2, [pc, #104]	@ (80049fc <TIM_OC3_SetConfig+0xf8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d113      	bne.n	80049be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4a19      	ldr	r2, [pc, #100]	@ (8004a00 <TIM_OC3_SetConfig+0xfc>)
 800499a:	4013      	ands	r3, r2
 800499c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4a18      	ldr	r2, [pc, #96]	@ (8004a04 <TIM_OC3_SetConfig+0x100>)
 80049a2:	4013      	ands	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	621a      	str	r2, [r3, #32]
}
 80049d8:	46c0      	nop			@ (mov r8, r8)
 80049da:	46bd      	mov	sp, r7
 80049dc:	b006      	add	sp, #24
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	fffffeff 	.word	0xfffffeff
 80049e4:	fffeff8f 	.word	0xfffeff8f
 80049e8:	fffffdff 	.word	0xfffffdff
 80049ec:	40012c00 	.word	0x40012c00
 80049f0:	fffff7ff 	.word	0xfffff7ff
 80049f4:	fffffbff 	.word	0xfffffbff
 80049f8:	40014400 	.word	0x40014400
 80049fc:	40014800 	.word	0x40014800
 8004a00:	ffffefff 	.word	0xffffefff
 8004a04:	ffffdfff 	.word	0xffffdfff

08004a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	4a24      	ldr	r2, [pc, #144]	@ (8004ab0 <TIM_OC4_SetConfig+0xa8>)
 8004a1e:	401a      	ands	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a20      	ldr	r2, [pc, #128]	@ (8004ab4 <TIM_OC4_SetConfig+0xac>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ab8 <TIM_OC4_SetConfig+0xb0>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004abc <TIM_OC4_SetConfig+0xb4>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	031b      	lsls	r3, r3, #12
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a17      	ldr	r2, [pc, #92]	@ (8004ac0 <TIM_OC4_SetConfig+0xb8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d007      	beq.n	8004a78 <TIM_OC4_SetConfig+0x70>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a16      	ldr	r2, [pc, #88]	@ (8004ac4 <TIM_OC4_SetConfig+0xbc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d003      	beq.n	8004a78 <TIM_OC4_SetConfig+0x70>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a15      	ldr	r2, [pc, #84]	@ (8004ac8 <TIM_OC4_SetConfig+0xc0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d109      	bne.n	8004a8c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	4a14      	ldr	r2, [pc, #80]	@ (8004acc <TIM_OC4_SetConfig+0xc4>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	019b      	lsls	r3, r3, #6
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	621a      	str	r2, [r3, #32]
}
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b006      	add	sp, #24
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			@ (mov r8, r8)
 8004ab0:	ffffefff 	.word	0xffffefff
 8004ab4:	feff8fff 	.word	0xfeff8fff
 8004ab8:	fffffcff 	.word	0xfffffcff
 8004abc:	ffffdfff 	.word	0xffffdfff
 8004ac0:	40012c00 	.word	0x40012c00
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800
 8004acc:	ffffbfff 	.word	0xffffbfff

08004ad0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	4a21      	ldr	r2, [pc, #132]	@ (8004b6c <TIM_OC5_SetConfig+0x9c>)
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a1d      	ldr	r2, [pc, #116]	@ (8004b70 <TIM_OC5_SetConfig+0xa0>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4a19      	ldr	r2, [pc, #100]	@ (8004b74 <TIM_OC5_SetConfig+0xa4>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <TIM_OC5_SetConfig+0xa8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_OC5_SetConfig+0x66>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a14      	ldr	r2, [pc, #80]	@ (8004b7c <TIM_OC5_SetConfig+0xac>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_OC5_SetConfig+0x66>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a13      	ldr	r2, [pc, #76]	@ (8004b80 <TIM_OC5_SetConfig+0xb0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d109      	bne.n	8004b4a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	4a0c      	ldr	r2, [pc, #48]	@ (8004b6c <TIM_OC5_SetConfig+0x9c>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	621a      	str	r2, [r3, #32]
}
 8004b64:	46c0      	nop			@ (mov r8, r8)
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b006      	add	sp, #24
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	fffeffff 	.word	0xfffeffff
 8004b70:	fffeff8f 	.word	0xfffeff8f
 8004b74:	fffdffff 	.word	0xfffdffff
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40014400 	.word	0x40014400
 8004b80:	40014800 	.word	0x40014800

08004b84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	4a22      	ldr	r2, [pc, #136]	@ (8004c24 <TIM_OC6_SetConfig+0xa0>)
 8004b9a:	401a      	ands	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a1e      	ldr	r2, [pc, #120]	@ (8004c28 <TIM_OC6_SetConfig+0xa4>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c2c <TIM_OC6_SetConfig+0xa8>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	051b      	lsls	r3, r3, #20
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a16      	ldr	r2, [pc, #88]	@ (8004c30 <TIM_OC6_SetConfig+0xac>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d007      	beq.n	8004bec <TIM_OC6_SetConfig+0x68>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a15      	ldr	r2, [pc, #84]	@ (8004c34 <TIM_OC6_SetConfig+0xb0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d003      	beq.n	8004bec <TIM_OC6_SetConfig+0x68>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a14      	ldr	r2, [pc, #80]	@ (8004c38 <TIM_OC6_SetConfig+0xb4>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d109      	bne.n	8004c00 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4a13      	ldr	r2, [pc, #76]	@ (8004c3c <TIM_OC6_SetConfig+0xb8>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	029b      	lsls	r3, r3, #10
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	621a      	str	r2, [r3, #32]
}
 8004c1a:	46c0      	nop			@ (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b006      	add	sp, #24
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			@ (mov r8, r8)
 8004c24:	ffefffff 	.word	0xffefffff
 8004c28:	feff8fff 	.word	0xfeff8fff
 8004c2c:	ffdfffff 	.word	0xffdfffff
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	40014400 	.word	0x40014400
 8004c38:	40014800 	.word	0x40014800
 8004c3c:	fffbffff 	.word	0xfffbffff

08004c40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	2201      	movs	r2, #1
 8004c58:	4393      	bics	r3, r2
 8004c5a:	001a      	movs	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	22f0      	movs	r2, #240	@ 0xf0
 8004c6a:	4393      	bics	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	220a      	movs	r2, #10
 8004c7c:	4393      	bics	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	621a      	str	r2, [r3, #32]
}
 8004c94:	46c0      	nop			@ (mov r8, r8)
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b006      	add	sp, #24
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	2210      	movs	r2, #16
 8004cb4:	4393      	bics	r3, r2
 8004cb6:	001a      	movs	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8004cfc <TIM_TI2_ConfigInputStage+0x60>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	031b      	lsls	r3, r3, #12
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	22a0      	movs	r2, #160	@ 0xa0
 8004cd8:	4393      	bics	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	011b      	lsls	r3, r3, #4
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b006      	add	sp, #24
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	ffff0fff 	.word	0xffff0fff

08004d00 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a08      	ldr	r2, [pc, #32]	@ (8004d34 <TIM_ITRx_SetConfig+0x34>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	2207      	movs	r2, #7
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	609a      	str	r2, [r3, #8]
}
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b004      	add	sp, #16
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	46c0      	nop			@ (mov r8, r8)
 8004d34:	ffcfff8f 	.word	0xffcfff8f

08004d38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	4a09      	ldr	r2, [pc, #36]	@ (8004d74 <TIM_ETR_SetConfig+0x3c>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	021a      	lsls	r2, r3, #8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	609a      	str	r2, [r3, #8]
}
 8004d6c:	46c0      	nop			@ (mov r8, r8)
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	b006      	add	sp, #24
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	ffff00ff 	.word	0xffff00ff

08004d78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	221f      	movs	r2, #31
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	409a      	lsls	r2, r3
 8004d8e:	0013      	movs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	43d2      	mvns	r2, r2
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	211f      	movs	r1, #31
 8004da8:	400b      	ands	r3, r1
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4099      	lsls	r1, r3
 8004dae:	000b      	movs	r3, r1
 8004db0:	431a      	orrs	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	621a      	str	r2, [r3, #32]
}
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b006      	add	sp, #24
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	223c      	movs	r2, #60	@ 0x3c
 8004dce:	5c9b      	ldrb	r3, [r3, r2]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e04a      	b.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	223c      	movs	r2, #60	@ 0x3c
 8004ddc:	2101      	movs	r1, #1
 8004dde:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	223d      	movs	r2, #61	@ 0x3d
 8004de4:	2102      	movs	r1, #2
 8004de6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d108      	bne.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2270      	movs	r2, #112	@ 0x70
 8004e18:	4393      	bics	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a11      	ldr	r2, [pc, #68]	@ (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a10      	ldr	r2, [pc, #64]	@ (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10c      	bne.n	8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2280      	movs	r2, #128	@ 0x80
 8004e46:	4393      	bics	r3, r2
 8004e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	223d      	movs	r2, #61	@ 0x3d
 8004e60:	2101      	movs	r1, #1
 8004e62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	223c      	movs	r2, #60	@ 0x3c
 8004e68:	2100      	movs	r1, #0
 8004e6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b004      	add	sp, #16
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	ff0fffff 	.word	0xff0fffff
 8004e80:	40000400 	.word	0x40000400

08004e84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	223c      	movs	r2, #60	@ 0x3c
 8004e96:	5c9b      	ldrb	r3, [r3, r2]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e06f      	b.n	8004f80 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	223c      	movs	r2, #60	@ 0x3c
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	22ff      	movs	r2, #255	@ 0xff
 8004eac:	4393      	bics	r3, r2
 8004eae:	001a      	movs	r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a33      	ldr	r2, [pc, #204]	@ (8004f88 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004ebc:	401a      	ands	r2, r3
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a30      	ldr	r2, [pc, #192]	@ (8004f8c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004eca:	401a      	ands	r2, r3
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8004f90 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004ed8:	401a      	ands	r2, r3
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8004f94 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004ee6:	401a      	ands	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4a29      	ldr	r2, [pc, #164]	@ (8004f98 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004ef4:	401a      	ands	r2, r3
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4a26      	ldr	r2, [pc, #152]	@ (8004f9c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004f02:	401a      	ands	r2, r3
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a24      	ldr	r2, [pc, #144]	@ (8004fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004f10:	401a      	ands	r2, r3
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4a21      	ldr	r2, [pc, #132]	@ (8004fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004f20:	401a      	ands	r2, r3
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d11c      	bne.n	8004f6e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4a1d      	ldr	r2, [pc, #116]	@ (8004fac <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004f38:	401a      	ands	r2, r3
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3e:	051b      	lsls	r3, r3, #20
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004f48:	401a      	ands	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4a17      	ldr	r2, [pc, #92]	@ (8004fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004f56:	401a      	ands	r2, r3
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a15      	ldr	r2, [pc, #84]	@ (8004fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004f64:	401a      	ands	r2, r3
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	223c      	movs	r2, #60	@ 0x3c
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b004      	add	sp, #16
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	fffffcff 	.word	0xfffffcff
 8004f8c:	fffffbff 	.word	0xfffffbff
 8004f90:	fffff7ff 	.word	0xfffff7ff
 8004f94:	ffffefff 	.word	0xffffefff
 8004f98:	ffffdfff 	.word	0xffffdfff
 8004f9c:	ffffbfff 	.word	0xffffbfff
 8004fa0:	fff0ffff 	.word	0xfff0ffff
 8004fa4:	efffffff 	.word	0xefffffff
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	ff0fffff 	.word	0xff0fffff
 8004fb0:	feffffff 	.word	0xfeffffff
 8004fb4:	fdffffff 	.word	0xfdffffff
 8004fb8:	dfffffff 	.word	0xdfffffff

08004fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fc4:	46c0      	nop			@ (mov r8, r8)
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b002      	add	sp, #8
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fd4:	46c0      	nop			@ (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fe4:	46c0      	nop			@ (mov r8, r8)
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b002      	add	sp, #8
 8004fea:	bd80      	pop	{r7, pc}

08004fec <memset>:
 8004fec:	0003      	movs	r3, r0
 8004fee:	1882      	adds	r2, r0, r2
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d100      	bne.n	8004ff6 <memset+0xa>
 8004ff4:	4770      	bx	lr
 8004ff6:	7019      	strb	r1, [r3, #0]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	e7f9      	b.n	8004ff0 <memset+0x4>

08004ffc <__libc_init_array>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	2600      	movs	r6, #0
 8005000:	4c0c      	ldr	r4, [pc, #48]	@ (8005034 <__libc_init_array+0x38>)
 8005002:	4d0d      	ldr	r5, [pc, #52]	@ (8005038 <__libc_init_array+0x3c>)
 8005004:	1b64      	subs	r4, r4, r5
 8005006:	10a4      	asrs	r4, r4, #2
 8005008:	42a6      	cmp	r6, r4
 800500a:	d109      	bne.n	8005020 <__libc_init_array+0x24>
 800500c:	2600      	movs	r6, #0
 800500e:	f000 f819 	bl	8005044 <_init>
 8005012:	4c0a      	ldr	r4, [pc, #40]	@ (800503c <__libc_init_array+0x40>)
 8005014:	4d0a      	ldr	r5, [pc, #40]	@ (8005040 <__libc_init_array+0x44>)
 8005016:	1b64      	subs	r4, r4, r5
 8005018:	10a4      	asrs	r4, r4, #2
 800501a:	42a6      	cmp	r6, r4
 800501c:	d105      	bne.n	800502a <__libc_init_array+0x2e>
 800501e:	bd70      	pop	{r4, r5, r6, pc}
 8005020:	00b3      	lsls	r3, r6, #2
 8005022:	58eb      	ldr	r3, [r5, r3]
 8005024:	4798      	blx	r3
 8005026:	3601      	adds	r6, #1
 8005028:	e7ee      	b.n	8005008 <__libc_init_array+0xc>
 800502a:	00b3      	lsls	r3, r6, #2
 800502c:	58eb      	ldr	r3, [r5, r3]
 800502e:	4798      	blx	r3
 8005030:	3601      	adds	r6, #1
 8005032:	e7f2      	b.n	800501a <__libc_init_array+0x1e>
 8005034:	080050f0 	.word	0x080050f0
 8005038:	080050f0 	.word	0x080050f0
 800503c:	080050f4 	.word	0x080050f4
 8005040:	080050f0 	.word	0x080050f0

08005044 <_init>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	46c0      	nop			@ (mov r8, r8)
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr

08005050 <_fini>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	46c0      	nop			@ (mov r8, r8)
 8005054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005056:	bc08      	pop	{r3}
 8005058:	469e      	mov	lr, r3
 800505a:	4770      	bx	lr
