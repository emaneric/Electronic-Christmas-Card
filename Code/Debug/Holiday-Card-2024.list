
Holiday-Card-2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e2c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004ee4  08004ee4  00005ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f78  08004f78  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f78  08004f78  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f78  08004f78  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f78  08004f78  00005f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f7c  08004f7c  00005f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004f80  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000000c  08004f8c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004f8c  000061b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaf3  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002502  00000000  00000000  00014b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00017030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b66  00000000  00000000  00017f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164c2  00000000  00000000  00018a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010290  00000000  00000000  0002ef28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091019  00000000  00000000  0003f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d01d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003524  00000000  00000000  000d0214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d3738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004ecc 	.word	0x08004ecc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004ecc 	.word	0x08004ecc

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <buzzer_init>:
 *      Author: eric
 */

#include <buzzer.h>

void buzzer_init(buzzer_HandleTypeDef *buzzer, TIM_HandleTypeDef *buzz_timer, const uint16_t channel_1, const uint16_t channel_2, TIM_HandleTypeDef *interrupt_timer){
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	0019      	movs	r1, r3
 8000224:	1dbb      	adds	r3, r7, #6
 8000226:	801a      	strh	r2, [r3, #0]
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	1c0a      	adds	r2, r1, #0
 800022c:	801a      	strh	r2, [r3, #0]

	buzzer->buzz_timer = buzz_timer;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	68ba      	ldr	r2, [r7, #8]
 8000232:	601a      	str	r2, [r3, #0]
	buzzer->channel_1 = channel_1;
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	1dba      	adds	r2, r7, #6
 8000238:	8812      	ldrh	r2, [r2, #0]
 800023a:	809a      	strh	r2, [r3, #4]
	buzzer->channel_2 = channel_2;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	1d3a      	adds	r2, r7, #4
 8000240:	8812      	ldrh	r2, [r2, #0]
 8000242:	80da      	strh	r2, [r3, #6]
	buzzer->interrupt_timer = interrupt_timer;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	69ba      	ldr	r2, [r7, #24]
 8000248:	609a      	str	r2, [r3, #8]
	buzzer->frequency = 0;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2200      	movs	r2, #0
 800024e:	819a      	strh	r2, [r3, #12]
	buzzer->state = 0;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	2200      	movs	r2, #0
 8000254:	739a      	strb	r2, [r3, #14]
	buzzer->melody_index = 0;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2200      	movs	r2, #0
 800025a:	821a      	strh	r2, [r3, #16]
}
 800025c:	46c0      	nop			@ (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b004      	add	sp, #16
 8000262:	bd80      	pop	{r7, pc}

08000264 <buzzer_interrupt>:

void buzzer_interrupt(buzzer_HandleTypeDef *buzzer){
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Stop_IT(buzzer->interrupt_timer);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	0018      	movs	r0, r3
 8000272:	f003 fc29 	bl	8003ac8 <HAL_TIM_Base_Stop_IT>
	//__HAL_TIM_SET_COUNTER(buzzer->interrupt_timer, 0); //need to reset the count of the register here to 0 TIM2->CNT = 0;
	HAL_TIM_PWM_Stop(buzzer->buzz_timer , TIM_CHANNEL_2);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	2104      	movs	r1, #4
 800027c:	0018      	movs	r0, r3
 800027e:	f003 fd89 	bl	8003d94 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(buzzer->buzz_timer , TIM_CHANNEL_3);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2108      	movs	r1, #8
 8000288:	0018      	movs	r0, r3
 800028a:	f003 fd83 	bl	8003d94 <HAL_TIM_PWM_Stop>
	buzzer->state = 0;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2200      	movs	r2, #0
 8000292:	739a      	strb	r2, [r3, #14]
}
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	b002      	add	sp, #8
 800029a:	bd80      	pop	{r7, pc}

0800029c <buzzer_write>:

void buzzer_write(buzzer_HandleTypeDef *buzzer, uint16_t frequency, uint16_t duration){
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	0008      	movs	r0, r1
 80002a6:	0011      	movs	r1, r2
 80002a8:	1cbb      	adds	r3, r7, #2
 80002aa:	1c02      	adds	r2, r0, #0
 80002ac:	801a      	strh	r2, [r3, #0]
 80002ae:	003b      	movs	r3, r7
 80002b0:	1c0a      	adds	r2, r1, #0
 80002b2:	801a      	strh	r2, [r3, #0]

	buzzer->frequency = frequency;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	1cba      	adds	r2, r7, #2
 80002b8:	8812      	ldrh	r2, [r2, #0]
 80002ba:	819a      	strh	r2, [r3, #12]
	//buzzer->buzz_end_tick = HAL_GetTick() + duration;

	//Need to figure out how to set ARR and pulse registers to get the desired frequency
	//For now, just using default testing values
	HAL_TIM_PWM_Start(buzzer->buzz_timer , TIM_CHANNEL_2);	//uncomment to hear noise
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2104      	movs	r1, #4
 80002c2:	0018      	movs	r0, r3
 80002c4:	f003 fc8e 	bl	8003be4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(buzzer->buzz_timer , TIM_CHANNEL_3);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2108      	movs	r1, #8
 80002ce:	0018      	movs	r0, r3
 80002d0:	f003 fc88 	bl	8003be4 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_AUTORELOAD(buzzer->interrupt_timer, duration); //Set ARR to the duration. Since timer period is 1ms, duration in ms can be used directly
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	003a      	movs	r2, r7
 80002dc:	8812      	ldrh	r2, [r2, #0]
 80002de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	003a      	movs	r2, r7
 80002e6:	8812      	ldrh	r2, [r2, #0]
 80002e8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(buzzer->interrupt_timer, 0);	//Reset count to 0
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2200      	movs	r2, #0
 80002f2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_CLEAR_FLAG(buzzer->interrupt_timer, TIM_FLAG_UPDATE);	//Clear the interrupt flag. Don't understand exactly, but without this, interrupt triggers immediately
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2202      	movs	r2, #2
 80002fc:	4252      	negs	r2, r2
 80002fe:	611a      	str	r2, [r3, #16]
	HAL_TIM_Base_Start_IT(buzzer->interrupt_timer);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	0018      	movs	r0, r3
 8000306:	f003 fb91 	bl	8003a2c <HAL_TIM_Base_Start_IT>
	buzzer->state = 1;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2201      	movs	r2, #1
 800030e:	739a      	strb	r2, [r3, #14]
}
 8000310:	46c0      	nop			@ (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	b002      	add	sp, #8
 8000316:	bd80      	pop	{r7, pc}

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031e:	f000 fdcb 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000322:	f000 f8cf 	bl	80004c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000326:	f000 fb4f 	bl	80009c8 <MX_GPIO_Init>
  MX_RTC_Init();
 800032a:	f000 f98d 	bl	8000648 <MX_RTC_Init>
  MX_TIM14_Init();
 800032e:	f000 fad1 	bl	80008d4 <MX_TIM14_Init>
  MX_TIM16_Init();
 8000332:	f000 fb1f 	bl	8000974 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000336:	f000 f9f3 	bl	8000720 <MX_TIM1_Init>
  MX_ADC1_Init();
 800033a:	f000 f919 	bl	8000570 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, 1);
 800033e:	2380      	movs	r3, #128	@ 0x80
 8000340:	019b      	lsls	r3, r3, #6
 8000342:	4857      	ldr	r0, [pc, #348]	@ (80004a0 <main+0x188>)
 8000344:	2201      	movs	r2, #1
 8000346:	0019      	movs	r1, r3
 8000348:	f002 fa3c 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, 1);
 800034c:	2380      	movs	r3, #128	@ 0x80
 800034e:	01db      	lsls	r3, r3, #7
 8000350:	4853      	ldr	r0, [pc, #332]	@ (80004a0 <main+0x188>)
 8000352:	2201      	movs	r2, #1
 8000354:	0019      	movs	r1, r3
 8000356:	f002 fa35 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, 1);
 800035a:	2380      	movs	r3, #128	@ 0x80
 800035c:	021b      	lsls	r3, r3, #8
 800035e:	4850      	ldr	r0, [pc, #320]	@ (80004a0 <main+0x188>)
 8000360:	2201      	movs	r2, #1
 8000362:	0019      	movs	r1, r3
 8000364:	f002 fa2e 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R3_GPIO_Port, R3_Pin, 1);
 8000368:	2380      	movs	r3, #128	@ 0x80
 800036a:	0059      	lsls	r1, r3, #1
 800036c:	23a0      	movs	r3, #160	@ 0xa0
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	2201      	movs	r2, #1
 8000372:	0018      	movs	r0, r3
 8000374:	f002 fa26 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, 1);
 8000378:	2380      	movs	r3, #128	@ 0x80
 800037a:	0099      	lsls	r1, r3, #2
 800037c:	23a0      	movs	r3, #160	@ 0xa0
 800037e:	05db      	lsls	r3, r3, #23
 8000380:	2201      	movs	r2, #1
 8000382:	0018      	movs	r0, r3
 8000384:	f002 fa1e 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R5_GPIO_Port, R5_Pin, 1);
 8000388:	4b46      	ldr	r3, [pc, #280]	@ (80004a4 <main+0x18c>)
 800038a:	2201      	movs	r2, #1
 800038c:	2140      	movs	r1, #64	@ 0x40
 800038e:	0018      	movs	r0, r3
 8000390:	f002 fa18 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R6_GPIO_Port, R6_Pin, 1);
 8000394:	4b43      	ldr	r3, [pc, #268]	@ (80004a4 <main+0x18c>)
 8000396:	2201      	movs	r2, #1
 8000398:	2180      	movs	r1, #128	@ 0x80
 800039a:	0018      	movs	r0, r3
 800039c:	f002 fa12 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R7_GPIO_Port, R7_Pin, 1);
 80003a0:	2380      	movs	r3, #128	@ 0x80
 80003a2:	00d9      	lsls	r1, r3, #3
 80003a4:	23a0      	movs	r3, #160	@ 0xa0
 80003a6:	05db      	lsls	r3, r3, #23
 80003a8:	2201      	movs	r2, #1
 80003aa:	0018      	movs	r0, r3
 80003ac:	f002 fa0a 	bl	80027c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(C0_GPIO_Port, C0_Pin, 0);
 80003b0:	2380      	movs	r3, #128	@ 0x80
 80003b2:	015b      	lsls	r3, r3, #5
 80003b4:	483a      	ldr	r0, [pc, #232]	@ (80004a0 <main+0x188>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	0019      	movs	r1, r3
 80003ba:	f002 fa03 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C1_GPIO_Port, C1_Pin, 0);
 80003be:	2380      	movs	r3, #128	@ 0x80
 80003c0:	011b      	lsls	r3, r3, #4
 80003c2:	4837      	ldr	r0, [pc, #220]	@ (80004a0 <main+0x188>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	0019      	movs	r1, r3
 80003c8:	f002 f9fc 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C2_GPIO_Port, C2_Pin, 0);
 80003cc:	2380      	movs	r3, #128	@ 0x80
 80003ce:	00db      	lsls	r3, r3, #3
 80003d0:	4833      	ldr	r0, [pc, #204]	@ (80004a0 <main+0x188>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	0019      	movs	r1, r3
 80003d6:	f002 f9f5 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C3_GPIO_Port, C3_Pin, 0);
 80003da:	4b31      	ldr	r3, [pc, #196]	@ (80004a0 <main+0x188>)
 80003dc:	2200      	movs	r2, #0
 80003de:	2104      	movs	r1, #4
 80003e0:	0018      	movs	r0, r3
 80003e2:	f002 f9ef 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C4_GPIO_Port, C4_Pin, 0);
 80003e6:	4b2e      	ldr	r3, [pc, #184]	@ (80004a0 <main+0x188>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	2102      	movs	r1, #2
 80003ec:	0018      	movs	r0, r3
 80003ee:	f002 f9e9 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C5_GPIO_Port, C5_Pin, 0);
 80003f2:	4b2b      	ldr	r3, [pc, #172]	@ (80004a0 <main+0x188>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	2101      	movs	r1, #1
 80003f8:	0018      	movs	r0, r3
 80003fa:	f002 f9e3 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C6_GPIO_Port, C6_Pin, 0);
 80003fe:	23a0      	movs	r3, #160	@ 0xa0
 8000400:	05db      	lsls	r3, r3, #23
 8000402:	2200      	movs	r2, #0
 8000404:	2180      	movs	r1, #128	@ 0x80
 8000406:	0018      	movs	r0, r3
 8000408:	f002 f9dc 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(C7_GPIO_Port, C7_Pin, 0);
 800040c:	23a0      	movs	r3, #160	@ 0xa0
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	2200      	movs	r2, #0
 8000412:	2140      	movs	r1, #64	@ 0x40
 8000414:	0018      	movs	r0, r3
 8000416:	f002 f9d5 	bl	80027c4 <HAL_GPIO_WritePin>

	// Always calibrate ADC first
	HAL_ADCEx_Calibration_Start(&hadc1);
 800041a:	4b23      	ldr	r3, [pc, #140]	@ (80004a8 <main+0x190>)
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fe73 	bl	8002108 <HAL_ADCEx_Calibration_Start>

	// Start the conversion sequence
	HAL_ADC_Start(&hadc1);
 8000422:	4b21      	ldr	r3, [pc, #132]	@ (80004a8 <main+0x190>)
 8000424:	0018      	movs	r0, r3
 8000426:	f001 f8fd 	bl	8001624 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 0xFFFF);
 800042a:	4a20      	ldr	r2, [pc, #128]	@ (80004ac <main+0x194>)
 800042c:	4b1e      	ldr	r3, [pc, #120]	@ (80004a8 <main+0x190>)
 800042e:	0011      	movs	r1, r2
 8000430:	0018      	movs	r0, r3
 8000432:	f001 f945 	bl	80016c0 <HAL_ADC_PollForConversion>
	uint32_t vrefint_raw = HAL_ADC_GetValue(&hadc1);
 8000436:	4b1c      	ldr	r3, [pc, #112]	@ (80004a8 <main+0x190>)
 8000438:	0018      	movs	r0, r3
 800043a:	f001 f9d5 	bl	80017e8 <HAL_ADC_GetValue>
 800043e:	0003      	movs	r3, r0
 8000440:	60fb      	str	r3, [r7, #12]

	/*
	 * This macro calculates the vdda voltage (as a uint32_t representing the voltage in milliVolts)
	 * using the vref internal raw adc value, and the internal calibration value in ROM
	 */
	uint32_t vdda_voltage = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(vrefint_raw, ADC_RESOLUTION_12B);
 8000442:	4b1b      	ldr	r3, [pc, #108]	@ (80004b0 <main+0x198>)
 8000444:	881b      	ldrh	r3, [r3, #0]
 8000446:	001a      	movs	r2, r3
 8000448:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <main+0x19c>)
 800044a:	4353      	muls	r3, r2
 800044c:	68f9      	ldr	r1, [r7, #12]
 800044e:	0018      	movs	r0, r3
 8000450:	f7ff fe56 	bl	8000100 <__udivsi3>
 8000454:	0003      	movs	r3, r0
 8000456:	60bb      	str	r3, [r7, #8]
	__NOP();
 8000458:	46c0      	nop			@ (mov r8, r8)


	uint8_t btn1_val = 0;
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]


	//I think I should add functionality to setup a queue of buzzer tones.
	//That way the code could automatically tigger for however long is needed for however many tones are needed
	//That would make it easier to play pre-defined music in an elegant way
	buzzer_init(&buzzer, &htim1, TIM_CHANNEL_2, TIM_CHANNEL_3, &htim16);
 8000460:	4915      	ldr	r1, [pc, #84]	@ (80004b8 <main+0x1a0>)
 8000462:	4816      	ldr	r0, [pc, #88]	@ (80004bc <main+0x1a4>)
 8000464:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <main+0x1a8>)
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	2308      	movs	r3, #8
 800046a:	2204      	movs	r2, #4
 800046c:	f7ff fed4 	bl	8000218 <buzzer_init>
	buzzer_write(&buzzer, 3000, 1);
 8000470:	4910      	ldr	r1, [pc, #64]	@ (80004b4 <main+0x19c>)
 8000472:	4b12      	ldr	r3, [pc, #72]	@ (80004bc <main+0x1a4>)
 8000474:	2201      	movs	r2, #1
 8000476:	0018      	movs	r0, r3
 8000478:	f7ff ff10 	bl	800029c <buzzer_write>
	HAL_Delay(1000);
 800047c:	23fa      	movs	r3, #250	@ 0xfa
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	0018      	movs	r0, r3
 8000482:	f000 fd9f 	bl	8000fc4 <HAL_Delay>
	buzzer_write(&buzzer, 3000, 10);
 8000486:	490b      	ldr	r1, [pc, #44]	@ (80004b4 <main+0x19c>)
 8000488:	4b0c      	ldr	r3, [pc, #48]	@ (80004bc <main+0x1a4>)
 800048a:	220a      	movs	r2, #10
 800048c:	0018      	movs	r0, r3
 800048e:	f7ff ff05 	bl	800029c <buzzer_write>
	HAL_Delay(2000);
 8000492:	23fa      	movs	r3, #250	@ 0xfa
 8000494:	00db      	lsls	r3, r3, #3
 8000496:	0018      	movs	r0, r3
 8000498:	f000 fd94 	bl	8000fc4 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800049c:	46c0      	nop			@ (mov r8, r8)
 800049e:	e7fd      	b.n	800049c <main+0x184>
 80004a0:	50000400 	.word	0x50000400
 80004a4:	50000800 	.word	0x50000800
 80004a8:	20000028 	.word	0x20000028
 80004ac:	0000ffff 	.word	0x0000ffff
 80004b0:	1fff75aa 	.word	0x1fff75aa
 80004b4:	00000bb8 	.word	0x00000bb8
 80004b8:	200000b8 	.word	0x200000b8
 80004bc:	2000019c 	.word	0x2000019c
 80004c0:	20000150 	.word	0x20000150

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b093      	sub	sp, #76	@ 0x4c
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	2414      	movs	r4, #20
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	0018      	movs	r0, r3
 80004d0:	2334      	movs	r3, #52	@ 0x34
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f004 fccd 	bl	8004e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	0018      	movs	r0, r3
 80004de:	2310      	movs	r3, #16
 80004e0:	001a      	movs	r2, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	f004 fcc6 	bl	8004e74 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f002 f995 	bl	800281c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80004f2:	f002 f985 	bl	8002800 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80004f6:	4b1d      	ldr	r3, [pc, #116]	@ (800056c <SystemClock_Config+0xa8>)
 80004f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80004fa:	4b1c      	ldr	r3, [pc, #112]	@ (800056c <SystemClock_Config+0xa8>)
 80004fc:	2118      	movs	r1, #24
 80004fe:	438a      	bics	r2, r1
 8000500:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000502:	193b      	adds	r3, r7, r4
 8000504:	2206      	movs	r2, #6
 8000506:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2201      	movs	r2, #1
 800050c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2280      	movs	r2, #128	@ 0x80
 8000512:	0052      	lsls	r2, r2, #1
 8000514:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051c:	193b      	adds	r3, r7, r4
 800051e:	2240      	movs	r2, #64	@ 0x40
 8000520:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000522:	193b      	adds	r3, r7, r4
 8000524:	2200      	movs	r2, #0
 8000526:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	f002 f9b6 	bl	800289c <HAL_RCC_OscConfig>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000534:	f000 fb12 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2207      	movs	r2, #7
 800053c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2100      	movs	r1, #0
 8000554:	0018      	movs	r0, r3
 8000556:	f002 fcb1 	bl	8002ebc <HAL_RCC_ClockConfig>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800055e:	f000 fafd 	bl	8000b5c <Error_Handler>
  }
}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b013      	add	sp, #76	@ 0x4c
 8000568:	bd90      	pop	{r4, r7, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	40021000 	.word	0x40021000

08000570 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	0018      	movs	r0, r3
 800057a:	230c      	movs	r3, #12
 800057c:	001a      	movs	r2, r3
 800057e:	2100      	movs	r1, #0
 8000580:	f004 fc78 	bl	8004e74 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000584:	4b2d      	ldr	r3, [pc, #180]	@ (800063c <MX_ADC1_Init+0xcc>)
 8000586:	4a2e      	ldr	r2, [pc, #184]	@ (8000640 <MX_ADC1_Init+0xd0>)
 8000588:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800058a:	4b2c      	ldr	r3, [pc, #176]	@ (800063c <MX_ADC1_Init+0xcc>)
 800058c:	2280      	movs	r2, #128	@ 0x80
 800058e:	05d2      	lsls	r2, r2, #23
 8000590:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000592:	4b2a      	ldr	r3, [pc, #168]	@ (800063c <MX_ADC1_Init+0xcc>)
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000598:	4b28      	ldr	r3, [pc, #160]	@ (800063c <MX_ADC1_Init+0xcc>)
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800059e:	4b27      	ldr	r3, [pc, #156]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a4:	4b25      	ldr	r3, [pc, #148]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005aa:	4b24      	ldr	r3, [pc, #144]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80005b0:	4b22      	ldr	r3, [pc, #136]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b6:	4b21      	ldr	r3, [pc, #132]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005be:	2201      	movs	r2, #1
 80005c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c2:	4b1e      	ldr	r3, [pc, #120]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005c4:	2220      	movs	r2, #32
 80005c6:	2100      	movs	r1, #0
 80005c8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005d8:	222c      	movs	r2, #44	@ 0x2c
 80005da:	2100      	movs	r1, #0
 80005dc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005e6:	2205      	movs	r2, #5
 80005e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005ec:	2205      	movs	r2, #5
 80005ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005f2:	223c      	movs	r2, #60	@ 0x3c
 80005f4:	2100      	movs	r1, #0
 80005f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <MX_ADC1_Init+0xcc>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_ADC1_Init+0xcc>)
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fe67 	bl	80012d4 <HAL_ADC_Init>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800060a:	f000 faa7 	bl	8000b5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4a0c      	ldr	r2, [pc, #48]	@ (8000644 <MX_ADC1_Init+0xd4>)
 8000612:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	1d3a      	adds	r2, r7, #4
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_ADC1_Init+0xcc>)
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fa1a 	bl	8001a60 <HAL_ADC_ConfigChannel>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000630:	f000 fa94 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b004      	add	sp, #16
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000028 	.word	0x20000028
 8000640:	40012400 	.word	0x40012400
 8000644:	b4002000 	.word	0xb4002000

08000648 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	0018      	movs	r0, r3
 8000652:	2314      	movs	r3, #20
 8000654:	001a      	movs	r2, r3
 8000656:	2100      	movs	r1, #0
 8000658:	f004 fc0c 	bl	8004e74 <memset>
  RTC_DateTypeDef sDate = {0};
 800065c:	003b      	movs	r3, r7
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000662:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <MX_RTC_Init+0xd0>)
 8000664:	4a2d      	ldr	r2, [pc, #180]	@ (800071c <MX_RTC_Init+0xd4>)
 8000666:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000668:	4b2b      	ldr	r3, [pc, #172]	@ (8000718 <MX_RTC_Init+0xd0>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800066e:	4b2a      	ldr	r3, [pc, #168]	@ (8000718 <MX_RTC_Init+0xd0>)
 8000670:	227f      	movs	r2, #127	@ 0x7f
 8000672:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000674:	4b28      	ldr	r3, [pc, #160]	@ (8000718 <MX_RTC_Init+0xd0>)
 8000676:	22ff      	movs	r2, #255	@ 0xff
 8000678:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800067a:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <MX_RTC_Init+0xd0>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000680:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <MX_RTC_Init+0xd0>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000686:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <MX_RTC_Init+0xd0>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <MX_RTC_Init+0xd0>)
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	05d2      	lsls	r2, r2, #23
 8000692:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000694:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <MX_RTC_Init+0xd0>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800069a:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <MX_RTC_Init+0xd0>)
 800069c:	0018      	movs	r0, r3
 800069e:	f002 febd 	bl	800341c <HAL_RTC_Init>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80006a6:	f000 fa59 	bl	8000b5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80006ce:	1d39      	adds	r1, r7, #4
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_RTC_Init+0xd0>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 ff43 	bl	8003560 <HAL_RTC_SetTime>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80006de:	f000 fa3d 	bl	8000b5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2201      	movs	r2, #1
 80006ec:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80006ee:	003b      	movs	r3, r7
 80006f0:	2201      	movs	r2, #1
 80006f2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80006f4:	003b      	movs	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80006fa:	0039      	movs	r1, r7
 80006fc:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_RTC_Init+0xd0>)
 80006fe:	2201      	movs	r2, #1
 8000700:	0018      	movs	r0, r3
 8000702:	f002 ffd5 	bl	80036b0 <HAL_RTC_SetDate>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800070a:	f000 fa27 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b006      	add	sp, #24
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	2000008c 	.word	0x2000008c
 800071c:	40002800 	.word	0x40002800

08000720 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b09c      	sub	sp, #112	@ 0x70
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000726:	2360      	movs	r3, #96	@ 0x60
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	0018      	movs	r0, r3
 800072c:	2310      	movs	r3, #16
 800072e:	001a      	movs	r2, r3
 8000730:	2100      	movs	r1, #0
 8000732:	f004 fb9f 	bl	8004e74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000736:	2354      	movs	r3, #84	@ 0x54
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	0018      	movs	r0, r3
 800073c:	230c      	movs	r3, #12
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f004 fb97 	bl	8004e74 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000746:	2338      	movs	r3, #56	@ 0x38
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	0018      	movs	r0, r3
 800074c:	231c      	movs	r3, #28
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f004 fb8f 	bl	8004e74 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	0018      	movs	r0, r3
 800075a:	2334      	movs	r3, #52	@ 0x34
 800075c:	001a      	movs	r2, r3
 800075e:	2100      	movs	r1, #0
 8000760:	f004 fb88 	bl	8004e74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000764:	4b59      	ldr	r3, [pc, #356]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 8000766:	4a5a      	ldr	r2, [pc, #360]	@ (80008d0 <MX_TIM1_Init+0x1b0>)
 8000768:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800076a:	4b58      	ldr	r3, [pc, #352]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 800076c:	2200      	movs	r2, #0
 800076e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	4b56      	ldr	r3, [pc, #344]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000;
 8000776:	4b55      	ldr	r3, [pc, #340]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 8000778:	22fa      	movs	r2, #250	@ 0xfa
 800077a:	0112      	lsls	r2, r2, #4
 800077c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800077e:	4b53      	ldr	r3, [pc, #332]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000784:	4b51      	ldr	r3, [pc, #324]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800078a:	4b50      	ldr	r3, [pc, #320]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 800078c:	2280      	movs	r2, #128	@ 0x80
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000790:	4b4e      	ldr	r3, [pc, #312]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 8000792:	0018      	movs	r0, r3
 8000794:	f003 f8f2 	bl	800397c <HAL_TIM_Base_Init>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 800079c:	f000 f9de 	bl	8000b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	2160      	movs	r1, #96	@ 0x60
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2280      	movs	r2, #128	@ 0x80
 80007a6:	0152      	lsls	r2, r2, #5
 80007a8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007aa:	187a      	adds	r2, r7, r1
 80007ac:	4b47      	ldr	r3, [pc, #284]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f003 fd7d 	bl	80042b0 <HAL_TIM_ConfigClockSource>
 80007b6:	1e03      	subs	r3, r0, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80007ba:	f000 f9cf 	bl	8000b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007be:	4b43      	ldr	r3, [pc, #268]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f003 f9af 	bl	8003b24 <HAL_TIM_PWM_Init>
 80007c6:	1e03      	subs	r3, r0, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80007ca:	f000 f9c7 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2154      	movs	r1, #84	@ 0x54
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e2:	187a      	adds	r2, r7, r1
 80007e4:	4b39      	ldr	r3, [pc, #228]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f004 fa2d 	bl	8004c48 <HAL_TIMEx_MasterConfigSynchronization>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80007f2:	f000 f9b3 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f6:	2138      	movs	r1, #56	@ 0x38
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2260      	movs	r2, #96	@ 0x60
 80007fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2000;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	22fa      	movs	r2, #250	@ 0xfa
 8000802:	00d2      	lsls	r2, r2, #3
 8000804:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000824:	1879      	adds	r1, r7, r1
 8000826:	4b29      	ldr	r3, [pc, #164]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 8000828:	2204      	movs	r2, #4
 800082a:	0018      	movs	r0, r3
 800082c:	f003 fc40 	bl	80040b0 <HAL_TIM_PWM_ConfigChannel>
 8000830:	1e03      	subs	r3, r0, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000834:	f000 f992 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000838:	2138      	movs	r1, #56	@ 0x38
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2202      	movs	r2, #2
 800083e:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000840:	1879      	adds	r1, r7, r1
 8000842:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 8000844:	2208      	movs	r2, #8
 8000846:	0018      	movs	r0, r3
 8000848:	f003 fc32 	bl	80040b0 <HAL_TIM_PWM_ConfigChannel>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0x134>
  {
    Error_Handler();
 8000850:	f000 f984 	bl	8000b5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2280      	movs	r2, #128	@ 0x80
 8000876:	0192      	lsls	r2, r2, #6
 8000878:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2280      	movs	r2, #128	@ 0x80
 8000890:	0492      	lsls	r2, r2, #18
 8000892:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a6:	1d3a      	adds	r2, r7, #4
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 80008aa:	0011      	movs	r1, r2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f004 fa2d 	bl	8004d0c <HAL_TIMEx_ConfigBreakDeadTime>
 80008b2:	1e03      	subs	r3, r0, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0x19a>
  {
    Error_Handler();
 80008b6:	f000 f951 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008ba:	4b04      	ldr	r3, [pc, #16]	@ (80008cc <MX_TIM1_Init+0x1ac>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f000 fa31 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b01c      	add	sp, #112	@ 0x70
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	200000b8 	.word	0x200000b8
 80008d0:	40012c00 	.word	0x40012c00

080008d4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	0018      	movs	r0, r3
 80008de:	231c      	movs	r3, #28
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f004 fac6 	bl	8004e74 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <MX_TIM14_Init+0x94>)
 80008ea:	4a20      	ldr	r2, [pc, #128]	@ (800096c <MX_TIM14_Init+0x98>)
 80008ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <MX_TIM14_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <MX_TIM14_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_TIM14_Init+0x94>)
 80008fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <MX_TIM14_Init+0x9c>)
 80008fe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <MX_TIM14_Init+0x94>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000906:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_TIM14_Init+0x94>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800090c:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_TIM14_Init+0x94>)
 800090e:	0018      	movs	r0, r3
 8000910:	f003 f834 	bl	800397c <HAL_TIM_Base_Init>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000918:	f000 f920 	bl	8000b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <MX_TIM14_Init+0x94>)
 800091e:	0018      	movs	r0, r3
 8000920:	f003 f900 	bl	8003b24 <HAL_TIM_PWM_Init>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f918 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2260      	movs	r2, #96	@ 0x60
 8000930:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000944:	1d39      	adds	r1, r7, #4
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <MX_TIM14_Init+0x94>)
 8000948:	2200      	movs	r2, #0
 800094a:	0018      	movs	r0, r3
 800094c:	f003 fbb0 	bl	80040b0 <HAL_TIM_PWM_ConfigChannel>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000954:	f000 f902 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000958:	4b03      	ldr	r3, [pc, #12]	@ (8000968 <MX_TIM14_Init+0x94>)
 800095a:	0018      	movs	r0, r3
 800095c:	f000 f9e2 	bl	8000d24 <HAL_TIM_MspPostInit>

}
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b008      	add	sp, #32
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000104 	.word	0x20000104
 800096c:	40002000 	.word	0x40002000
 8000970:	0000ffff 	.word	0x0000ffff

08000974 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <MX_TIM16_Init+0x44>)
 800097a:	4a10      	ldr	r2, [pc, #64]	@ (80009bc <MX_TIM16_Init+0x48>)
 800097c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000 - 1;
 800097e:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <MX_TIM16_Init+0x44>)
 8000980:	4a0f      	ldr	r2, [pc, #60]	@ (80009c0 <MX_TIM16_Init+0x4c>)
 8000982:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <MX_TIM16_Init+0x44>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800098a:	4b0b      	ldr	r3, [pc, #44]	@ (80009b8 <MX_TIM16_Init+0x44>)
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <MX_TIM16_Init+0x50>)
 800098e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <MX_TIM16_Init+0x44>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000996:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <MX_TIM16_Init+0x44>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <MX_TIM16_Init+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009a2:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <MX_TIM16_Init+0x44>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f002 ffe9 	bl	800397c <HAL_TIM_Base_Init>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80009ae:	f000 f8d5 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000150 	.word	0x20000150
 80009bc:	40014400 	.word	0x40014400
 80009c0:	00003e7f 	.word	0x00003e7f
 80009c4:	0000ffff 	.word	0x0000ffff

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b08b      	sub	sp, #44	@ 0x2c
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	2414      	movs	r4, #20
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	0018      	movs	r0, r3
 80009d4:	2314      	movs	r3, #20
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f004 fa4b 	bl	8004e74 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b50      	ldr	r3, [pc, #320]	@ (8000b20 <MX_GPIO_Init+0x158>)
 80009e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009e2:	4b4f      	ldr	r3, [pc, #316]	@ (8000b20 <MX_GPIO_Init+0x158>)
 80009e4:	2104      	movs	r1, #4
 80009e6:	430a      	orrs	r2, r1
 80009e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ea:	4b4d      	ldr	r3, [pc, #308]	@ (8000b20 <MX_GPIO_Init+0x158>)
 80009ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ee:	2204      	movs	r2, #4
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b4a      	ldr	r3, [pc, #296]	@ (8000b20 <MX_GPIO_Init+0x158>)
 80009f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009fa:	4b49      	ldr	r3, [pc, #292]	@ (8000b20 <MX_GPIO_Init+0x158>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a02:	4b47      	ldr	r3, [pc, #284]	@ (8000b20 <MX_GPIO_Init+0x158>)
 8000a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a06:	2201      	movs	r2, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b44      	ldr	r3, [pc, #272]	@ (8000b20 <MX_GPIO_Init+0x158>)
 8000a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a12:	4b43      	ldr	r3, [pc, #268]	@ (8000b20 <MX_GPIO_Init+0x158>)
 8000a14:	2102      	movs	r1, #2
 8000a16:	430a      	orrs	r2, r1
 8000a18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a1a:	4b41      	ldr	r3, [pc, #260]	@ (8000b20 <MX_GPIO_Init+0x158>)
 8000a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4013      	ands	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a26:	4b3e      	ldr	r3, [pc, #248]	@ (8000b20 <MX_GPIO_Init+0x158>)
 8000a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b20 <MX_GPIO_Init+0x158>)
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a32:	4b3b      	ldr	r3, [pc, #236]	@ (8000b20 <MX_GPIO_Init+0x158>)
 8000a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a36:	2208      	movs	r2, #8
 8000a38:	4013      	ands	r3, r2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, C7_Pin|C6_Pin|R3_Pin|R4_Pin
 8000a3e:	23f8      	movs	r3, #248	@ 0xf8
 8000a40:	00d9      	lsls	r1, r3, #3
 8000a42:	23a0      	movs	r3, #160	@ 0xa0
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	2200      	movs	r2, #0
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 febb 	bl	80027c4 <HAL_GPIO_WritePin>
                          |R7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, C5_Pin|C4_Pin|C3_Pin|C2_Pin
 8000a4e:	4935      	ldr	r1, [pc, #212]	@ (8000b24 <MX_GPIO_Init+0x15c>)
 8000a50:	4b35      	ldr	r3, [pc, #212]	@ (8000b28 <MX_GPIO_Init+0x160>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 feb5 	bl	80027c4 <HAL_GPIO_WritePin>
                          |C1_Pin|C0_Pin|R0_Pin|R1_Pin
                          |R2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R5_Pin|R6_Pin, GPIO_PIN_RESET);
 8000a5a:	4b34      	ldr	r3, [pc, #208]	@ (8000b2c <MX_GPIO_Init+0x164>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	21c0      	movs	r1, #192	@ 0xc0
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 feaf 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C7_Pin C6_Pin R3_Pin R4_Pin
                           R7_Pin */
  GPIO_InitStruct.Pin = C7_Pin|C6_Pin|R3_Pin|R4_Pin
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	22f8      	movs	r2, #248	@ 0xf8
 8000a6a:	00d2      	lsls	r2, r2, #3
 8000a6c:	601a      	str	r2, [r3, #0]
                          |R7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2201      	movs	r2, #1
 8000a72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	193a      	adds	r2, r7, r4
 8000a82:	23a0      	movs	r3, #160	@ 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	0011      	movs	r1, r2
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f001 fd37 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : C5_Pin C4_Pin C3_Pin C2_Pin
                           C1_Pin C0_Pin R0_Pin R1_Pin
                           R2_Pin */
  GPIO_InitStruct.Pin = C5_Pin|C4_Pin|C3_Pin|C2_Pin
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	4a24      	ldr	r2, [pc, #144]	@ (8000b24 <MX_GPIO_Init+0x15c>)
 8000a92:	601a      	str	r2, [r3, #0]
                          |C1_Pin|C0_Pin|R0_Pin|R1_Pin
                          |R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2201      	movs	r2, #1
 8000a98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b28 <MX_GPIO_Init+0x160>)
 8000aaa:	0019      	movs	r1, r3
 8000aac:	0010      	movs	r0, r2
 8000aae:	f001 fd25 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : R5_Pin R6_Pin */
  GPIO_InitStruct.Pin = R5_Pin|R6_Pin;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	22c0      	movs	r2, #192	@ 0xc0
 8000ab6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2201      	movs	r2, #1
 8000abc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	4a17      	ldr	r2, [pc, #92]	@ (8000b2c <MX_GPIO_Init+0x164>)
 8000ace:	0019      	movs	r1, r3
 8000ad0:	0010      	movs	r0, r2
 8000ad2:	f001 fd13 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2280      	movs	r2, #128	@ 0x80
 8000ada:	0212      	lsls	r2, r2, #8
 8000adc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8000aea:	193a      	adds	r2, r7, r4
 8000aec:	23a0      	movs	r3, #160	@ 0xa0
 8000aee:	05db      	lsls	r3, r3, #23
 8000af0:	0011      	movs	r1, r2
 8000af2:	0018      	movs	r0, r3
 8000af4:	f001 fd02 	bl	80024fc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN3_Pin;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2203      	movs	r2, #3
 8000afc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0a:	193b      	adds	r3, r7, r4
 8000b0c:	4a08      	ldr	r2, [pc, #32]	@ (8000b30 <MX_GPIO_Init+0x168>)
 8000b0e:	0019      	movs	r1, r3
 8000b10:	0010      	movs	r0, r2
 8000b12:	f001 fcf3 	bl	80024fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b00b      	add	sp, #44	@ 0x2c
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	40021000 	.word	0x40021000
 8000b24:	0000fc07 	.word	0x0000fc07
 8000b28:	50000400 	.word	0x50000400
 8000b2c:	50000800 	.word	0x50000800
 8000b30:	50000c00 	.word	0x50000c00

08000b34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]


	//Timer used for turning off buzzer
	__NOP();
 8000b3c:	46c0      	nop			@ (mov r8, r8)
	if (htim == buzzer.interrupt_timer) {
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d103      	bne.n	8000b50 <HAL_TIM_PeriodElapsedCallback+0x1c>
		buzzer_interrupt(&buzzer);
 8000b48:	4b03      	ldr	r3, [pc, #12]	@ (8000b58 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f7ff fb8a 	bl	8000264 <buzzer_interrupt>
	}
}
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000019c 	.word	0x2000019c

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	e7fd      	b.n	8000b64 <Error_Handler+0x8>

08000b68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <HAL_MspInit+0x44>)
 8000b70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <HAL_MspInit+0x44>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4013      	ands	r3, r2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <HAL_MspInit+0x44>)
 8000b88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b8a:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <HAL_MspInit+0x44>)
 8000b8c:	2180      	movs	r1, #128	@ 0x80
 8000b8e:	0549      	lsls	r1, r1, #21
 8000b90:	430a      	orrs	r2, r1
 8000b92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_MspInit+0x44>)
 8000b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b98:	2380      	movs	r3, #128	@ 0x80
 8000b9a:	055b      	lsls	r3, r3, #21
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b002      	add	sp, #8
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf8 <HAL_ADC_MspInit+0x48>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d115      	bne.n	8000bee <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_ADC_MspInit+0x4c>)
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <HAL_ADC_MspInit+0x4c>)
 8000bc8:	2180      	movs	r1, #128	@ 0x80
 8000bca:	0349      	lsls	r1, r1, #13
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <HAL_ADC_MspInit+0x4c>)
 8000bd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bd4:	2380      	movs	r3, #128	@ 0x80
 8000bd6:	035b      	lsls	r3, r3, #13
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	200c      	movs	r0, #12
 8000be4:	f001 fc58 	bl	8002498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000be8:	200c      	movs	r0, #12
 8000bea:	f001 fc6a 	bl	80024c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b004      	add	sp, #16
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	40012400 	.word	0x40012400
 8000bfc:	40021000 	.word	0x40021000

08000c00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b08b      	sub	sp, #44	@ 0x2c
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	2410      	movs	r4, #16
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	2318      	movs	r3, #24
 8000c10:	001a      	movs	r2, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	f004 f92e 	bl	8004e74 <memset>
  if(hrtc->Instance==RTC)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a15      	ldr	r2, [pc, #84]	@ (8000c74 <HAL_RTC_MspInit+0x74>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d124      	bne.n	8000c6c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2280      	movs	r2, #128	@ 0x80
 8000c26:	0292      	lsls	r2, r2, #10
 8000c28:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2280      	movs	r2, #128	@ 0x80
 8000c2e:	0052      	lsls	r2, r2, #1
 8000c30:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	0018      	movs	r0, r3
 8000c36:	f002 facb 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c3e:	f7ff ff8d 	bl	8000b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c42:	4b0d      	ldr	r3, [pc, #52]	@ (8000c78 <HAL_RTC_MspInit+0x78>)
 8000c44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000c46:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <HAL_RTC_MspInit+0x78>)
 8000c48:	2180      	movs	r1, #128	@ 0x80
 8000c4a:	0209      	lsls	r1, r1, #8
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <HAL_RTC_MspInit+0x78>)
 8000c52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_RTC_MspInit+0x78>)
 8000c56:	2180      	movs	r1, #128	@ 0x80
 8000c58:	00c9      	lsls	r1, r1, #3
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c5e:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <HAL_RTC_MspInit+0x78>)
 8000c60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c62:	2380      	movs	r3, #128	@ 0x80
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4013      	ands	r3, r2
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b00b      	add	sp, #44	@ 0x2c
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	40002800 	.word	0x40002800
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a22      	ldr	r2, [pc, #136]	@ (8000d14 <HAL_TIM_Base_MspInit+0x98>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d10e      	bne.n	8000cac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c8e:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <HAL_TIM_Base_MspInit+0x9c>)
 8000c90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c92:	4b21      	ldr	r3, [pc, #132]	@ (8000d18 <HAL_TIM_Base_MspInit+0x9c>)
 8000c94:	2180      	movs	r1, #128	@ 0x80
 8000c96:	0109      	lsls	r1, r1, #4
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <HAL_TIM_Base_MspInit+0x9c>)
 8000c9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	011b      	lsls	r3, r3, #4
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000caa:	e02e      	b.n	8000d0a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM14)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d1c <HAL_TIM_Base_MspInit+0xa0>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10e      	bne.n	8000cd4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000cb6:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <HAL_TIM_Base_MspInit+0x9c>)
 8000cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cba:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <HAL_TIM_Base_MspInit+0x9c>)
 8000cbc:	2180      	movs	r1, #128	@ 0x80
 8000cbe:	0209      	lsls	r1, r1, #8
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <HAL_TIM_Base_MspInit+0x9c>)
 8000cc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
}
 8000cd2:	e01a      	b.n	8000d0a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM16)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a11      	ldr	r2, [pc, #68]	@ (8000d20 <HAL_TIM_Base_MspInit+0xa4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d115      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000cde:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <HAL_TIM_Base_MspInit+0x9c>)
 8000ce0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <HAL_TIM_Base_MspInit+0x9c>)
 8000ce4:	2180      	movs	r1, #128	@ 0x80
 8000ce6:	0289      	lsls	r1, r1, #10
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_TIM_Base_MspInit+0x9c>)
 8000cee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	029b      	lsls	r3, r3, #10
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2015      	movs	r0, #21
 8000d00:	f001 fbca 	bl	8002498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000d04:	2015      	movs	r0, #21
 8000d06:	f001 fbdc 	bl	80024c2 <HAL_NVIC_EnableIRQ>
}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b006      	add	sp, #24
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	40012c00 	.word	0x40012c00
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40002000 	.word	0x40002000
 8000d20:	40014400 	.word	0x40014400

08000d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b08b      	sub	sp, #44	@ 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	2414      	movs	r4, #20
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	0018      	movs	r0, r3
 8000d32:	2314      	movs	r3, #20
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f004 f89c 	bl	8004e74 <memset>
  if(htim->Instance==TIM1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a28      	ldr	r2, [pc, #160]	@ (8000de4 <HAL_TIM_MspPostInit+0xc0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d122      	bne.n	8000d8c <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d46:	4b28      	ldr	r3, [pc, #160]	@ (8000de8 <HAL_TIM_MspPostInit+0xc4>)
 8000d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d4a:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <HAL_TIM_MspPostInit+0xc4>)
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d52:	4b25      	ldr	r3, [pc, #148]	@ (8000de8 <HAL_TIM_MspPostInit+0xc4>)
 8000d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d56:	2202      	movs	r2, #2
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    PB6     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000d5e:	0021      	movs	r1, r4
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2248      	movs	r2, #72	@ 0x48
 8000d64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2202      	movs	r2, #2
 8000d6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	4a1a      	ldr	r2, [pc, #104]	@ (8000dec <HAL_TIM_MspPostInit+0xc8>)
 8000d82:	0019      	movs	r1, r3
 8000d84:	0010      	movs	r0, r2
 8000d86:	f001 fbb9 	bl	80024fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000d8a:	e027      	b.n	8000ddc <HAL_TIM_MspPostInit+0xb8>
  else if(htim->Instance==TIM14)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a17      	ldr	r2, [pc, #92]	@ (8000df0 <HAL_TIM_MspPostInit+0xcc>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d122      	bne.n	8000ddc <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <HAL_TIM_MspPostInit+0xc4>)
 8000d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d9a:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <HAL_TIM_MspPostInit+0xc4>)
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <HAL_TIM_MspPostInit+0xc4>)
 8000da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000da6:	2201      	movs	r2, #1
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZ_Pin;
 8000dae:	2114      	movs	r1, #20
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2210      	movs	r2, #16
 8000db4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2202      	movs	r2, #2
 8000dba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2204      	movs	r2, #4
 8000dcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUZZ_GPIO_Port, &GPIO_InitStruct);
 8000dce:	187a      	adds	r2, r7, r1
 8000dd0:	23a0      	movs	r3, #160	@ 0xa0
 8000dd2:	05db      	lsls	r3, r3, #23
 8000dd4:	0011      	movs	r1, r2
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f001 fb90 	bl	80024fc <HAL_GPIO_Init>
}
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b00b      	add	sp, #44	@ 0x2c
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	40012c00 	.word	0x40012c00
 8000de8:	40021000 	.word	0x40021000
 8000dec:	50000400 	.word	0x50000400
 8000df0:	40002000 	.word	0x40002000

08000df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	e7fd      	b.n	8000df8 <NMI_Handler+0x4>

08000dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	46c0      	nop			@ (mov r8, r8)
 8000e02:	e7fd      	b.n	8000e00 <HardFault_Handler+0x4>

08000e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f8b6 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <ADC1_IRQHandler+0x14>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 fce6 	bl	8001800 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000e34:	46c0      	nop			@ (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	20000028 	.word	0x20000028

08000e40 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <TIM16_IRQHandler+0x14>)
 8000e46:	0018      	movs	r0, r3
 8000e48:	f003 f82a 	bl	8003ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000e4c:	46c0      	nop			@ (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	20000150 	.word	0x20000150

08000e58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	46c0      	nop			@ (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e64:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e68:	f7ff fff6 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6e:	490d      	ldr	r1, [pc, #52]	@ (8000ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea8 <LoopForever+0xe>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	@ (8000eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e84:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb0 <LoopForever+0x16>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e92:	f003 fff7 	bl	8004e84 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e96:	f7ff fa3f 	bl	8000318 <main>

08000e9a <LoopForever>:

LoopForever:
  b LoopForever
 8000e9a:	e7fe      	b.n	8000e9a <LoopForever>
  ldr   r0, =_estack
 8000e9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ea8:	08004f80 	.word	0x08004f80
  ldr r2, =_sbss
 8000eac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000eb0:	200001b4 	.word	0x200001b4

08000eb4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_Init+0x3c>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_Init+0x3c>)
 8000eca:	2180      	movs	r1, #128	@ 0x80
 8000ecc:	0049      	lsls	r1, r1, #1
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 f810 	bl	8000ef8 <HAL_InitTick>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	2201      	movs	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	e001      	b.n	8000ee8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f7ff fe40 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	40022000 	.word	0x40022000

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f00:	230f      	movs	r3, #15
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f08:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <HAL_InitTick+0x88>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d02b      	beq.n	8000f68 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f10:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <HAL_InitTick+0x8c>)
 8000f12:	681c      	ldr	r4, [r3, #0]
 8000f14:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <HAL_InitTick+0x88>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	0019      	movs	r1, r3
 8000f1a:	23fa      	movs	r3, #250	@ 0xfa
 8000f1c:	0098      	lsls	r0, r3, #2
 8000f1e:	f7ff f8ef 	bl	8000100 <__udivsi3>
 8000f22:	0003      	movs	r3, r0
 8000f24:	0019      	movs	r1, r3
 8000f26:	0020      	movs	r0, r4
 8000f28:	f7ff f8ea 	bl	8000100 <__udivsi3>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f001 fad7 	bl	80024e2 <HAL_SYSTICK_Config>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d112      	bne.n	8000f5e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d80a      	bhi.n	8000f54 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	2301      	movs	r3, #1
 8000f42:	425b      	negs	r3, r3
 8000f44:	2200      	movs	r2, #0
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 faa6 	bl	8002498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_InitTick+0x90>)
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	e00d      	b.n	8000f70 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f54:	230f      	movs	r3, #15
 8000f56:	18fb      	adds	r3, r7, r3
 8000f58:	2201      	movs	r2, #1
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e008      	b.n	8000f70 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5e:	230f      	movs	r3, #15
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	2201      	movs	r2, #1
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	e003      	b.n	8000f70 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f68:	230f      	movs	r3, #15
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f70:	230f      	movs	r3, #15
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	781b      	ldrb	r3, [r3, #0]
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b005      	add	sp, #20
 8000f7c:	bd90      	pop	{r4, r7, pc}
 8000f7e:	46c0      	nop			@ (mov r8, r8)
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <HAL_IncTick+0x1c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	001a      	movs	r2, r3
 8000f96:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_IncTick+0x20>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	18d2      	adds	r2, r2, r3
 8000f9c:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <HAL_IncTick+0x20>)
 8000f9e:	601a      	str	r2, [r3, #0]
}
 8000fa0:	46c0      	nop			@ (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	20000008 	.word	0x20000008
 8000fac:	200001b0 	.word	0x200001b0

08000fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb4:	4b02      	ldr	r3, [pc, #8]	@ (8000fc0 <HAL_GetTick+0x10>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	200001b0 	.word	0x200001b0

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff fff0 	bl	8000fb0 <HAL_GetTick>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	189b      	adds	r3, r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	f7ff ffe0 	bl	8000fb0 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	46c0      	nop			@ (mov r8, r8)
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b004      	add	sp, #16
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	20000008 	.word	0x20000008

0800100c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800101c:	401a      	ands	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	b002      	add	sp, #8
 800102c:	bd80      	pop	{r7, pc}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	fe3fffff 	.word	0xfe3fffff

08001034 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	23e0      	movs	r3, #224	@ 0xe0
 8001042:	045b      	lsls	r3, r3, #17
 8001044:	4013      	ands	r3, r2
}
 8001046:	0018      	movs	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	b002      	add	sp, #8
 800104c:	bd80      	pop	{r7, pc}

0800104e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	60f8      	str	r0, [r7, #12]
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	2104      	movs	r1, #4
 8001062:	400a      	ands	r2, r1
 8001064:	2107      	movs	r1, #7
 8001066:	4091      	lsls	r1, r2
 8001068:	000a      	movs	r2, r1
 800106a:	43d2      	mvns	r2, r2
 800106c:	401a      	ands	r2, r3
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2104      	movs	r1, #4
 8001072:	400b      	ands	r3, r1
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4099      	lsls	r1, r3
 8001078:	000b      	movs	r3, r1
 800107a:	431a      	orrs	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001080:	46c0      	nop			@ (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b004      	add	sp, #16
 8001086:	bd80      	pop	{r7, pc}

08001088 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	2104      	movs	r1, #4
 800109a:	400a      	ands	r2, r1
 800109c:	2107      	movs	r1, #7
 800109e:	4091      	lsls	r1, r2
 80010a0:	000a      	movs	r2, r1
 80010a2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2104      	movs	r1, #4
 80010a8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010aa:	40da      	lsrs	r2, r3
 80010ac:	0013      	movs	r3, r2
}
 80010ae:	0018      	movs	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	23c0      	movs	r3, #192	@ 0xc0
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	4013      	ands	r3, r2
 80010c8:	d101      	bne.n	80010ce <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e000      	b.n	80010d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b002      	add	sp, #8
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	211f      	movs	r1, #31
 80010ec:	400a      	ands	r2, r1
 80010ee:	210f      	movs	r1, #15
 80010f0:	4091      	lsls	r1, r2
 80010f2:	000a      	movs	r2, r1
 80010f4:	43d2      	mvns	r2, r2
 80010f6:	401a      	ands	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	0e9b      	lsrs	r3, r3, #26
 80010fc:	210f      	movs	r1, #15
 80010fe:	4019      	ands	r1, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	201f      	movs	r0, #31
 8001104:	4003      	ands	r3, r0
 8001106:	4099      	lsls	r1, r3
 8001108:	000b      	movs	r3, r1
 800110a:	431a      	orrs	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001110:	46c0      	nop			@ (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b004      	add	sp, #16
 8001116:	bd80      	pop	{r7, pc}

08001118 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	035b      	lsls	r3, r3, #13
 800112a:	0b5b      	lsrs	r3, r3, #13
 800112c:	431a      	orrs	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}

0800113a <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	0352      	lsls	r2, r2, #13
 800114c:	0b52      	lsrs	r2, r2, #13
 800114e:	43d2      	mvns	r2, r2
 8001150:	401a      	ands	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b002      	add	sp, #8
 800115c:	bd80      	pop	{r7, pc}

0800115e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	2203      	movs	r2, #3
 800116c:	4013      	ands	r3, r2
}
 800116e:	0018      	movs	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	b002      	add	sp, #8
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	695b      	ldr	r3, [r3, #20]
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	0212      	lsls	r2, r2, #8
 800118c:	43d2      	mvns	r2, r2
 800118e:	401a      	ands	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	400b      	ands	r3, r1
 8001198:	4904      	ldr	r1, [pc, #16]	@ (80011ac <LL_ADC_SetChannelSamplingTime+0x34>)
 800119a:	400b      	ands	r3, r1
 800119c:	431a      	orrs	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b004      	add	sp, #16
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	07ffff00 	.word	0x07ffff00

080011b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80011be:	4013      	ands	r3, r2
 80011c0:	2280      	movs	r2, #128	@ 0x80
 80011c2:	0552      	lsls	r2, r2, #21
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b002      	add	sp, #8
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	6fffffe8 	.word	0x6fffffe8

080011d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	2380      	movs	r3, #128	@ 0x80
 80011e6:	055b      	lsls	r3, r3, #21
 80011e8:	401a      	ands	r2, r3
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	055b      	lsls	r3, r3, #21
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d101      	bne.n	80011f6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}

08001200 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <LL_ADC_Enable+0x20>)
 800120e:	4013      	ands	r3, r2
 8001210:	2201      	movs	r2, #1
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}
 8001220:	7fffffe8 	.word	0x7fffffe8

08001224 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <LL_ADC_Disable+0x20>)
 8001232:	4013      	ands	r3, r2
 8001234:	2202      	movs	r2, #2
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800123c:	46c0      	nop			@ (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}
 8001244:	7fffffe8 	.word	0x7fffffe8

08001248 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2201      	movs	r2, #1
 8001256:	4013      	ands	r3, r2
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <LL_ADC_IsEnabled+0x18>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <LL_ADC_IsEnabled+0x1a>
 8001260:	2300      	movs	r3, #0
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}

0800126a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2202      	movs	r2, #2
 8001278:	4013      	ands	r3, r2
 800127a:	2b02      	cmp	r3, #2
 800127c:	d101      	bne.n	8001282 <LL_ADC_IsDisableOngoing+0x18>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <LL_ADC_IsDisableOngoing+0x1a>
 8001282:	2300      	movs	r3, #0
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}

0800128c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <LL_ADC_REG_StartConversion+0x20>)
 800129a:	4013      	ands	r3, r2
 800129c:	2204      	movs	r2, #4
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012a4:	46c0      	nop			@ (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b002      	add	sp, #8
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	7fffffe8 	.word	0x7fffffe8

080012b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2204      	movs	r2, #4
 80012be:	4013      	ands	r3, r2
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d101      	bne.n	80012c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012dc:	231f      	movs	r3, #31
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e17f      	b.n	80015fa <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10a      	bne.n	8001318 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff fc53 	bl	8000bb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2254      	movs	r2, #84	@ 0x54
 8001314:	2100      	movs	r1, #0
 8001316:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0018      	movs	r0, r3
 800131e:	f7ff ff5b 	bl	80011d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d115      	bne.n	8001352 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0018      	movs	r0, r3
 800132c:	f7ff ff40 	bl	80011b0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001330:	4bb4      	ldr	r3, [pc, #720]	@ (8001604 <HAL_ADC_Init+0x330>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	49b4      	ldr	r1, [pc, #720]	@ (8001608 <HAL_ADC_Init+0x334>)
 8001336:	0018      	movs	r0, r3
 8001338:	f7fe fee2 	bl	8000100 <__udivsi3>
 800133c:	0003      	movs	r3, r0
 800133e:	3301      	adds	r3, #1
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001344:	e002      	b.n	800134c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3b01      	subs	r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff3e 	bl	80011d8 <LL_ADC_IsInternalRegulatorEnabled>
 800135c:	1e03      	subs	r3, r0, #0
 800135e:	d10f      	bne.n	8001380 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001364:	2210      	movs	r2, #16
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001370:	2201      	movs	r2, #1
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001378:	231f      	movs	r3, #31
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ff93 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 800138a:	0003      	movs	r3, r0
 800138c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001392:	2210      	movs	r2, #16
 8001394:	4013      	ands	r3, r2
 8001396:	d000      	beq.n	800139a <HAL_ADC_Init+0xc6>
 8001398:	e122      	b.n	80015e0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d000      	beq.n	80013a2 <HAL_ADC_Init+0xce>
 80013a0:	e11e      	b.n	80015e0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a6:	4a99      	ldr	r2, [pc, #612]	@ (800160c <HAL_ADC_Init+0x338>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	2202      	movs	r2, #2
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	0018      	movs	r0, r3
 80013b8:	f7ff ff46 	bl	8001248 <LL_ADC_IsEnabled>
 80013bc:	1e03      	subs	r3, r0, #0
 80013be:	d000      	beq.n	80013c2 <HAL_ADC_Init+0xee>
 80013c0:	e0ad      	b.n	800151e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7e1b      	ldrb	r3, [r3, #24]
 80013ca:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80013cc:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	7e5b      	ldrb	r3, [r3, #25]
 80013d2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80013d4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	7e9b      	ldrb	r3, [r3, #26]
 80013da:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80013dc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <HAL_ADC_Init+0x118>
 80013e6:	2380      	movs	r3, #128	@ 0x80
 80013e8:	015b      	lsls	r3, r3, #5
 80013ea:	e000      	b.n	80013ee <HAL_ADC_Init+0x11a>
 80013ec:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80013ee:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80013f4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	da04      	bge.n	8001408 <HAL_ADC_Init+0x134>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	085b      	lsrs	r3, r3, #1
 8001406:	e001      	b.n	800140c <HAL_ADC_Init+0x138>
 8001408:	2380      	movs	r3, #128	@ 0x80
 800140a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800140c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	212c      	movs	r1, #44	@ 0x2c
 8001412:	5c5b      	ldrb	r3, [r3, r1]
 8001414:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001416:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2220      	movs	r2, #32
 8001422:	5c9b      	ldrb	r3, [r3, r2]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d115      	bne.n	8001454 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7e9b      	ldrb	r3, [r3, #26]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d105      	bne.n	800143c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2280      	movs	r2, #128	@ 0x80
 8001434:	0252      	lsls	r2, r2, #9
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	e00b      	b.n	8001454 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001440:	2220      	movs	r2, #32
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144c:	2201      	movs	r2, #1
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00a      	beq.n	8001472 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001460:	23e0      	movs	r3, #224	@ 0xe0
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800146a:	4313      	orrs	r3, r2
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	4a65      	ldr	r2, [pc, #404]	@ (8001610 <HAL_ADC_Init+0x33c>)
 800147a:	4013      	ands	r3, r2
 800147c:	0019      	movs	r1, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	430a      	orrs	r2, r1
 8001486:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	0f9b      	lsrs	r3, r3, #30
 800148e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001494:	4313      	orrs	r3, r2
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4313      	orrs	r3, r2
 800149a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	223c      	movs	r2, #60	@ 0x3c
 80014a0:	5c9b      	ldrb	r3, [r3, r2]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d111      	bne.n	80014ca <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	0f9b      	lsrs	r3, r3, #30
 80014ac:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014b2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80014b8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80014be:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	2201      	movs	r2, #1
 80014c6:	4313      	orrs	r3, r2
 80014c8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	4a50      	ldr	r2, [pc, #320]	@ (8001614 <HAL_ADC_Init+0x340>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	0019      	movs	r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	430a      	orrs	r2, r1
 80014de:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	23c0      	movs	r3, #192	@ 0xc0
 80014e6:	061b      	lsls	r3, r3, #24
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d018      	beq.n	800151e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	05db      	lsls	r3, r3, #23
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d012      	beq.n	800151e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	061b      	lsls	r3, r3, #24
 8001500:	429a      	cmp	r2, r3
 8001502:	d00c      	beq.n	800151e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001504:	4b44      	ldr	r3, [pc, #272]	@ (8001618 <HAL_ADC_Init+0x344>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a44      	ldr	r2, [pc, #272]	@ (800161c <HAL_ADC_Init+0x348>)
 800150a:	4013      	ands	r3, r2
 800150c:	0019      	movs	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	23f0      	movs	r3, #240	@ 0xf0
 8001514:	039b      	lsls	r3, r3, #14
 8001516:	401a      	ands	r2, r3
 8001518:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <HAL_ADC_Init+0x344>)
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001526:	001a      	movs	r2, r3
 8001528:	2100      	movs	r1, #0
 800152a:	f7ff fd90 	bl	800104e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001536:	493a      	ldr	r1, [pc, #232]	@ (8001620 <HAL_ADC_Init+0x34c>)
 8001538:	001a      	movs	r2, r3
 800153a:	f7ff fd88 	bl	800104e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2110      	movs	r1, #16
 8001552:	4249      	negs	r1, r1
 8001554:	430a      	orrs	r2, r1
 8001556:	629a      	str	r2, [r3, #40]	@ 0x28
 8001558:	e018      	b.n	800158c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	2380      	movs	r3, #128	@ 0x80
 8001560:	039b      	lsls	r3, r3, #14
 8001562:	429a      	cmp	r2, r3
 8001564:	d112      	bne.n	800158c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	3b01      	subs	r3, #1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	221c      	movs	r2, #28
 8001576:	4013      	ands	r3, r2
 8001578:	2210      	movs	r2, #16
 800157a:	4252      	negs	r2, r2
 800157c:	409a      	lsls	r2, r3
 800157e:	0011      	movs	r1, r2
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2100      	movs	r1, #0
 8001592:	0018      	movs	r0, r3
 8001594:	f7ff fd78 	bl	8001088 <LL_ADC_GetSamplingTimeCommonChannels>
 8001598:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800159e:	429a      	cmp	r2, r3
 80015a0:	d10b      	bne.n	80015ba <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	2203      	movs	r2, #3
 80015ae:	4393      	bics	r3, r2
 80015b0:	2201      	movs	r2, #1
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015b8:	e01c      	b.n	80015f4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015be:	2212      	movs	r2, #18
 80015c0:	4393      	bics	r3, r2
 80015c2:	2210      	movs	r2, #16
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ce:	2201      	movs	r2, #1
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80015d6:	231f      	movs	r3, #31
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015de:	e009      	b.n	80015f4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	2210      	movs	r2, #16
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80015ec:	231f      	movs	r3, #31
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80015f4:	231f      	movs	r3, #31
 80015f6:	18fb      	adds	r3, r7, r3
 80015f8:	781b      	ldrb	r3, [r3, #0]
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b008      	add	sp, #32
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			@ (mov r8, r8)
 8001604:	20000000 	.word	0x20000000
 8001608:	00030d40 	.word	0x00030d40
 800160c:	fffffefd 	.word	0xfffffefd
 8001610:	ffde0201 	.word	0xffde0201
 8001614:	1ffffc02 	.word	0x1ffffc02
 8001618:	40012708 	.word	0x40012708
 800161c:	ffc3ffff 	.word	0xffc3ffff
 8001620:	07ffff04 	.word	0x07ffff04

08001624 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001624:	b5b0      	push	{r4, r5, r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff fe3d 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 8001636:	1e03      	subs	r3, r0, #0
 8001638:	d135      	bne.n	80016a6 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2254      	movs	r2, #84	@ 0x54
 800163e:	5c9b      	ldrb	r3, [r3, r2]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_ADC_Start+0x24>
 8001644:	2302      	movs	r3, #2
 8001646:	e035      	b.n	80016b4 <HAL_ADC_Start+0x90>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2254      	movs	r2, #84	@ 0x54
 800164c:	2101      	movs	r1, #1
 800164e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001650:	250f      	movs	r5, #15
 8001652:	197c      	adds	r4, r7, r5
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	0018      	movs	r0, r3
 8001658:	f000 fbda 	bl	8001e10 <ADC_Enable>
 800165c:	0003      	movs	r3, r0
 800165e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001660:	197b      	adds	r3, r7, r5
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d119      	bne.n	800169c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166c:	4a13      	ldr	r2, [pc, #76]	@ (80016bc <HAL_ADC_Start+0x98>)
 800166e:	4013      	ands	r3, r2
 8001670:	2280      	movs	r2, #128	@ 0x80
 8001672:	0052      	lsls	r2, r2, #1
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	221c      	movs	r2, #28
 8001686:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2254      	movs	r2, #84	@ 0x54
 800168c:	2100      	movs	r1, #0
 800168e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0018      	movs	r0, r3
 8001696:	f7ff fdf9 	bl	800128c <LL_ADC_REG_StartConversion>
 800169a:	e008      	b.n	80016ae <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2254      	movs	r2, #84	@ 0x54
 80016a0:	2100      	movs	r1, #0
 80016a2:	5499      	strb	r1, [r3, r2]
 80016a4:	e003      	b.n	80016ae <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016a6:	230f      	movs	r3, #15
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	2202      	movs	r2, #2
 80016ac:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80016ae:	230f      	movs	r3, #15
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	781b      	ldrb	r3, [r3, #0]
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b004      	add	sp, #16
 80016ba:	bdb0      	pop	{r4, r5, r7, pc}
 80016bc:	fffff0fe 	.word	0xfffff0fe

080016c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	2b08      	cmp	r3, #8
 80016d0:	d102      	bne.n	80016d8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80016d2:	2308      	movs	r3, #8
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	e00f      	b.n	80016f8 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2201      	movs	r2, #1
 80016e0:	4013      	ands	r3, r2
 80016e2:	d007      	beq.n	80016f4 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e8:	2220      	movs	r2, #32
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e072      	b.n	80017da <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80016f4:	2304      	movs	r3, #4
 80016f6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80016f8:	f7ff fc5a 	bl	8000fb0 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001700:	e01f      	b.n	8001742 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	d01c      	beq.n	8001742 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001708:	f7ff fc52 	bl	8000fb0 <HAL_GetTick>
 800170c:	0002      	movs	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d302      	bcc.n	800171e <HAL_ADC_PollForConversion+0x5e>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d111      	bne.n	8001742 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4013      	ands	r3, r2
 8001728:	d10b      	bne.n	8001742 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172e:	2204      	movs	r2, #4
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2254      	movs	r2, #84	@ 0x54
 800173a:	2100      	movs	r1, #0
 800173c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e04b      	b.n	80017da <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	d0d9      	beq.n	8001702 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001752:	2280      	movs	r2, #128	@ 0x80
 8001754:	0092      	lsls	r2, r2, #2
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	0018      	movs	r0, r3
 8001762:	f7ff fca8 	bl	80010b6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001766:	1e03      	subs	r3, r0, #0
 8001768:	d02e      	beq.n	80017c8 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7e9b      	ldrb	r3, [r3, #26]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d12a      	bne.n	80017c8 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2208      	movs	r2, #8
 800177a:	4013      	ands	r3, r2
 800177c:	2b08      	cmp	r3, #8
 800177e:	d123      	bne.n	80017c8 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff fd93 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 800178a:	1e03      	subs	r3, r0, #0
 800178c:	d110      	bne.n	80017b0 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	210c      	movs	r1, #12
 800179a:	438a      	bics	r2, r1
 800179c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a2:	4a10      	ldr	r2, [pc, #64]	@ (80017e4 <HAL_ADC_PollForConversion+0x124>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	2201      	movs	r2, #1
 80017a8:	431a      	orrs	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80017ae:	e00b      	b.n	80017c8 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b4:	2220      	movs	r2, #32
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c0:	2201      	movs	r2, #1
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7e1b      	ldrb	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d103      	bne.n	80017d8 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	220c      	movs	r2, #12
 80017d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	0018      	movs	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	b004      	add	sp, #16
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	fffffefe 	.word	0xfffffefe

080017e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80017f6:	0018      	movs	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d017      	beq.n	8001854 <HAL_ADC_IRQHandler+0x54>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2202      	movs	r2, #2
 8001828:	4013      	ands	r3, r2
 800182a:	d013      	beq.n	8001854 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	2210      	movs	r2, #16
 8001832:	4013      	ands	r3, r2
 8001834:	d106      	bne.n	8001844 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183a:	2280      	movs	r2, #128	@ 0x80
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	0018      	movs	r0, r3
 8001848:	f000 fd6a 	bl	8002320 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2202      	movs	r2, #2
 8001852:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2204      	movs	r2, #4
 8001858:	4013      	ands	r3, r2
 800185a:	d003      	beq.n	8001864 <HAL_ADC_IRQHandler+0x64>
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2204      	movs	r2, #4
 8001860:	4013      	ands	r3, r2
 8001862:	d107      	bne.n	8001874 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	2208      	movs	r2, #8
 8001868:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800186a:	d04d      	beq.n	8001908 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2208      	movs	r2, #8
 8001870:	4013      	ands	r3, r2
 8001872:	d049      	beq.n	8001908 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001878:	2210      	movs	r2, #16
 800187a:	4013      	ands	r3, r2
 800187c:	d106      	bne.n	800188c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	2280      	movs	r2, #128	@ 0x80
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	0018      	movs	r0, r3
 8001892:	f7ff fc10 	bl	80010b6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001896:	1e03      	subs	r3, r0, #0
 8001898:	d02e      	beq.n	80018f8 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7e9b      	ldrb	r3, [r3, #26]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d12a      	bne.n	80018f8 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2208      	movs	r2, #8
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d123      	bne.n	80018f8 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff fcfb 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d110      	bne.n	80018e0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	210c      	movs	r1, #12
 80018ca:	438a      	bics	r2, r1
 80018cc:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d2:	4a56      	ldr	r2, [pc, #344]	@ (8001a2c <HAL_ADC_IRQHandler+0x22c>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	2201      	movs	r2, #1
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80018de:	e00b      	b.n	80018f8 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e4:	2220      	movs	r2, #32
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f0:	2201      	movs	r2, #1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 f898 	bl	8001a30 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	220c      	movs	r2, #12
 8001906:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	2280      	movs	r2, #128	@ 0x80
 800190c:	4013      	ands	r3, r2
 800190e:	d012      	beq.n	8001936 <HAL_ADC_IRQHandler+0x136>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2280      	movs	r2, #128	@ 0x80
 8001914:	4013      	ands	r3, r2
 8001916:	d00e      	beq.n	8001936 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191c:	2280      	movs	r2, #128	@ 0x80
 800191e:	0252      	lsls	r2, r2, #9
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	0018      	movs	r0, r3
 800192a:	f000 f889 	bl	8001a40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2280      	movs	r2, #128	@ 0x80
 8001934:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	2380      	movs	r3, #128	@ 0x80
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4013      	ands	r3, r2
 800193e:	d014      	beq.n	800196a <HAL_ADC_IRQHandler+0x16a>
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	2380      	movs	r3, #128	@ 0x80
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4013      	ands	r3, r2
 8001948:	d00f      	beq.n	800196a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	2280      	movs	r2, #128	@ 0x80
 8001950:	0292      	lsls	r2, r2, #10
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	0018      	movs	r0, r3
 800195c:	f000 fcd0 	bl	8002300 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	0052      	lsls	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4013      	ands	r3, r2
 8001972:	d014      	beq.n	800199e <HAL_ADC_IRQHandler+0x19e>
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	2380      	movs	r3, #128	@ 0x80
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4013      	ands	r3, r2
 800197c:	d00f      	beq.n	800199e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001982:	2280      	movs	r2, #128	@ 0x80
 8001984:	02d2      	lsls	r2, r2, #11
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	0018      	movs	r0, r3
 8001990:	f000 fcbe 	bl	8002310 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2280      	movs	r2, #128	@ 0x80
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2210      	movs	r2, #16
 80019a2:	4013      	ands	r3, r2
 80019a4:	d02b      	beq.n	80019fe <HAL_ADC_IRQHandler+0x1fe>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2210      	movs	r2, #16
 80019aa:	4013      	ands	r3, r2
 80019ac:	d027      	beq.n	80019fe <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d102      	bne.n	80019bc <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80019b6:	2301      	movs	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e008      	b.n	80019ce <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff fbcc 	bl	800115e <LL_ADC_REG_GetDMATransfer>
 80019c6:	1e03      	subs	r3, r0, #0
 80019c8:	d001      	beq.n	80019ce <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80019ca:	2301      	movs	r3, #1
 80019cc:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d110      	bne.n	80019f6 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d8:	2280      	movs	r2, #128	@ 0x80
 80019da:	00d2      	lsls	r2, r2, #3
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e6:	2202      	movs	r2, #2
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f000 f82d 	bl	8001a50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2210      	movs	r2, #16
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	019b      	lsls	r3, r3, #6
 8001a04:	4013      	ands	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x224>
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	2380      	movs	r3, #128	@ 0x80
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d008      	beq.n	8001a24 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	0018      	movs	r0, r3
 8001a16:	f000 fc8b 	bl	8002330 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2280      	movs	r2, #128	@ 0x80
 8001a20:	0192      	lsls	r2, r2, #6
 8001a22:	601a      	str	r2, [r3, #0]
  }
}
 8001a24:	46c0      	nop			@ (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b006      	add	sp, #24
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	fffffefe 	.word	0xfffffefe

08001a30 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b002      	add	sp, #8
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a48:	46c0      	nop			@ (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b002      	add	sp, #8
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6a:	2317      	movs	r3, #23
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2254      	movs	r2, #84	@ 0x54
 8001a7a:	5c9b      	ldrb	r3, [r3, r2]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x24>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e1c0      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x3a6>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2254      	movs	r2, #84	@ 0x54
 8001a88:	2101      	movs	r1, #1
 8001a8a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff fc0d 	bl	80012b0 <LL_ADC_REG_IsConversionOngoing>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d000      	beq.n	8001a9c <HAL_ADC_ConfigChannel+0x3c>
 8001a9a:	e1a3      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d100      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x46>
 8001aa4:	e143      	b.n	8001d2e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	2380      	movs	r3, #128	@ 0x80
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d004      	beq.n	8001abc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ab6:	4ac1      	ldr	r2, [pc, #772]	@ (8001dbc <HAL_ADC_ConfigChannel+0x35c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d108      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	f7ff fb26 	bl	8001118 <LL_ADC_REG_SetSequencerChAdd>
 8001acc:	e0c9      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	211f      	movs	r1, #31
 8001ad8:	400b      	ands	r3, r1
 8001ada:	210f      	movs	r1, #15
 8001adc:	4099      	lsls	r1, r3
 8001ade:	000b      	movs	r3, r1
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	035b      	lsls	r3, r3, #13
 8001aec:	0b5b      	lsrs	r3, r3, #13
 8001aee:	d105      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x9c>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	221f      	movs	r2, #31
 8001af8:	4013      	ands	r3, r2
 8001afa:	e098      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	d000      	beq.n	8001b08 <HAL_ADC_ConfigChannel+0xa8>
 8001b06:	e091      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x1cc>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d000      	beq.n	8001b14 <HAL_ADC_ConfigChannel+0xb4>
 8001b12:	e089      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x1c8>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d000      	beq.n	8001b20 <HAL_ADC_ConfigChannel+0xc0>
 8001b1e:	e081      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x1c4>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2208      	movs	r2, #8
 8001b26:	4013      	ands	r3, r2
 8001b28:	d000      	beq.n	8001b2c <HAL_ADC_ConfigChannel+0xcc>
 8001b2a:	e079      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x1c0>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2210      	movs	r2, #16
 8001b32:	4013      	ands	r3, r2
 8001b34:	d000      	beq.n	8001b38 <HAL_ADC_ConfigChannel+0xd8>
 8001b36:	e071      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1bc>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d000      	beq.n	8001b44 <HAL_ADC_ConfigChannel+0xe4>
 8001b42:	e069      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x1b8>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2240      	movs	r2, #64	@ 0x40
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d000      	beq.n	8001b50 <HAL_ADC_ConfigChannel+0xf0>
 8001b4e:	e061      	b.n	8001c14 <HAL_ADC_ConfigChannel+0x1b4>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2280      	movs	r2, #128	@ 0x80
 8001b56:	4013      	ands	r3, r2
 8001b58:	d000      	beq.n	8001b5c <HAL_ADC_ConfigChannel+0xfc>
 8001b5a:	e059      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x1b0>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2380      	movs	r3, #128	@ 0x80
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	d151      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x1ac>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	@ 0x80
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	d149      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x1a8>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d141      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x1a4>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d139      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x1a0>
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	015b      	lsls	r3, r3, #5
 8001b94:	4013      	ands	r3, r2
 8001b96:	d131      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x19c>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	019b      	lsls	r3, r3, #6
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d129      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x198>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	01db      	lsls	r3, r3, #7
 8001bac:	4013      	ands	r3, r2
 8001bae:	d121      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x194>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	@ 0x80
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d119      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x190>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	025b      	lsls	r3, r3, #9
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d111      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x18c>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	029b      	lsls	r3, r3, #10
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d109      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x188>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	02db      	lsls	r3, r3, #11
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d001      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0x184>
 8001be0:	2312      	movs	r3, #18
 8001be2:	e024      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001be4:	2300      	movs	r3, #0
 8001be6:	e022      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001be8:	2311      	movs	r3, #17
 8001bea:	e020      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001bec:	2310      	movs	r3, #16
 8001bee:	e01e      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001bf0:	230f      	movs	r3, #15
 8001bf2:	e01c      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001bf4:	230e      	movs	r3, #14
 8001bf6:	e01a      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001bf8:	230d      	movs	r3, #13
 8001bfa:	e018      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001bfc:	230c      	movs	r3, #12
 8001bfe:	e016      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c00:	230b      	movs	r3, #11
 8001c02:	e014      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c04:	230a      	movs	r3, #10
 8001c06:	e012      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c08:	2309      	movs	r3, #9
 8001c0a:	e010      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	e00e      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c10:	2307      	movs	r3, #7
 8001c12:	e00c      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c14:	2306      	movs	r3, #6
 8001c16:	e00a      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c18:	2305      	movs	r3, #5
 8001c1a:	e008      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	e006      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c20:	2303      	movs	r3, #3
 8001c22:	e004      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e002      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x1ce>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	6852      	ldr	r2, [r2, #4]
 8001c32:	201f      	movs	r0, #31
 8001c34:	4002      	ands	r2, r0
 8001c36:	4093      	lsls	r3, r2
 8001c38:	000a      	movs	r2, r1
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d808      	bhi.n	8001c62 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6818      	ldr	r0, [r3, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	001a      	movs	r2, r3
 8001c5e:	f7ff fa3b 	bl	80010d8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	001a      	movs	r2, r3
 8001c70:	f7ff fa82 	bl	8001178 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db00      	blt.n	8001c7e <HAL_ADC_ConfigChannel+0x21e>
 8001c7c:	e0bc      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c7e:	4b50      	ldr	r3, [pc, #320]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x360>)
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff f9d7 	bl	8001034 <LL_ADC_GetCommonPathInternalCh>
 8001c86:	0003      	movs	r3, r0
 8001c88:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a4d      	ldr	r2, [pc, #308]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x364>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d122      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c9c:	d11d      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2280      	movs	r2, #128	@ 0x80
 8001ca2:	0412      	lsls	r2, r2, #16
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	4a46      	ldr	r2, [pc, #280]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x360>)
 8001ca8:	0019      	movs	r1, r3
 8001caa:	0010      	movs	r0, r2
 8001cac:	f7ff f9ae 	bl	800100c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cb0:	4b45      	ldr	r3, [pc, #276]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x368>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4945      	ldr	r1, [pc, #276]	@ (8001dcc <HAL_ADC_ConfigChannel+0x36c>)
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f7fe fa22 	bl	8000100 <__udivsi3>
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	189b      	adds	r3, r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cca:	e002      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f9      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cd8:	e08e      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x370>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d10e      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	2380      	movs	r3, #128	@ 0x80
 8001ce8:	045b      	lsls	r3, r3, #17
 8001cea:	4013      	ands	r3, r2
 8001cec:	d109      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2280      	movs	r2, #128	@ 0x80
 8001cf2:	0452      	lsls	r2, r2, #17
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	4a32      	ldr	r2, [pc, #200]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x360>)
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	0010      	movs	r0, r2
 8001cfc:	f7ff f986 	bl	800100c <LL_ADC_SetCommonPathInternalCh>
 8001d00:	e07a      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a33      	ldr	r2, [pc, #204]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x374>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d000      	beq.n	8001d0e <HAL_ADC_ConfigChannel+0x2ae>
 8001d0c:	e074      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	03db      	lsls	r3, r3, #15
 8001d14:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001d16:	d000      	beq.n	8001d1a <HAL_ADC_ConfigChannel+0x2ba>
 8001d18:	e06e      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2280      	movs	r2, #128	@ 0x80
 8001d1e:	03d2      	lsls	r2, r2, #15
 8001d20:	4313      	orrs	r3, r2
 8001d22:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x360>)
 8001d24:	0019      	movs	r1, r3
 8001d26:	0010      	movs	r0, r2
 8001d28:	f7ff f970 	bl	800100c <LL_ADC_SetCommonPathInternalCh>
 8001d2c:	e064      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d004      	beq.n	8001d44 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dbc <HAL_ADC_ConfigChannel+0x35c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d107      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	0010      	movs	r0, r2
 8001d50:	f7ff f9f3 	bl	800113a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	da4d      	bge.n	8001df8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d5c:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x360>)
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7ff f968 	bl	8001034 <LL_ADC_GetCommonPathInternalCh>
 8001d64:	0003      	movs	r3, r0
 8001d66:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a15      	ldr	r2, [pc, #84]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x364>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d108      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4a18      	ldr	r2, [pc, #96]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x378>)
 8001d76:	4013      	ands	r3, r2
 8001d78:	4a11      	ldr	r2, [pc, #68]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x360>)
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	0010      	movs	r0, r2
 8001d7e:	f7ff f945 	bl	800100c <LL_ADC_SetCommonPathInternalCh>
 8001d82:	e039      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x370>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4a12      	ldr	r2, [pc, #72]	@ (8001ddc <HAL_ADC_ConfigChannel+0x37c>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x360>)
 8001d96:	0019      	movs	r1, r3
 8001d98:	0010      	movs	r0, r2
 8001d9a:	f7ff f937 	bl	800100c <LL_ADC_SetCommonPathInternalCh>
 8001d9e:	e02b      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x374>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d126      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4a0c      	ldr	r2, [pc, #48]	@ (8001de0 <HAL_ADC_ConfigChannel+0x380>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	4a03      	ldr	r2, [pc, #12]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x360>)
 8001db2:	0019      	movs	r1, r3
 8001db4:	0010      	movs	r0, r2
 8001db6:	f7ff f929 	bl	800100c <LL_ADC_SetCommonPathInternalCh>
 8001dba:	e01d      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x398>
 8001dbc:	80000004 	.word	0x80000004
 8001dc0:	40012708 	.word	0x40012708
 8001dc4:	b0001000 	.word	0xb0001000
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	00030d40 	.word	0x00030d40
 8001dd0:	b8004000 	.word	0xb8004000
 8001dd4:	b4002000 	.word	0xb4002000
 8001dd8:	ff7fffff 	.word	0xff7fffff
 8001ddc:	feffffff 	.word	0xfeffffff
 8001de0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	2220      	movs	r2, #32
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001df0:	2317      	movs	r3, #23
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2254      	movs	r2, #84	@ 0x54
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001e00:	2317      	movs	r3, #23
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	781b      	ldrb	r3, [r3, #0]
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b006      	add	sp, #24
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)

08001e10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7ff fa11 	bl	8001248 <LL_ADC_IsEnabled>
 8001e26:	1e03      	subs	r3, r0, #0
 8001e28:	d000      	beq.n	8001e2c <ADC_Enable+0x1c>
 8001e2a:	e069      	b.n	8001f00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4a36      	ldr	r2, [pc, #216]	@ (8001f0c <ADC_Enable+0xfc>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	d00d      	beq.n	8001e54 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	2210      	movs	r2, #16
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e48:	2201      	movs	r2, #1
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e056      	b.n	8001f02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f7ff f9d1 	bl	8001200 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f10 <ADC_Enable+0x100>)
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7ff f8e7 	bl	8001034 <LL_ADC_GetCommonPathInternalCh>
 8001e66:	0002      	movs	r2, r0
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	041b      	lsls	r3, r3, #16
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d00f      	beq.n	8001e90 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e70:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <ADC_Enable+0x104>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4928      	ldr	r1, [pc, #160]	@ (8001f18 <ADC_Enable+0x108>)
 8001e76:	0018      	movs	r0, r3
 8001e78:	f7fe f942 	bl	8000100 <__udivsi3>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001e80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e82:	e002      	b.n	8001e8a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f9      	bne.n	8001e84 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7e5b      	ldrb	r3, [r3, #25]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d033      	beq.n	8001f00 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001e98:	f7ff f88a 	bl	8000fb0 <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ea0:	e027      	b.n	8001ef2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7ff f9ce 	bl	8001248 <LL_ADC_IsEnabled>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d104      	bne.n	8001eba <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff f9a3 	bl	8001200 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001eba:	f7ff f879 	bl	8000fb0 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d914      	bls.n	8001ef2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d00d      	beq.n	8001ef2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	2210      	movs	r2, #16
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e007      	b.n	8001f02 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d1d0      	bne.n	8001ea2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b004      	add	sp, #16
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	80000017 	.word	0x80000017
 8001f10:	40012708 	.word	0x40012708
 8001f14:	20000000 	.word	0x20000000
 8001f18:	00030d40 	.word	0x00030d40

08001f1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7ff f99e 	bl	800126a <LL_ADC_IsDisableOngoing>
 8001f2e:	0003      	movs	r3, r0
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7ff f986 	bl	8001248 <LL_ADC_IsEnabled>
 8001f3c:	1e03      	subs	r3, r0, #0
 8001f3e:	d046      	beq.n	8001fce <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d143      	bne.n	8001fce <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2205      	movs	r2, #5
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d10d      	bne.n	8001f70 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff f963 	bl	8001224 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2203      	movs	r2, #3
 8001f64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f66:	f7ff f823 	bl	8000fb0 <HAL_GetTick>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f6e:	e028      	b.n	8001fc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	2210      	movs	r2, #16
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	2201      	movs	r2, #1
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e021      	b.n	8001fd0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f8c:	f7ff f810 	bl	8000fb0 <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d913      	bls.n	8001fc2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	2210      	movs	r2, #16
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e006      	b.n	8001fd0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d1de      	bne.n	8001f8c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b004      	add	sp, #16
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <LL_ADC_GetCommonClock>:
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	23f0      	movs	r3, #240	@ 0xf0
 8001fe6:	039b      	lsls	r3, r3, #14
 8001fe8:	4013      	ands	r3, r2
}
 8001fea:	0018      	movs	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b002      	add	sp, #8
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <LL_ADC_GetClock>:
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	0f9b      	lsrs	r3, r3, #30
 8002000:	079b      	lsls	r3, r3, #30
}
 8002002:	0018      	movs	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	b002      	add	sp, #8
 8002008:	bd80      	pop	{r7, pc}

0800200a <LL_ADC_SetCalibrationFactor>:
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	22b4      	movs	r2, #180	@ 0xb4
 8002018:	589b      	ldr	r3, [r3, r2]
 800201a:	227f      	movs	r2, #127	@ 0x7f
 800201c:	4393      	bics	r3, r2
 800201e:	001a      	movs	r2, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	21b4      	movs	r1, #180	@ 0xb4
 8002028:	505a      	str	r2, [r3, r1]
}
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	46bd      	mov	sp, r7
 800202e:	b002      	add	sp, #8
 8002030:	bd80      	pop	{r7, pc}

08002032 <LL_ADC_GetCalibrationFactor>:
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	22b4      	movs	r2, #180	@ 0xb4
 800203e:	589b      	ldr	r3, [r3, r2]
 8002040:	227f      	movs	r2, #127	@ 0x7f
 8002042:	4013      	ands	r3, r2
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}

0800204c <LL_ADC_Enable>:
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <LL_ADC_Enable+0x20>)
 800205a:	4013      	ands	r3, r2
 800205c:	2201      	movs	r2, #1
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	609a      	str	r2, [r3, #8]
}
 8002064:	46c0      	nop			@ (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}
 800206c:	7fffffe8 	.word	0x7fffffe8

08002070 <LL_ADC_Disable>:
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <LL_ADC_Disable+0x20>)
 800207e:	4013      	ands	r3, r2
 8002080:	2202      	movs	r2, #2
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	609a      	str	r2, [r3, #8]
}
 8002088:	46c0      	nop			@ (mov r8, r8)
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}
 8002090:	7fffffe8 	.word	0x7fffffe8

08002094 <LL_ADC_IsEnabled>:
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2201      	movs	r2, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <LL_ADC_IsEnabled+0x18>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <LL_ADC_IsEnabled+0x1a>
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b002      	add	sp, #8
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <LL_ADC_StartCalibration>:
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <LL_ADC_StartCalibration+0x24>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	2280      	movs	r2, #128	@ 0x80
 80020ca:	0612      	lsls	r2, r2, #24
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	609a      	str	r2, [r3, #8]
}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	7fffffe8 	.word	0x7fffffe8

080020e0 <LL_ADC_IsCalibrationOnGoing>:
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	0fdb      	lsrs	r3, r3, #31
 80020ee:	07da      	lsls	r2, r3, #31
 80020f0:	2380      	movs	r3, #128	@ 0x80
 80020f2:	061b      	lsls	r3, r3, #24
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d101      	bne.n	80020fc <LL_ADC_IsCalibrationOnGoing+0x1c>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <LL_ADC_IsCalibrationOnGoing+0x1e>
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b002      	add	sp, #8
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b08b      	sub	sp, #44	@ 0x2c
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2254      	movs	r2, #84	@ 0x54
 800211c:	5c9b      	ldrb	r3, [r3, r2]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_ADCEx_Calibration_Start+0x1e>
 8002122:	2302      	movs	r3, #2
 8002124:	e0dd      	b.n	80022e2 <HAL_ADCEx_Calibration_Start+0x1da>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2254      	movs	r2, #84	@ 0x54
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800212e:	231f      	movs	r3, #31
 8002130:	18fc      	adds	r4, r7, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0018      	movs	r0, r3
 8002136:	f7ff fef1 	bl	8001f1c <ADC_Disable>
 800213a:	0003      	movs	r3, r0
 800213c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	0018      	movs	r0, r3
 8002144:	f7ff ffa6 	bl	8002094 <LL_ADC_IsEnabled>
 8002148:	1e03      	subs	r3, r0, #0
 800214a:	d000      	beq.n	800214e <HAL_ADCEx_Calibration_Start+0x46>
 800214c:	e0bc      	b.n	80022c8 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	4a66      	ldr	r2, [pc, #408]	@ (80022ec <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002154:	4013      	ands	r3, r2
 8002156:	2202      	movs	r2, #2
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a62      	ldr	r2, [pc, #392]	@ (80022f0 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	495f      	ldr	r1, [pc, #380]	@ (80022f4 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002176:	400a      	ands	r2, r1
 8002178:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
 800217e:	e02d      	b.n	80021dc <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0018      	movs	r0, r3
 8002186:	f7ff ff97 	bl	80020b8 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800218a:	e014      	b.n	80021b6 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3301      	adds	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4a58      	ldr	r2, [pc, #352]	@ (80022f8 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d90d      	bls.n	80021b6 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219e:	2212      	movs	r2, #18
 80021a0:	4393      	bics	r3, r2
 80021a2:	2210      	movs	r2, #16
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2254      	movs	r2, #84	@ 0x54
 80021ae:	2100      	movs	r1, #0
 80021b0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e095      	b.n	80022e2 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff ff90 	bl	80020e0 <LL_ADC_IsCalibrationOnGoing>
 80021c0:	1e03      	subs	r3, r0, #0
 80021c2:	d1e3      	bne.n	800218c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f7ff ff32 	bl	8002032 <LL_ADC_GetCalibrationFactor>
 80021ce:	0002      	movs	r2, r0
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	189b      	adds	r3, r3, r2
 80021d4:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	3301      	adds	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	2b07      	cmp	r3, #7
 80021e0:	d9ce      	bls.n	8002180 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80021e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021e4:	6a38      	ldr	r0, [r7, #32]
 80021e6:	f7fd ff8b 	bl	8000100 <__udivsi3>
 80021ea:	0003      	movs	r3, r0
 80021ec:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff ff2a 	bl	800204c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff fef8 	bl	8001ff2 <LL_ADC_GetClock>
 8002202:	1e03      	subs	r3, r0, #0
 8002204:	d11b      	bne.n	800223e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002206:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <HAL_ADCEx_Calibration_Start+0x1f4>)
 8002208:	0018      	movs	r0, r3
 800220a:	f7ff fee5 	bl	8001fd8 <LL_ADC_GetCommonClock>
 800220e:	0003      	movs	r3, r0
 8002210:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	23e0      	movs	r3, #224	@ 0xe0
 8002216:	035b      	lsls	r3, r3, #13
 8002218:	429a      	cmp	r2, r3
 800221a:	d310      	bcc.n	800223e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	0c9b      	lsrs	r3, r3, #18
 8002220:	3b03      	subs	r3, #3
 8002222:	2201      	movs	r2, #1
 8002224:	409a      	lsls	r2, r3
 8002226:	0013      	movs	r3, r2
 8002228:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8002230:	e002      	b.n	8002238 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3b01      	subs	r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f9      	bne.n	8002232 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a3a      	ldr	r2, [r7, #32]
 8002244:	0011      	movs	r1, r2
 8002246:	0018      	movs	r0, r3
 8002248:	f7ff fedf 	bl	800200a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0018      	movs	r0, r3
 8002252:	f7ff ff0d 	bl	8002070 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002256:	f7fe feab 	bl	8000fb0 <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800225e:	e01b      	b.n	8002298 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002260:	f7fe fea6 	bl	8000fb0 <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d914      	bls.n	8002298 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0018      	movs	r0, r3
 8002274:	f7ff ff0e 	bl	8002094 <LL_ADC_IsEnabled>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d00d      	beq.n	8002298 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002280:	2210      	movs	r2, #16
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228c:	2201      	movs	r2, #1
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e024      	b.n	80022e2 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0018      	movs	r0, r3
 800229e:	f7ff fef9 	bl	8002094 <LL_ADC_IsEnabled>
 80022a2:	1e03      	subs	r3, r0, #0
 80022a4:	d1dc      	bne.n	8002260 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68d9      	ldr	r1, [r3, #12]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	2203      	movs	r2, #3
 80022bc:	4393      	bics	r3, r2
 80022be:	2201      	movs	r2, #1
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80022c6:	e005      	b.n	80022d4 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022cc:	2210      	movs	r2, #16
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2254      	movs	r2, #84	@ 0x54
 80022d8:	2100      	movs	r1, #0
 80022da:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80022dc:	231f      	movs	r3, #31
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	781b      	ldrb	r3, [r3, #0]
}
 80022e2:	0018      	movs	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	b00b      	add	sp, #44	@ 0x2c
 80022e8:	bd90      	pop	{r4, r7, pc}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	fffffefd 	.word	0xfffffefd
 80022f0:	00008003 	.word	0x00008003
 80022f4:	ffff7ffc 	.word	0xffff7ffc
 80022f8:	0002f1ff 	.word	0x0002f1ff
 80022fc:	40012708 	.word	0x40012708

08002300 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002308:	46c0      	nop			@ (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002318:	46c0      	nop			@ (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b002      	add	sp, #8
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002328:	46c0      	nop			@ (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002338:	46c0      	nop			@ (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b002      	add	sp, #8
 800233e:	bd80      	pop	{r7, pc}

08002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	0002      	movs	r2, r0
 8002348:	1dfb      	adds	r3, r7, #7
 800234a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b7f      	cmp	r3, #127	@ 0x7f
 8002352:	d809      	bhi.n	8002368 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002354:	1dfb      	adds	r3, r7, #7
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	001a      	movs	r2, r3
 800235a:	231f      	movs	r3, #31
 800235c:	401a      	ands	r2, r3
 800235e:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <__NVIC_EnableIRQ+0x30>)
 8002360:	2101      	movs	r1, #1
 8002362:	4091      	lsls	r1, r2
 8002364:	000a      	movs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002368:	46c0      	nop			@ (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}
 8002370:	e000e100 	.word	0xe000e100

08002374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	0002      	movs	r2, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	1dfb      	adds	r3, r7, #7
 8002380:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002382:	1dfb      	adds	r3, r7, #7
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b7f      	cmp	r3, #127	@ 0x7f
 8002388:	d828      	bhi.n	80023dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800238a:	4a2f      	ldr	r2, [pc, #188]	@ (8002448 <__NVIC_SetPriority+0xd4>)
 800238c:	1dfb      	adds	r3, r7, #7
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	b25b      	sxtb	r3, r3
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	33c0      	adds	r3, #192	@ 0xc0
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	589b      	ldr	r3, [r3, r2]
 800239a:	1dfa      	adds	r2, r7, #7
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	0011      	movs	r1, r2
 80023a0:	2203      	movs	r2, #3
 80023a2:	400a      	ands	r2, r1
 80023a4:	00d2      	lsls	r2, r2, #3
 80023a6:	21ff      	movs	r1, #255	@ 0xff
 80023a8:	4091      	lsls	r1, r2
 80023aa:	000a      	movs	r2, r1
 80023ac:	43d2      	mvns	r2, r2
 80023ae:	401a      	ands	r2, r3
 80023b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	019b      	lsls	r3, r3, #6
 80023b6:	22ff      	movs	r2, #255	@ 0xff
 80023b8:	401a      	ands	r2, r3
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	0018      	movs	r0, r3
 80023c0:	2303      	movs	r3, #3
 80023c2:	4003      	ands	r3, r0
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c8:	481f      	ldr	r0, [pc, #124]	@ (8002448 <__NVIC_SetPriority+0xd4>)
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b25b      	sxtb	r3, r3
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	430a      	orrs	r2, r1
 80023d4:	33c0      	adds	r3, #192	@ 0xc0
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023da:	e031      	b.n	8002440 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023dc:	4a1b      	ldr	r2, [pc, #108]	@ (800244c <__NVIC_SetPriority+0xd8>)
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	0019      	movs	r1, r3
 80023e4:	230f      	movs	r3, #15
 80023e6:	400b      	ands	r3, r1
 80023e8:	3b08      	subs	r3, #8
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	3306      	adds	r3, #6
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	18d3      	adds	r3, r2, r3
 80023f2:	3304      	adds	r3, #4
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	1dfa      	adds	r2, r7, #7
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	0011      	movs	r1, r2
 80023fc:	2203      	movs	r2, #3
 80023fe:	400a      	ands	r2, r1
 8002400:	00d2      	lsls	r2, r2, #3
 8002402:	21ff      	movs	r1, #255	@ 0xff
 8002404:	4091      	lsls	r1, r2
 8002406:	000a      	movs	r2, r1
 8002408:	43d2      	mvns	r2, r2
 800240a:	401a      	ands	r2, r3
 800240c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	019b      	lsls	r3, r3, #6
 8002412:	22ff      	movs	r2, #255	@ 0xff
 8002414:	401a      	ands	r2, r3
 8002416:	1dfb      	adds	r3, r7, #7
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	0018      	movs	r0, r3
 800241c:	2303      	movs	r3, #3
 800241e:	4003      	ands	r3, r0
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002424:	4809      	ldr	r0, [pc, #36]	@ (800244c <__NVIC_SetPriority+0xd8>)
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	001c      	movs	r4, r3
 800242c:	230f      	movs	r3, #15
 800242e:	4023      	ands	r3, r4
 8002430:	3b08      	subs	r3, #8
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	430a      	orrs	r2, r1
 8002436:	3306      	adds	r3, #6
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	18c3      	adds	r3, r0, r3
 800243c:	3304      	adds	r3, #4
 800243e:	601a      	str	r2, [r3, #0]
}
 8002440:	46c0      	nop			@ (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b003      	add	sp, #12
 8002446:	bd90      	pop	{r4, r7, pc}
 8002448:	e000e100 	.word	0xe000e100
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1e5a      	subs	r2, r3, #1
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	045b      	lsls	r3, r3, #17
 8002460:	429a      	cmp	r2, r3
 8002462:	d301      	bcc.n	8002468 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002464:	2301      	movs	r3, #1
 8002466:	e010      	b.n	800248a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002468:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <SysTick_Config+0x44>)
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	3a01      	subs	r2, #1
 800246e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002470:	2301      	movs	r3, #1
 8002472:	425b      	negs	r3, r3
 8002474:	2103      	movs	r1, #3
 8002476:	0018      	movs	r0, r3
 8002478:	f7ff ff7c 	bl	8002374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800247c:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <SysTick_Config+0x44>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002482:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <SysTick_Config+0x44>)
 8002484:	2207      	movs	r2, #7
 8002486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002488:	2300      	movs	r3, #0
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	e000e010 	.word	0xe000e010

08002498 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
 80024a2:	210f      	movs	r1, #15
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	1c02      	adds	r2, r0, #0
 80024a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b25b      	sxtb	r3, r3
 80024b2:	0011      	movs	r1, r2
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff ff5d 	bl	8002374 <__NVIC_SetPriority>
}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b004      	add	sp, #16
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	0002      	movs	r2, r0
 80024ca:	1dfb      	adds	r3, r7, #7
 80024cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ce:	1dfb      	adds	r3, r7, #7
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	b25b      	sxtb	r3, r3
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff ff33 	bl	8002340 <__NVIC_EnableIRQ>
}
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7ff ffaf 	bl	8002450 <SysTick_Config>
 80024f2:	0003      	movs	r3, r0
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b002      	add	sp, #8
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250a:	e147      	b.n	800279c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4091      	lsls	r1, r2
 8002516:	000a      	movs	r2, r1
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d100      	bne.n	8002524 <HAL_GPIO_Init+0x28>
 8002522:	e138      	b.n	8002796 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2203      	movs	r2, #3
 800252a:	4013      	ands	r3, r2
 800252c:	2b01      	cmp	r3, #1
 800252e:	d005      	beq.n	800253c <HAL_GPIO_Init+0x40>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	4013      	ands	r3, r2
 8002538:	2b02      	cmp	r3, #2
 800253a:	d130      	bne.n	800259e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	409a      	lsls	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	43da      	mvns	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	409a      	lsls	r2, r3
 800255e:	0013      	movs	r3, r2
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002572:	2201      	movs	r2, #1
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	43da      	mvns	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	2201      	movs	r2, #1
 800258a:	401a      	ands	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	409a      	lsls	r2, r3
 8002590:	0013      	movs	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2203      	movs	r2, #3
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d017      	beq.n	80025da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	2203      	movs	r2, #3
 80025b6:	409a      	lsls	r2, r3
 80025b8:	0013      	movs	r3, r2
 80025ba:	43da      	mvns	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	409a      	lsls	r2, r3
 80025cc:	0013      	movs	r3, r2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2203      	movs	r2, #3
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d123      	bne.n	800262e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3208      	adds	r2, #8
 80025ee:	0092      	lsls	r2, r2, #2
 80025f0:	58d3      	ldr	r3, [r2, r3]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2207      	movs	r2, #7
 80025f8:	4013      	ands	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	409a      	lsls	r2, r3
 8002600:	0013      	movs	r3, r2
 8002602:	43da      	mvns	r2, r3
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2107      	movs	r1, #7
 8002612:	400b      	ands	r3, r1
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	409a      	lsls	r2, r3
 8002618:	0013      	movs	r3, r2
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	08da      	lsrs	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3208      	adds	r2, #8
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	6939      	ldr	r1, [r7, #16]
 800262c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	2203      	movs	r2, #3
 800263a:	409a      	lsls	r2, r3
 800263c:	0013      	movs	r3, r2
 800263e:	43da      	mvns	r2, r3
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2203      	movs	r2, #3
 800264c:	401a      	ands	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	409a      	lsls	r2, r3
 8002654:	0013      	movs	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	23c0      	movs	r3, #192	@ 0xc0
 8002668:	029b      	lsls	r3, r3, #10
 800266a:	4013      	ands	r3, r2
 800266c:	d100      	bne.n	8002670 <HAL_GPIO_Init+0x174>
 800266e:	e092      	b.n	8002796 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002670:	4a50      	ldr	r2, [pc, #320]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	3318      	adds	r3, #24
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	589b      	ldr	r3, [r3, r2]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2203      	movs	r2, #3
 8002682:	4013      	ands	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	220f      	movs	r2, #15
 8002688:	409a      	lsls	r2, r3
 800268a:	0013      	movs	r3, r2
 800268c:	43da      	mvns	r2, r3
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4013      	ands	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	23a0      	movs	r3, #160	@ 0xa0
 8002698:	05db      	lsls	r3, r3, #23
 800269a:	429a      	cmp	r2, r3
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0x1ca>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a45      	ldr	r2, [pc, #276]	@ (80027b8 <HAL_GPIO_Init+0x2bc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00d      	beq.n	80026c2 <HAL_GPIO_Init+0x1c6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a44      	ldr	r2, [pc, #272]	@ (80027bc <HAL_GPIO_Init+0x2c0>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d007      	beq.n	80026be <HAL_GPIO_Init+0x1c2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a43      	ldr	r2, [pc, #268]	@ (80027c0 <HAL_GPIO_Init+0x2c4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_GPIO_Init+0x1be>
 80026b6:	2303      	movs	r3, #3
 80026b8:	e006      	b.n	80026c8 <HAL_GPIO_Init+0x1cc>
 80026ba:	2305      	movs	r3, #5
 80026bc:	e004      	b.n	80026c8 <HAL_GPIO_Init+0x1cc>
 80026be:	2302      	movs	r3, #2
 80026c0:	e002      	b.n	80026c8 <HAL_GPIO_Init+0x1cc>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x1cc>
 80026c6:	2300      	movs	r3, #0
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	2103      	movs	r1, #3
 80026cc:	400a      	ands	r2, r1
 80026ce:	00d2      	lsls	r2, r2, #3
 80026d0:	4093      	lsls	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80026d8:	4936      	ldr	r1, [pc, #216]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3318      	adds	r3, #24
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026e6:	4b33      	ldr	r3, [pc, #204]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	43da      	mvns	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	2380      	movs	r3, #128	@ 0x80
 80026fc:	035b      	lsls	r3, r3, #13
 80026fe:	4013      	ands	r3, r2
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800270a:	4b2a      	ldr	r3, [pc, #168]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002710:	4b28      	ldr	r3, [pc, #160]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	43da      	mvns	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	2380      	movs	r3, #128	@ 0x80
 8002726:	039b      	lsls	r3, r3, #14
 8002728:	4013      	ands	r3, r2
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002734:	4b1f      	ldr	r3, [pc, #124]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800273a:	4a1e      	ldr	r2, [pc, #120]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 800273c:	2384      	movs	r3, #132	@ 0x84
 800273e:	58d3      	ldr	r3, [r2, r3]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	43da      	mvns	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	2380      	movs	r3, #128	@ 0x80
 8002752:	029b      	lsls	r3, r3, #10
 8002754:	4013      	ands	r3, r2
 8002756:	d003      	beq.n	8002760 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002760:	4914      	ldr	r1, [pc, #80]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 8002762:	2284      	movs	r2, #132	@ 0x84
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002768:	4a12      	ldr	r2, [pc, #72]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	58d3      	ldr	r3, [r2, r3]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43da      	mvns	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	025b      	lsls	r3, r3, #9
 8002782:	4013      	ands	r3, r2
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800278e:	4909      	ldr	r1, [pc, #36]	@ (80027b4 <HAL_GPIO_Init+0x2b8>)
 8002790:	2280      	movs	r2, #128	@ 0x80
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	3301      	adds	r3, #1
 800279a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	40da      	lsrs	r2, r3
 80027a4:	1e13      	subs	r3, r2, #0
 80027a6:	d000      	beq.n	80027aa <HAL_GPIO_Init+0x2ae>
 80027a8:	e6b0      	b.n	800250c <HAL_GPIO_Init+0x10>
  }
}
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	46c0      	nop			@ (mov r8, r8)
 80027ae:	46bd      	mov	sp, r7
 80027b0:	b006      	add	sp, #24
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021800 	.word	0x40021800
 80027b8:	50000400 	.word	0x50000400
 80027bc:	50000800 	.word	0x50000800
 80027c0:	50000c00 	.word	0x50000c00

080027c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	0008      	movs	r0, r1
 80027ce:	0011      	movs	r1, r2
 80027d0:	1cbb      	adds	r3, r7, #2
 80027d2:	1c02      	adds	r2, r0, #0
 80027d4:	801a      	strh	r2, [r3, #0]
 80027d6:	1c7b      	adds	r3, r7, #1
 80027d8:	1c0a      	adds	r2, r1, #0
 80027da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027dc:	1c7b      	adds	r3, r7, #1
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027e4:	1cbb      	adds	r3, r7, #2
 80027e6:	881a      	ldrh	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027ec:	e003      	b.n	80027f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ee:	1cbb      	adds	r3, r7, #2
 80027f0:	881a      	ldrh	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b002      	add	sp, #8
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002804:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_PWR_EnableBkUpAccess+0x18>)
 800280a:	2180      	movs	r1, #128	@ 0x80
 800280c:	0049      	lsls	r1, r1, #1
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]
}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40007000 	.word	0x40007000

0800281c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002824:	4b19      	ldr	r3, [pc, #100]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a19      	ldr	r2, [pc, #100]	@ (8002890 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	4b17      	ldr	r3, [pc, #92]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d11f      	bne.n	8002880 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002840:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	0013      	movs	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	189b      	adds	r3, r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4912      	ldr	r1, [pc, #72]	@ (8002898 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800284e:	0018      	movs	r0, r3
 8002850:	f7fd fc56 	bl	8000100 <__udivsi3>
 8002854:	0003      	movs	r3, r0
 8002856:	3301      	adds	r3, #1
 8002858:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800285a:	e008      	b.n	800286e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	3b01      	subs	r3, #1
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e001      	b.n	800286e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e009      	b.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800286e:	4b07      	ldr	r3, [pc, #28]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002870:	695a      	ldr	r2, [r3, #20]
 8002872:	2380      	movs	r3, #128	@ 0x80
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	401a      	ands	r2, r3
 8002878:	2380      	movs	r3, #128	@ 0x80
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	429a      	cmp	r2, r3
 800287e:	d0ed      	beq.n	800285c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b004      	add	sp, #16
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			@ (mov r8, r8)
 800288c:	40007000 	.word	0x40007000
 8002890:	fffff9ff 	.word	0xfffff9ff
 8002894:	20000000 	.word	0x20000000
 8002898:	000f4240 	.word	0x000f4240

0800289c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e2f3      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2201      	movs	r2, #1
 80028b4:	4013      	ands	r3, r2
 80028b6:	d100      	bne.n	80028ba <HAL_RCC_OscConfig+0x1e>
 80028b8:	e07c      	b.n	80029b4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ba:	4bc3      	ldr	r3, [pc, #780]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2238      	movs	r2, #56	@ 0x38
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c4:	4bc0      	ldr	r3, [pc, #768]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2203      	movs	r2, #3
 80028ca:	4013      	ands	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d102      	bne.n	80028da <HAL_RCC_OscConfig+0x3e>
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d10b      	bne.n	80028f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	4bb9      	ldr	r3, [pc, #740]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	029b      	lsls	r3, r3, #10
 80028e8:	4013      	ands	r3, r2
 80028ea:	d062      	beq.n	80029b2 <HAL_RCC_OscConfig+0x116>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d15e      	bne.n	80029b2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e2ce      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	2380      	movs	r3, #128	@ 0x80
 80028fe:	025b      	lsls	r3, r3, #9
 8002900:	429a      	cmp	r2, r3
 8002902:	d107      	bne.n	8002914 <HAL_RCC_OscConfig+0x78>
 8002904:	4bb0      	ldr	r3, [pc, #704]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4baf      	ldr	r3, [pc, #700]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 800290a:	2180      	movs	r1, #128	@ 0x80
 800290c:	0249      	lsls	r1, r1, #9
 800290e:	430a      	orrs	r2, r1
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e020      	b.n	8002956 <HAL_RCC_OscConfig+0xba>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	23a0      	movs	r3, #160	@ 0xa0
 800291a:	02db      	lsls	r3, r3, #11
 800291c:	429a      	cmp	r2, r3
 800291e:	d10e      	bne.n	800293e <HAL_RCC_OscConfig+0xa2>
 8002920:	4ba9      	ldr	r3, [pc, #676]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4ba8      	ldr	r3, [pc, #672]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002926:	2180      	movs	r1, #128	@ 0x80
 8002928:	02c9      	lsls	r1, r1, #11
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	4ba6      	ldr	r3, [pc, #664]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4ba5      	ldr	r3, [pc, #660]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002934:	2180      	movs	r1, #128	@ 0x80
 8002936:	0249      	lsls	r1, r1, #9
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e00b      	b.n	8002956 <HAL_RCC_OscConfig+0xba>
 800293e:	4ba2      	ldr	r3, [pc, #648]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4ba1      	ldr	r3, [pc, #644]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002944:	49a1      	ldr	r1, [pc, #644]	@ (8002bcc <HAL_RCC_OscConfig+0x330>)
 8002946:	400a      	ands	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	4b9f      	ldr	r3, [pc, #636]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b9e      	ldr	r3, [pc, #632]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002950:	499f      	ldr	r1, [pc, #636]	@ (8002bd0 <HAL_RCC_OscConfig+0x334>)
 8002952:	400a      	ands	r2, r1
 8002954:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d014      	beq.n	8002988 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295e:	f7fe fb27 	bl	8000fb0 <HAL_GetTick>
 8002962:	0003      	movs	r3, r0
 8002964:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe fb22 	bl	8000fb0 <HAL_GetTick>
 800296c:	0002      	movs	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	@ 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e28d      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297a:	4b93      	ldr	r3, [pc, #588]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	029b      	lsls	r3, r3, #10
 8002982:	4013      	ands	r3, r2
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0xcc>
 8002986:	e015      	b.n	80029b4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fb12 	bl	8000fb0 <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002992:	f7fe fb0d 	bl	8000fb0 <HAL_GetTick>
 8002996:	0002      	movs	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b64      	cmp	r3, #100	@ 0x64
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e278      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029a4:	4b88      	ldr	r3, [pc, #544]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	029b      	lsls	r3, r3, #10
 80029ac:	4013      	ands	r3, r2
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0xf6>
 80029b0:	e000      	b.n	80029b4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2202      	movs	r2, #2
 80029ba:	4013      	ands	r3, r2
 80029bc:	d100      	bne.n	80029c0 <HAL_RCC_OscConfig+0x124>
 80029be:	e099      	b.n	8002af4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c0:	4b81      	ldr	r3, [pc, #516]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2238      	movs	r2, #56	@ 0x38
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ca:	4b7f      	ldr	r3, [pc, #508]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2203      	movs	r2, #3
 80029d0:	4013      	ands	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d102      	bne.n	80029e0 <HAL_RCC_OscConfig+0x144>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d002      	beq.n	80029e6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d135      	bne.n	8002a52 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e6:	4b78      	ldr	r3, [pc, #480]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	2380      	movs	r3, #128	@ 0x80
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4013      	ands	r3, r2
 80029f0:	d005      	beq.n	80029fe <HAL_RCC_OscConfig+0x162>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e24b      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b72      	ldr	r3, [pc, #456]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4a74      	ldr	r2, [pc, #464]	@ (8002bd4 <HAL_RCC_OscConfig+0x338>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	0019      	movs	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	021a      	lsls	r2, r3, #8
 8002a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002a10:	430a      	orrs	r2, r1
 8002a12:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d112      	bne.n	8002a40 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a1a:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd8 <HAL_RCC_OscConfig+0x33c>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	4b67      	ldr	r3, [pc, #412]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002a2e:	4b66      	ldr	r3, [pc, #408]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0adb      	lsrs	r3, r3, #11
 8002a34:	2207      	movs	r2, #7
 8002a36:	4013      	ands	r3, r2
 8002a38:	4a68      	ldr	r2, [pc, #416]	@ (8002bdc <HAL_RCC_OscConfig+0x340>)
 8002a3a:	40da      	lsrs	r2, r3
 8002a3c:	4b68      	ldr	r3, [pc, #416]	@ (8002be0 <HAL_RCC_OscConfig+0x344>)
 8002a3e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a40:	4b68      	ldr	r3, [pc, #416]	@ (8002be4 <HAL_RCC_OscConfig+0x348>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7fe fa57 	bl	8000ef8 <HAL_InitTick>
 8002a4a:	1e03      	subs	r3, r0, #0
 8002a4c:	d051      	beq.n	8002af2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e221      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d030      	beq.n	8002abc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8002bd8 <HAL_RCC_OscConfig+0x33c>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	4b57      	ldr	r3, [pc, #348]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002a6e:	4b56      	ldr	r3, [pc, #344]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b55      	ldr	r3, [pc, #340]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002a74:	2180      	movs	r1, #128	@ 0x80
 8002a76:	0049      	lsls	r1, r1, #1
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fa98 	bl	8000fb0 <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe fa93 	bl	8000fb0 <HAL_GetTick>
 8002a8a:	0002      	movs	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1fe      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a98:	4b4b      	ldr	r3, [pc, #300]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	@ 0x80
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b48      	ldr	r3, [pc, #288]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd4 <HAL_RCC_OscConfig+0x338>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	021a      	lsls	r2, r3, #8
 8002ab4:	4b44      	ldr	r3, [pc, #272]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	e01b      	b.n	8002af4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002abc:	4b42      	ldr	r3, [pc, #264]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b41      	ldr	r3, [pc, #260]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002ac2:	4949      	ldr	r1, [pc, #292]	@ (8002be8 <HAL_RCC_OscConfig+0x34c>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fa72 	bl	8000fb0 <HAL_GetTick>
 8002acc:	0003      	movs	r3, r0
 8002ace:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ad2:	f7fe fa6d 	bl	8000fb0 <HAL_GetTick>
 8002ad6:	0002      	movs	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e1d8      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae4:	4b38      	ldr	r3, [pc, #224]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4013      	ands	r3, r2
 8002aee:	d1f0      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x236>
 8002af0:	e000      	b.n	8002af4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2208      	movs	r2, #8
 8002afa:	4013      	ands	r3, r2
 8002afc:	d047      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002afe:	4b32      	ldr	r3, [pc, #200]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2238      	movs	r2, #56	@ 0x38
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b18      	cmp	r3, #24
 8002b08:	d10a      	bne.n	8002b20 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0e:	2202      	movs	r2, #2
 8002b10:	4013      	ands	r3, r2
 8002b12:	d03c      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2f2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d138      	bne.n	8002b8e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e1ba      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d019      	beq.n	8002b5c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b28:	4b27      	ldr	r3, [pc, #156]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002b2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b2c:	4b26      	ldr	r3, [pc, #152]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002b2e:	2101      	movs	r1, #1
 8002b30:	430a      	orrs	r2, r1
 8002b32:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe fa3c 	bl	8000fb0 <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7fe fa37 	bl	8000fb0 <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e1a2      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b50:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b54:	2202      	movs	r2, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	d0f1      	beq.n	8002b3e <HAL_RCC_OscConfig+0x2a2>
 8002b5a:	e018      	b.n	8002b8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002b5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b60:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002b62:	2101      	movs	r1, #1
 8002b64:	438a      	bics	r2, r1
 8002b66:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fa22 	bl	8000fb0 <HAL_GetTick>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b72:	f7fe fa1d 	bl	8000fb0 <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e188      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b84:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b88:	2202      	movs	r2, #2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d1f1      	bne.n	8002b72 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2204      	movs	r2, #4
 8002b94:	4013      	ands	r3, r2
 8002b96:	d100      	bne.n	8002b9a <HAL_RCC_OscConfig+0x2fe>
 8002b98:	e0c6      	b.n	8002d28 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	231f      	movs	r3, #31
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2238      	movs	r2, #56	@ 0x38
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d11e      	bne.n	8002bec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_RCC_OscConfig+0x32c>)
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d100      	bne.n	8002bba <HAL_RCC_OscConfig+0x31e>
 8002bb8:	e0b6      	b.n	8002d28 <HAL_RCC_OscConfig+0x48c>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d000      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x328>
 8002bc2:	e0b1      	b.n	8002d28 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e166      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	fffeffff 	.word	0xfffeffff
 8002bd0:	fffbffff 	.word	0xfffbffff
 8002bd4:	ffff80ff 	.word	0xffff80ff
 8002bd8:	ffffc7ff 	.word	0xffffc7ff
 8002bdc:	00f42400 	.word	0x00f42400
 8002be0:	20000000 	.word	0x20000000
 8002be4:	20000004 	.word	0x20000004
 8002be8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bec:	4bac      	ldr	r3, [pc, #688]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	055b      	lsls	r3, r3, #21
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_OscConfig+0x360>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x362>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d011      	beq.n	8002c26 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4ba7      	ldr	r3, [pc, #668]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c06:	4ba6      	ldr	r3, [pc, #664]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0549      	lsls	r1, r1, #21
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c10:	4ba3      	ldr	r3, [pc, #652]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002c12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c14:	2380      	movs	r3, #128	@ 0x80
 8002c16:	055b      	lsls	r3, r3, #21
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002c1e:	231f      	movs	r3, #31
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c26:	4b9f      	ldr	r3, [pc, #636]	@ (8002ea4 <HAL_RCC_OscConfig+0x608>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d11a      	bne.n	8002c68 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c32:	4b9c      	ldr	r3, [pc, #624]	@ (8002ea4 <HAL_RCC_OscConfig+0x608>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b9b      	ldr	r3, [pc, #620]	@ (8002ea4 <HAL_RCC_OscConfig+0x608>)
 8002c38:	2180      	movs	r1, #128	@ 0x80
 8002c3a:	0049      	lsls	r1, r1, #1
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002c40:	f7fe f9b6 	bl	8000fb0 <HAL_GetTick>
 8002c44:	0003      	movs	r3, r0
 8002c46:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4a:	f7fe f9b1 	bl	8000fb0 <HAL_GetTick>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e11c      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c5c:	4b91      	ldr	r3, [pc, #580]	@ (8002ea4 <HAL_RCC_OscConfig+0x608>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4013      	ands	r3, r2
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d106      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3e2>
 8002c70:	4b8b      	ldr	r3, [pc, #556]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002c72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c74:	4b8a      	ldr	r3, [pc, #552]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002c76:	2101      	movs	r1, #1
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c7c:	e01c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x404>
 8002c86:	4b86      	ldr	r3, [pc, #536]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002c88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c8a:	4b85      	ldr	r3, [pc, #532]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c92:	4b83      	ldr	r3, [pc, #524]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002c94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c96:	4b82      	ldr	r3, [pc, #520]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002c98:	2101      	movs	r1, #1
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
 8002ca0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002ca2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ca4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	438a      	bics	r2, r1
 8002caa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002cac:	4b7c      	ldr	r3, [pc, #496]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002cae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002cb2:	2104      	movs	r1, #4
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d014      	beq.n	8002cea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc0:	f7fe f976 	bl	8000fb0 <HAL_GetTick>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc8:	e009      	b.n	8002cde <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cca:	f7fe f971 	bl	8000fb0 <HAL_GetTick>
 8002cce:	0002      	movs	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	4a74      	ldr	r2, [pc, #464]	@ (8002ea8 <HAL_RCC_OscConfig+0x60c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e0db      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cde:	4b70      	ldr	r3, [pc, #448]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x42e>
 8002ce8:	e013      	b.n	8002d12 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7fe f961 	bl	8000fb0 <HAL_GetTick>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cf2:	e009      	b.n	8002d08 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f7fe f95c 	bl	8000fb0 <HAL_GetTick>
 8002cf8:	0002      	movs	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	4a6a      	ldr	r2, [pc, #424]	@ (8002ea8 <HAL_RCC_OscConfig+0x60c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0c6      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d08:	4b65      	ldr	r3, [pc, #404]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002d12:	231f      	movs	r3, #31
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d105      	bne.n	8002d28 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002d1c:	4b60      	ldr	r3, [pc, #384]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002d1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d20:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002d22:	4962      	ldr	r1, [pc, #392]	@ (8002eac <HAL_RCC_OscConfig+0x610>)
 8002d24:	400a      	ands	r2, r1
 8002d26:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d100      	bne.n	8002d32 <HAL_RCC_OscConfig+0x496>
 8002d30:	e0b0      	b.n	8002e94 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d32:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2238      	movs	r2, #56	@ 0x38
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d100      	bne.n	8002d40 <HAL_RCC_OscConfig+0x4a4>
 8002d3e:	e078      	b.n	8002e32 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d153      	bne.n	8002df0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d48:	4b55      	ldr	r3, [pc, #340]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b54      	ldr	r3, [pc, #336]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002d4e:	4958      	ldr	r1, [pc, #352]	@ (8002eb0 <HAL_RCC_OscConfig+0x614>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fe f92c 	bl	8000fb0 <HAL_GetTick>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7fe f927 	bl	8000fb0 <HAL_GetTick>
 8002d62:	0002      	movs	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e092      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2380      	movs	r3, #128	@ 0x80
 8002d76:	049b      	lsls	r3, r3, #18
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d7c:	4b48      	ldr	r3, [pc, #288]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a4c      	ldr	r2, [pc, #304]	@ (8002eb4 <HAL_RCC_OscConfig+0x618>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1a      	ldr	r2, [r3, #32]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	431a      	orrs	r2, r3
 8002da4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002da6:	430a      	orrs	r2, r1
 8002da8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002daa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002db0:	2180      	movs	r1, #128	@ 0x80
 8002db2:	0449      	lsls	r1, r1, #17
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002db8:	4b39      	ldr	r3, [pc, #228]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	4b38      	ldr	r3, [pc, #224]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002dbe:	2180      	movs	r1, #128	@ 0x80
 8002dc0:	0549      	lsls	r1, r1, #21
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7fe f8f3 	bl	8000fb0 <HAL_GetTick>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fe f8ee 	bl	8000fb0 <HAL_GetTick>
 8002dd4:	0002      	movs	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e059      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	049b      	lsls	r3, r3, #18
 8002dea:	4013      	ands	r3, r2
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x534>
 8002dee:	e051      	b.n	8002e94 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002df6:	492e      	ldr	r1, [pc, #184]	@ (8002eb0 <HAL_RCC_OscConfig+0x614>)
 8002df8:	400a      	ands	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f8d8 	bl	8000fb0 <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e06:	f7fe f8d3 	bl	8000fb0 <HAL_GetTick>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e03e      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e18:	4b21      	ldr	r3, [pc, #132]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	049b      	lsls	r3, r3, #18
 8002e20:	4013      	ands	r3, r2
 8002e22:	d1f0      	bne.n	8002e06 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002e24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002e2a:	4923      	ldr	r1, [pc, #140]	@ (8002eb8 <HAL_RCC_OscConfig+0x61c>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]
 8002e30:	e030      	b.n	8002e94 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e02b      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002e3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ea0 <HAL_RCC_OscConfig+0x604>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2203      	movs	r2, #3
 8002e48:	401a      	ands	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d11e      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2270      	movs	r2, #112	@ 0x70
 8002e56:	401a      	ands	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d117      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	23fe      	movs	r3, #254	@ 0xfe
 8002e64:	01db      	lsls	r3, r3, #7
 8002e66:	401a      	ands	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d10e      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	23f8      	movs	r3, #248	@ 0xf8
 8002e76:	039b      	lsls	r3, r3, #14
 8002e78:	401a      	ands	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	0f5b      	lsrs	r3, r3, #29
 8002e86:	075a      	lsls	r2, r3, #29
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	0018      	movs	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b008      	add	sp, #32
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40007000 	.word	0x40007000
 8002ea8:	00001388 	.word	0x00001388
 8002eac:	efffffff 	.word	0xefffffff
 8002eb0:	feffffff 	.word	0xfeffffff
 8002eb4:	1fc1808c 	.word	0x1fc1808c
 8002eb8:	effefffc 	.word	0xeffefffc

08002ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0e9      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b76      	ldr	r3, [pc, #472]	@ (80030ac <HAL_RCC_ClockConfig+0x1f0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2207      	movs	r2, #7
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d91e      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b73      	ldr	r3, [pc, #460]	@ (80030ac <HAL_RCC_ClockConfig+0x1f0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2207      	movs	r2, #7
 8002ee4:	4393      	bics	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	4b70      	ldr	r3, [pc, #448]	@ (80030ac <HAL_RCC_ClockConfig+0x1f0>)
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ef0:	f7fe f85e 	bl	8000fb0 <HAL_GetTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ef8:	e009      	b.n	8002f0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efa:	f7fe f859 	bl	8000fb0 <HAL_GetTick>
 8002efe:	0002      	movs	r2, r0
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	4a6a      	ldr	r2, [pc, #424]	@ (80030b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e0ca      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f0e:	4b67      	ldr	r3, [pc, #412]	@ (80030ac <HAL_RCC_ClockConfig+0x1f0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2207      	movs	r2, #7
 8002f14:	4013      	ands	r3, r2
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d1ee      	bne.n	8002efa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2202      	movs	r2, #2
 8002f22:	4013      	ands	r3, r2
 8002f24:	d015      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d006      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f30:	4b60      	ldr	r3, [pc, #384]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	4b5f      	ldr	r3, [pc, #380]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f36:	21e0      	movs	r1, #224	@ 0xe0
 8002f38:	01c9      	lsls	r1, r1, #7
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	4a5d      	ldr	r2, [pc, #372]	@ (80030b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	0019      	movs	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	4b59      	ldr	r3, [pc, #356]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2201      	movs	r2, #1
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d057      	beq.n	800300c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f64:	4b53      	ldr	r3, [pc, #332]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	2380      	movs	r3, #128	@ 0x80
 8002f6a:	029b      	lsls	r3, r3, #10
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d12b      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e097      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	049b      	lsls	r3, r3, #18
 8002f84:	4013      	ands	r3, r2
 8002f86:	d11f      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e08b      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f94:	4b47      	ldr	r3, [pc, #284]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2380      	movs	r3, #128	@ 0x80
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d113      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e07f      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fac:	4b41      	ldr	r3, [pc, #260]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d108      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e074      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fba:	4b3e      	ldr	r3, [pc, #248]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e06d      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2207      	movs	r2, #7
 8002fce:	4393      	bics	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4b37      	ldr	r3, [pc, #220]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fdc:	f7fd ffe8 	bl	8000fb0 <HAL_GetTick>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe4:	e009      	b.n	8002ffa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe6:	f7fd ffe3 	bl	8000fb0 <HAL_GetTick>
 8002fea:	0002      	movs	r2, r0
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	4a2f      	ldr	r2, [pc, #188]	@ (80030b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e054      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2238      	movs	r2, #56	@ 0x38
 8003000:	401a      	ands	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	429a      	cmp	r2, r3
 800300a:	d1ec      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800300c:	4b27      	ldr	r3, [pc, #156]	@ (80030ac <HAL_RCC_ClockConfig+0x1f0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2207      	movs	r2, #7
 8003012:	4013      	ands	r3, r2
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d21e      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	4b24      	ldr	r3, [pc, #144]	@ (80030ac <HAL_RCC_ClockConfig+0x1f0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2207      	movs	r2, #7
 8003020:	4393      	bics	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	4b21      	ldr	r3, [pc, #132]	@ (80030ac <HAL_RCC_ClockConfig+0x1f0>)
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800302c:	f7fd ffc0 	bl	8000fb0 <HAL_GetTick>
 8003030:	0003      	movs	r3, r0
 8003032:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003034:	e009      	b.n	800304a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003036:	f7fd ffbb 	bl	8000fb0 <HAL_GetTick>
 800303a:	0002      	movs	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	4a1b      	ldr	r2, [pc, #108]	@ (80030b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d901      	bls.n	800304a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e02c      	b.n	80030a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800304a:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <HAL_RCC_ClockConfig+0x1f0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2207      	movs	r2, #7
 8003050:	4013      	ands	r3, r2
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d1ee      	bne.n	8003036 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2204      	movs	r2, #4
 800305e:	4013      	ands	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003062:	4b14      	ldr	r3, [pc, #80]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	4a15      	ldr	r2, [pc, #84]	@ (80030bc <HAL_RCC_ClockConfig+0x200>)
 8003068:	4013      	ands	r3, r2
 800306a:	0019      	movs	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 8003072:	430a      	orrs	r2, r1
 8003074:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003076:	f000 f829 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 800307a:	0001      	movs	r1, r0
 800307c:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <HAL_RCC_ClockConfig+0x1f8>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	220f      	movs	r2, #15
 8003084:	401a      	ands	r2, r3
 8003086:	4b0e      	ldr	r3, [pc, #56]	@ (80030c0 <HAL_RCC_ClockConfig+0x204>)
 8003088:	0092      	lsls	r2, r2, #2
 800308a:	58d3      	ldr	r3, [r2, r3]
 800308c:	221f      	movs	r2, #31
 800308e:	4013      	ands	r3, r2
 8003090:	000a      	movs	r2, r1
 8003092:	40da      	lsrs	r2, r3
 8003094:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <HAL_RCC_ClockConfig+0x208>)
 8003096:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <HAL_RCC_ClockConfig+0x20c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0018      	movs	r0, r3
 800309e:	f7fd ff2b 	bl	8000ef8 <HAL_InitTick>
 80030a2:	0003      	movs	r3, r0
}
 80030a4:	0018      	movs	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b004      	add	sp, #16
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40022000 	.word	0x40022000
 80030b0:	00001388 	.word	0x00001388
 80030b4:	40021000 	.word	0x40021000
 80030b8:	fffff0ff 	.word	0xfffff0ff
 80030bc:	ffff8fff 	.word	0xffff8fff
 80030c0:	08004ee4 	.word	0x08004ee4
 80030c4:	20000000 	.word	0x20000000
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d2:	4b3c      	ldr	r3, [pc, #240]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2238      	movs	r2, #56	@ 0x38
 80030d8:	4013      	ands	r3, r2
 80030da:	d10f      	bne.n	80030fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80030dc:	4b39      	ldr	r3, [pc, #228]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	0adb      	lsrs	r3, r3, #11
 80030e2:	2207      	movs	r2, #7
 80030e4:	4013      	ands	r3, r2
 80030e6:	2201      	movs	r2, #1
 80030e8:	409a      	lsls	r2, r3
 80030ea:	0013      	movs	r3, r2
 80030ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80030ee:	6839      	ldr	r1, [r7, #0]
 80030f0:	4835      	ldr	r0, [pc, #212]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030f2:	f7fd f805 	bl	8000100 <__udivsi3>
 80030f6:	0003      	movs	r3, r0
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	e05d      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030fc:	4b31      	ldr	r3, [pc, #196]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2238      	movs	r2, #56	@ 0x38
 8003102:	4013      	ands	r3, r2
 8003104:	2b08      	cmp	r3, #8
 8003106:	d102      	bne.n	800310e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003108:	4b30      	ldr	r3, [pc, #192]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x100>)
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	e054      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800310e:	4b2d      	ldr	r3, [pc, #180]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2238      	movs	r2, #56	@ 0x38
 8003114:	4013      	ands	r3, r2
 8003116:	2b10      	cmp	r3, #16
 8003118:	d138      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800311a:	4b2a      	ldr	r3, [pc, #168]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2203      	movs	r2, #3
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003124:	4b27      	ldr	r3, [pc, #156]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	2207      	movs	r2, #7
 800312c:	4013      	ands	r3, r2
 800312e:	3301      	adds	r3, #1
 8003130:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d10d      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003138:	68b9      	ldr	r1, [r7, #8]
 800313a:	4824      	ldr	r0, [pc, #144]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x100>)
 800313c:	f7fc ffe0 	bl	8000100 <__udivsi3>
 8003140:	0003      	movs	r3, r0
 8003142:	0019      	movs	r1, r3
 8003144:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	227f      	movs	r2, #127	@ 0x7f
 800314c:	4013      	ands	r3, r2
 800314e:	434b      	muls	r3, r1
 8003150:	617b      	str	r3, [r7, #20]
        break;
 8003152:	e00d      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	481c      	ldr	r0, [pc, #112]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003158:	f7fc ffd2 	bl	8000100 <__udivsi3>
 800315c:	0003      	movs	r3, r0
 800315e:	0019      	movs	r1, r3
 8003160:	4b18      	ldr	r3, [pc, #96]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	227f      	movs	r2, #127	@ 0x7f
 8003168:	4013      	ands	r3, r2
 800316a:	434b      	muls	r3, r1
 800316c:	617b      	str	r3, [r7, #20]
        break;
 800316e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003170:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	0f5b      	lsrs	r3, r3, #29
 8003176:	2207      	movs	r2, #7
 8003178:	4013      	ands	r3, r2
 800317a:	3301      	adds	r3, #1
 800317c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	6978      	ldr	r0, [r7, #20]
 8003182:	f7fc ffbd 	bl	8000100 <__udivsi3>
 8003186:	0003      	movs	r3, r0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	e015      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800318c:	4b0d      	ldr	r3, [pc, #52]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2238      	movs	r2, #56	@ 0x38
 8003192:	4013      	ands	r3, r2
 8003194:	2b20      	cmp	r3, #32
 8003196:	d103      	bne.n	80031a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003198:	2380      	movs	r3, #128	@ 0x80
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031a0:	4b08      	ldr	r3, [pc, #32]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2238      	movs	r2, #56	@ 0x38
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b18      	cmp	r3, #24
 80031aa:	d103      	bne.n	80031b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80031ac:	23fa      	movs	r3, #250	@ 0xfa
 80031ae:	01db      	lsls	r3, r3, #7
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	e001      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031b8:	693b      	ldr	r3, [r7, #16]
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	b006      	add	sp, #24
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	46c0      	nop			@ (mov r8, r8)
 80031c4:	40021000 	.word	0x40021000
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80031d8:	2313      	movs	r3, #19
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031e0:	2312      	movs	r3, #18
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	029b      	lsls	r3, r3, #10
 80031f0:	4013      	ands	r3, r2
 80031f2:	d100      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80031f4:	e0a3      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f6:	2011      	movs	r0, #17
 80031f8:	183b      	adds	r3, r7, r0
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031fe:	4b7f      	ldr	r3, [pc, #508]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003200:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003202:	2380      	movs	r3, #128	@ 0x80
 8003204:	055b      	lsls	r3, r3, #21
 8003206:	4013      	ands	r3, r2
 8003208:	d110      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b7c      	ldr	r3, [pc, #496]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800320c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800320e:	4b7b      	ldr	r3, [pc, #492]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003210:	2180      	movs	r1, #128	@ 0x80
 8003212:	0549      	lsls	r1, r1, #21
 8003214:	430a      	orrs	r2, r1
 8003216:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003218:	4b78      	ldr	r3, [pc, #480]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800321a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	055b      	lsls	r3, r3, #21
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003226:	183b      	adds	r3, r7, r0
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800322c:	4b74      	ldr	r3, [pc, #464]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	4b73      	ldr	r3, [pc, #460]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003232:	2180      	movs	r1, #128	@ 0x80
 8003234:	0049      	lsls	r1, r1, #1
 8003236:	430a      	orrs	r2, r1
 8003238:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800323a:	f7fd feb9 	bl	8000fb0 <HAL_GetTick>
 800323e:	0003      	movs	r3, r0
 8003240:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003242:	e00b      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003244:	f7fd feb4 	bl	8000fb0 <HAL_GetTick>
 8003248:	0002      	movs	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d904      	bls.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003252:	2313      	movs	r3, #19
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	2203      	movs	r2, #3
 8003258:	701a      	strb	r2, [r3, #0]
        break;
 800325a:	e005      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800325c:	4b68      	ldr	r3, [pc, #416]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4013      	ands	r3, r2
 8003266:	d0ed      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003268:	2313      	movs	r3, #19
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d154      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003272:	4b62      	ldr	r3, [pc, #392]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003274:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003276:	23c0      	movs	r3, #192	@ 0xc0
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4013      	ands	r3, r2
 800327c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d019      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	429a      	cmp	r2, r3
 800328c:	d014      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800328e:	4b5b      	ldr	r3, [pc, #364]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003292:	4a5c      	ldr	r2, [pc, #368]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003294:	4013      	ands	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003298:	4b58      	ldr	r3, [pc, #352]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800329a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800329c:	4b57      	ldr	r3, [pc, #348]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800329e:	2180      	movs	r1, #128	@ 0x80
 80032a0:	0249      	lsls	r1, r1, #9
 80032a2:	430a      	orrs	r2, r1
 80032a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032a6:	4b55      	ldr	r3, [pc, #340]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80032aa:	4b54      	ldr	r3, [pc, #336]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032ac:	4956      	ldr	r1, [pc, #344]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032b2:	4b52      	ldr	r3, [pc, #328]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2201      	movs	r2, #1
 80032bc:	4013      	ands	r3, r2
 80032be:	d016      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fd fe76 	bl	8000fb0 <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c8:	e00c      	b.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd fe71 	bl	8000fb0 <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	4a4d      	ldr	r2, [pc, #308]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d904      	bls.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80032da:	2313      	movs	r3, #19
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2203      	movs	r2, #3
 80032e0:	701a      	strb	r2, [r3, #0]
            break;
 80032e2:	e004      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e4:	4b45      	ldr	r3, [pc, #276]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e8:	2202      	movs	r2, #2
 80032ea:	4013      	ands	r3, r2
 80032ec:	d0ed      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80032ee:	2313      	movs	r3, #19
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f8:	4b40      	ldr	r3, [pc, #256]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80032fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fc:	4a41      	ldr	r2, [pc, #260]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	4b3d      	ldr	r3, [pc, #244]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003308:	430a      	orrs	r2, r1
 800330a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800330c:	e00c      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800330e:	2312      	movs	r3, #18
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	2213      	movs	r2, #19
 8003314:	18ba      	adds	r2, r7, r2
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	701a      	strb	r2, [r3, #0]
 800331a:	e005      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331c:	2312      	movs	r3, #18
 800331e:	18fb      	adds	r3, r7, r3
 8003320:	2213      	movs	r2, #19
 8003322:	18ba      	adds	r2, r7, r2
 8003324:	7812      	ldrb	r2, [r2, #0]
 8003326:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003328:	2311      	movs	r3, #17
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4b32      	ldr	r3, [pc, #200]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003336:	4b31      	ldr	r3, [pc, #196]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003338:	4935      	ldr	r1, [pc, #212]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800333a:	400a      	ands	r2, r1
 800333c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2201      	movs	r2, #1
 8003344:	4013      	ands	r3, r2
 8003346:	d009      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003348:	4b2c      	ldr	r3, [pc, #176]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800334a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334c:	2203      	movs	r2, #3
 800334e:	4393      	bics	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	4b29      	ldr	r3, [pc, #164]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003358:	430a      	orrs	r2, r1
 800335a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2220      	movs	r2, #32
 8003362:	4013      	ands	r3, r2
 8003364:	d009      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003366:	4b25      	ldr	r3, [pc, #148]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336a:	4a2a      	ldr	r2, [pc, #168]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800336c:	4013      	ands	r3, r2
 800336e:	0019      	movs	r1, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	4b21      	ldr	r3, [pc, #132]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003376:	430a      	orrs	r2, r1
 8003378:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	01db      	lsls	r3, r3, #7
 8003382:	4013      	ands	r3, r2
 8003384:	d015      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003386:	4b1d      	ldr	r3, [pc, #116]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	0899      	lsrs	r1, r3, #2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	4b1a      	ldr	r3, [pc, #104]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003394:	430a      	orrs	r2, r1
 8003396:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	2380      	movs	r3, #128	@ 0x80
 800339e:	05db      	lsls	r3, r3, #23
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d106      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033a4:	4b15      	ldr	r3, [pc, #84]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033aa:	2180      	movs	r1, #128	@ 0x80
 80033ac:	0249      	lsls	r1, r1, #9
 80033ae:	430a      	orrs	r2, r1
 80033b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	4013      	ands	r3, r2
 80033bc:	d016      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80033be:	4b0f      	ldr	r3, [pc, #60]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c2:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033ce:	430a      	orrs	r2, r1
 80033d0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	2380      	movs	r3, #128	@ 0x80
 80033d8:	01db      	lsls	r3, r3, #7
 80033da:	429a      	cmp	r2, r3
 80033dc:	d106      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033de:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80033e4:	2180      	movs	r1, #128	@ 0x80
 80033e6:	0249      	lsls	r1, r1, #9
 80033e8:	430a      	orrs	r2, r1
 80033ea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80033ec:	2312      	movs	r3, #18
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	781b      	ldrb	r3, [r3, #0]
}
 80033f2:	0018      	movs	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b006      	add	sp, #24
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			@ (mov r8, r8)
 80033fc:	40021000 	.word	0x40021000
 8003400:	40007000 	.word	0x40007000
 8003404:	fffffcff 	.word	0xfffffcff
 8003408:	fffeffff 	.word	0xfffeffff
 800340c:	00001388 	.word	0x00001388
 8003410:	efffffff 	.word	0xefffffff
 8003414:	ffffcfff 	.word	0xffffcfff
 8003418:	ffff3fff 	.word	0xffff3fff

0800341c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800341c:	b5b0      	push	{r4, r5, r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003424:	230f      	movs	r3, #15
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d100      	bne.n	8003434 <HAL_RTC_Init+0x18>
 8003432:	e08c      	b.n	800354e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2229      	movs	r2, #41	@ 0x29
 8003438:	5c9b      	ldrb	r3, [r3, r2]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2228      	movs	r2, #40	@ 0x28
 8003444:	2100      	movs	r1, #0
 8003446:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2288      	movs	r2, #136	@ 0x88
 800344c:	0212      	lsls	r2, r2, #8
 800344e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	0018      	movs	r0, r3
 8003454:	f7fd fbd4 	bl	8000c00 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2229      	movs	r2, #41	@ 0x29
 800345c:	2102      	movs	r1, #2
 800345e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2210      	movs	r2, #16
 8003468:	4013      	ands	r3, r2
 800346a:	2b10      	cmp	r3, #16
 800346c:	d062      	beq.n	8003534 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	22ca      	movs	r2, #202	@ 0xca
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2253      	movs	r2, #83	@ 0x53
 800347c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800347e:	250f      	movs	r5, #15
 8003480:	197c      	adds	r4, r7, r5
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 f9cb 	bl	8003820 <RTC_EnterInitMode>
 800348a:	0003      	movs	r3, r0
 800348c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800348e:	0028      	movs	r0, r5
 8003490:	183b      	adds	r3, r7, r0
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d12c      	bne.n	80034f2 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	492e      	ldr	r1, [pc, #184]	@ (800355c <HAL_RTC_Init+0x140>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6999      	ldr	r1, [r3, #24]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6912      	ldr	r2, [r2, #16]
 80034ce:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6919      	ldr	r1, [r3, #16]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	041a      	lsls	r2, r3, #16
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80034e4:	183c      	adds	r4, r7, r0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 f9db 	bl	80038a4 <RTC_ExitInitMode>
 80034ee:	0003      	movs	r3, r0
 80034f0:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80034f2:	230f      	movs	r3, #15
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d116      	bne.n	800352a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	00d2      	lsls	r2, r2, #3
 8003508:	08d2      	lsrs	r2, r2, #3
 800350a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6999      	ldr	r1, [r3, #24]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	22ff      	movs	r2, #255	@ 0xff
 8003530:	625a      	str	r2, [r3, #36]	@ 0x24
 8003532:	e003      	b.n	800353c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003534:	230f      	movs	r3, #15
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800353c:	230f      	movs	r3, #15
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2229      	movs	r2, #41	@ 0x29
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800354e:	230f      	movs	r3, #15
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	781b      	ldrb	r3, [r3, #0]
}
 8003554:	0018      	movs	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	b004      	add	sp, #16
 800355a:	bdb0      	pop	{r4, r5, r7, pc}
 800355c:	fb8fffbf 	.word	0xfb8fffbf

08003560 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2228      	movs	r2, #40	@ 0x28
 8003570:	5c9b      	ldrb	r3, [r3, r2]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_RTC_SetTime+0x1a>
 8003576:	2302      	movs	r3, #2
 8003578:	e092      	b.n	80036a0 <HAL_RTC_SetTime+0x140>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2228      	movs	r2, #40	@ 0x28
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2229      	movs	r2, #41	@ 0x29
 8003586:	2102      	movs	r1, #2
 8003588:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	22ca      	movs	r2, #202	@ 0xca
 8003590:	625a      	str	r2, [r3, #36]	@ 0x24
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2253      	movs	r2, #83	@ 0x53
 8003598:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800359a:	2513      	movs	r5, #19
 800359c:	197c      	adds	r4, r7, r5
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 f93d 	bl	8003820 <RTC_EnterInitMode>
 80035a6:	0003      	movs	r3, r0
 80035a8:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80035aa:	197b      	adds	r3, r7, r5
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d162      	bne.n	8003678 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d125      	bne.n	8003604 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2240      	movs	r2, #64	@ 0x40
 80035c0:	4013      	ands	r3, r2
 80035c2:	d102      	bne.n	80035ca <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2200      	movs	r2, #0
 80035c8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	0018      	movs	r0, r3
 80035d0:	f000 f9ac 	bl	800392c <RTC_ByteToBcd2>
 80035d4:	0003      	movs	r3, r0
 80035d6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	0018      	movs	r0, r3
 80035de:	f000 f9a5 	bl	800392c <RTC_ByteToBcd2>
 80035e2:	0003      	movs	r3, r0
 80035e4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80035e6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	789b      	ldrb	r3, [r3, #2]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 f99d 	bl	800392c <RTC_ByteToBcd2>
 80035f2:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80035f4:	0022      	movs	r2, r4
 80035f6:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	78db      	ldrb	r3, [r3, #3]
 80035fc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e017      	b.n	8003634 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2240      	movs	r2, #64	@ 0x40
 800360c:	4013      	ands	r3, r2
 800360e:	d102      	bne.n	8003616 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2200      	movs	r2, #0
 8003614:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	785b      	ldrb	r3, [r3, #1]
 8003620:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003622:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003628:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	78db      	ldrb	r3, [r3, #3]
 800362e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	491b      	ldr	r1, [pc, #108]	@ (80036a8 <HAL_RTC_SetTime+0x148>)
 800363c:	400a      	ands	r2, r1
 800363e:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4918      	ldr	r1, [pc, #96]	@ (80036ac <HAL_RTC_SetTime+0x14c>)
 800364c:	400a      	ands	r2, r1
 800364e:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6999      	ldr	r1, [r3, #24]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003668:	2313      	movs	r3, #19
 800366a:	18fc      	adds	r4, r7, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	0018      	movs	r0, r3
 8003670:	f000 f918 	bl	80038a4 <RTC_ExitInitMode>
 8003674:	0003      	movs	r3, r0
 8003676:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	22ff      	movs	r2, #255	@ 0xff
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8003680:	2313      	movs	r3, #19
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d103      	bne.n	8003692 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2229      	movs	r2, #41	@ 0x29
 800368e:	2101      	movs	r1, #1
 8003690:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2228      	movs	r2, #40	@ 0x28
 8003696:	2100      	movs	r1, #0
 8003698:	5499      	strb	r1, [r3, r2]

  return status;
 800369a:	2313      	movs	r3, #19
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	781b      	ldrb	r3, [r3, #0]
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b006      	add	sp, #24
 80036a6:	bdb0      	pop	{r4, r5, r7, pc}
 80036a8:	007f7f7f 	.word	0x007f7f7f
 80036ac:	fffbffff 	.word	0xfffbffff

080036b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2228      	movs	r2, #40	@ 0x28
 80036c0:	5c9b      	ldrb	r3, [r3, r2]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_RTC_SetDate+0x1a>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e07e      	b.n	80037c8 <HAL_RTC_SetDate+0x118>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2228      	movs	r2, #40	@ 0x28
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2229      	movs	r2, #41	@ 0x29
 80036d6:	2102      	movs	r1, #2
 80036d8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10e      	bne.n	80036fe <HAL_RTC_SetDate+0x4e>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	001a      	movs	r2, r3
 80036e6:	2310      	movs	r3, #16
 80036e8:	4013      	ands	r3, r2
 80036ea:	d008      	beq.n	80036fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	785b      	ldrb	r3, [r3, #1]
 80036f0:	2210      	movs	r2, #16
 80036f2:	4393      	bics	r3, r2
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	330a      	adds	r3, #10
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d11c      	bne.n	800373e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	78db      	ldrb	r3, [r3, #3]
 8003708:	0018      	movs	r0, r3
 800370a:	f000 f90f 	bl	800392c <RTC_ByteToBcd2>
 800370e:	0003      	movs	r3, r0
 8003710:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	785b      	ldrb	r3, [r3, #1]
 8003716:	0018      	movs	r0, r3
 8003718:	f000 f908 	bl	800392c <RTC_ByteToBcd2>
 800371c:	0003      	movs	r3, r0
 800371e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003720:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	789b      	ldrb	r3, [r3, #2]
 8003726:	0018      	movs	r0, r3
 8003728:	f000 f900 	bl	800392c <RTC_ByteToBcd2>
 800372c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800372e:	0022      	movs	r2, r4
 8003730:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	e00e      	b.n	800375c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	78db      	ldrb	r3, [r3, #3]
 8003742:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800374a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003750:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	22ca      	movs	r2, #202	@ 0xca
 8003762:	625a      	str	r2, [r3, #36]	@ 0x24
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2253      	movs	r2, #83	@ 0x53
 800376a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800376c:	2513      	movs	r5, #19
 800376e:	197c      	adds	r4, r7, r5
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	0018      	movs	r0, r3
 8003774:	f000 f854 	bl	8003820 <RTC_EnterInitMode>
 8003778:	0003      	movs	r3, r0
 800377a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800377c:	0028      	movs	r0, r5
 800377e:	183b      	adds	r3, r7, r0
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10c      	bne.n	80037a0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4910      	ldr	r1, [pc, #64]	@ (80037d0 <HAL_RTC_SetDate+0x120>)
 800378e:	400a      	ands	r2, r1
 8003790:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003792:	183c      	adds	r4, r7, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	0018      	movs	r0, r3
 8003798:	f000 f884 	bl	80038a4 <RTC_ExitInitMode>
 800379c:	0003      	movs	r3, r0
 800379e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	22ff      	movs	r2, #255	@ 0xff
 80037a6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80037a8:	2313      	movs	r3, #19
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2229      	movs	r2, #41	@ 0x29
 80037b6:	2101      	movs	r1, #1
 80037b8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2228      	movs	r2, #40	@ 0x28
 80037be:	2100      	movs	r1, #0
 80037c0:	5499      	strb	r1, [r3, r2]

  return status;
 80037c2:	2313      	movs	r3, #19
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	781b      	ldrb	r3, [r3, #0]
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b006      	add	sp, #24
 80037ce:	bdb0      	pop	{r4, r5, r7, pc}
 80037d0:	00ffff3f 	.word	0x00ffff3f

080037d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0e      	ldr	r2, [pc, #56]	@ (800381c <HAL_RTC_WaitForSynchro+0x48>)
 80037e2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80037e4:	f7fd fbe4 	bl	8000fb0 <HAL_GetTick>
 80037e8:	0003      	movs	r3, r0
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80037ec:	e00a      	b.n	8003804 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037ee:	f7fd fbdf 	bl	8000fb0 <HAL_GetTick>
 80037f2:	0002      	movs	r2, r0
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1ad2      	subs	r2, r2, r3
 80037f8:	23fa      	movs	r3, #250	@ 0xfa
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d901      	bls.n	8003804 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e006      	b.n	8003812 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	4013      	ands	r3, r2
 800380e:	d0ee      	beq.n	80037ee <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b004      	add	sp, #16
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	0001005f 	.word	0x0001005f

08003820 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8003828:	230f      	movs	r3, #15
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2240      	movs	r2, #64	@ 0x40
 8003838:	4013      	ands	r3, r2
 800383a:	d12c      	bne.n	8003896 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2180      	movs	r1, #128	@ 0x80
 8003848:	430a      	orrs	r2, r1
 800384a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800384c:	f7fd fbb0 	bl	8000fb0 <HAL_GetTick>
 8003850:	0003      	movs	r3, r0
 8003852:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003854:	e014      	b.n	8003880 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8003856:	f7fd fbab 	bl	8000fb0 <HAL_GetTick>
 800385a:	0002      	movs	r2, r0
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	1ad2      	subs	r2, r2, r3
 8003860:	200f      	movs	r0, #15
 8003862:	183b      	adds	r3, r7, r0
 8003864:	1839      	adds	r1, r7, r0
 8003866:	7809      	ldrb	r1, [r1, #0]
 8003868:	7019      	strb	r1, [r3, #0]
 800386a:	23fa      	movs	r3, #250	@ 0xfa
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	429a      	cmp	r2, r3
 8003870:	d906      	bls.n	8003880 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003872:	183b      	adds	r3, r7, r0
 8003874:	2203      	movs	r2, #3
 8003876:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2229      	movs	r2, #41	@ 0x29
 800387c:	2103      	movs	r1, #3
 800387e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2240      	movs	r2, #64	@ 0x40
 8003888:	4013      	ands	r3, r2
 800388a:	d104      	bne.n	8003896 <RTC_EnterInitMode+0x76>
 800388c:	230f      	movs	r3, #15
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b03      	cmp	r3, #3
 8003894:	d1df      	bne.n	8003856 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003896:	230f      	movs	r3, #15
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	781b      	ldrb	r3, [r3, #0]
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b004      	add	sp, #16
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038a4:	b590      	push	{r4, r7, lr}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ac:	240f      	movs	r4, #15
 80038ae:	193b      	adds	r3, r7, r4
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80038b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003928 <RTC_ExitInitMode+0x84>)
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003928 <RTC_ExitInitMode+0x84>)
 80038ba:	2180      	movs	r1, #128	@ 0x80
 80038bc:	438a      	bics	r2, r1
 80038be:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80038c0:	4b19      	ldr	r3, [pc, #100]	@ (8003928 <RTC_ExitInitMode+0x84>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2220      	movs	r2, #32
 80038c6:	4013      	ands	r3, r2
 80038c8:	d10d      	bne.n	80038e6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7ff ff81 	bl	80037d4 <HAL_RTC_WaitForSynchro>
 80038d2:	1e03      	subs	r3, r0, #0
 80038d4:	d021      	beq.n	800391a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2229      	movs	r2, #41	@ 0x29
 80038da:	2103      	movs	r1, #3
 80038dc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80038de:	193b      	adds	r3, r7, r4
 80038e0:	2203      	movs	r2, #3
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	e019      	b.n	800391a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80038e6:	4b10      	ldr	r3, [pc, #64]	@ (8003928 <RTC_ExitInitMode+0x84>)
 80038e8:	699a      	ldr	r2, [r3, #24]
 80038ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003928 <RTC_ExitInitMode+0x84>)
 80038ec:	2120      	movs	r1, #32
 80038ee:	438a      	bics	r2, r1
 80038f0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7ff ff6d 	bl	80037d4 <HAL_RTC_WaitForSynchro>
 80038fa:	1e03      	subs	r3, r0, #0
 80038fc:	d007      	beq.n	800390e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2229      	movs	r2, #41	@ 0x29
 8003902:	2103      	movs	r1, #3
 8003904:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003906:	230f      	movs	r3, #15
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	2203      	movs	r2, #3
 800390c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800390e:	4b06      	ldr	r3, [pc, #24]	@ (8003928 <RTC_ExitInitMode+0x84>)
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <RTC_ExitInitMode+0x84>)
 8003914:	2120      	movs	r1, #32
 8003916:	430a      	orrs	r2, r1
 8003918:	619a      	str	r2, [r3, #24]
  }

  return status;
 800391a:	230f      	movs	r3, #15
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	781b      	ldrb	r3, [r3, #0]
}
 8003920:	0018      	movs	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	b005      	add	sp, #20
 8003926:	bd90      	pop	{r4, r7, pc}
 8003928:	40002800 	.word	0x40002800

0800392c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	0002      	movs	r2, r0
 8003934:	1dfb      	adds	r3, r7, #7
 8003936:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800393c:	230b      	movs	r3, #11
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	1dfa      	adds	r2, r7, #7
 8003942:	7812      	ldrb	r2, [r2, #0]
 8003944:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8003946:	e008      	b.n	800395a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3301      	adds	r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800394e:	220b      	movs	r2, #11
 8003950:	18bb      	adds	r3, r7, r2
 8003952:	18ba      	adds	r2, r7, r2
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	3a0a      	subs	r2, #10
 8003958:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800395a:	210b      	movs	r1, #11
 800395c:	187b      	adds	r3, r7, r1
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b09      	cmp	r3, #9
 8003962:	d8f1      	bhi.n	8003948 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	b2da      	uxtb	r2, r3
 800396c:	187b      	adds	r3, r7, r1
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	4313      	orrs	r3, r2
 8003972:	b2db      	uxtb	r3, r3
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b004      	add	sp, #16
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e04a      	b.n	8003a24 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	223d      	movs	r2, #61	@ 0x3d
 8003992:	5c9b      	ldrb	r3, [r3, r2]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	223c      	movs	r2, #60	@ 0x3c
 800399e:	2100      	movs	r1, #0
 80039a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7fd f969 	bl	8000c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	223d      	movs	r2, #61	@ 0x3d
 80039ae:	2102      	movs	r1, #2
 80039b0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3304      	adds	r3, #4
 80039ba:	0019      	movs	r1, r3
 80039bc:	0010      	movs	r0, r2
 80039be:	f000 fd6d 	bl	800449c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2248      	movs	r2, #72	@ 0x48
 80039c6:	2101      	movs	r1, #1
 80039c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	223e      	movs	r2, #62	@ 0x3e
 80039ce:	2101      	movs	r1, #1
 80039d0:	5499      	strb	r1, [r3, r2]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	223f      	movs	r2, #63	@ 0x3f
 80039d6:	2101      	movs	r1, #1
 80039d8:	5499      	strb	r1, [r3, r2]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2240      	movs	r2, #64	@ 0x40
 80039de:	2101      	movs	r1, #1
 80039e0:	5499      	strb	r1, [r3, r2]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2241      	movs	r2, #65	@ 0x41
 80039e6:	2101      	movs	r1, #1
 80039e8:	5499      	strb	r1, [r3, r2]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2242      	movs	r2, #66	@ 0x42
 80039ee:	2101      	movs	r1, #1
 80039f0:	5499      	strb	r1, [r3, r2]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2243      	movs	r2, #67	@ 0x43
 80039f6:	2101      	movs	r1, #1
 80039f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2244      	movs	r2, #68	@ 0x44
 80039fe:	2101      	movs	r1, #1
 8003a00:	5499      	strb	r1, [r3, r2]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2245      	movs	r2, #69	@ 0x45
 8003a06:	2101      	movs	r1, #1
 8003a08:	5499      	strb	r1, [r3, r2]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2246      	movs	r2, #70	@ 0x46
 8003a0e:	2101      	movs	r1, #1
 8003a10:	5499      	strb	r1, [r3, r2]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2247      	movs	r2, #71	@ 0x47
 8003a16:	2101      	movs	r1, #1
 8003a18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	223d      	movs	r2, #61	@ 0x3d
 8003a1e:	2101      	movs	r1, #1
 8003a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b002      	add	sp, #8
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	223d      	movs	r2, #61	@ 0x3d
 8003a38:	5c9b      	ldrb	r3, [r3, r2]
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d001      	beq.n	8003a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e037      	b.n	8003ab4 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	223d      	movs	r2, #61	@ 0x3d
 8003a48:	2102      	movs	r1, #2
 8003a4a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2101      	movs	r1, #1
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a16      	ldr	r2, [pc, #88]	@ (8003abc <HAL_TIM_Base_Start_IT+0x90>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x44>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a15      	ldr	r2, [pc, #84]	@ (8003ac0 <HAL_TIM_Base_Start_IT+0x94>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d116      	bne.n	8003a9e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	4a13      	ldr	r2, [pc, #76]	@ (8003ac4 <HAL_TIM_Base_Start_IT+0x98>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d016      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0x84>
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	2380      	movs	r3, #128	@ 0x80
 8003a86:	025b      	lsls	r3, r3, #9
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d011      	beq.n	8003ab0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2101      	movs	r1, #1
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9c:	e008      	b.n	8003ab0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e000      	b.n	8003ab2 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b004      	add	sp, #16
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	00010007 	.word	0x00010007

08003ac8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2101      	movs	r1, #1
 8003adc:	438a      	bics	r2, r1
 8003ade:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b1c <HAL_TIM_Base_Stop_IT+0x54>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d10d      	bne.n	8003b08 <HAL_TIM_Base_Stop_IT+0x40>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4a0b      	ldr	r2, [pc, #44]	@ (8003b20 <HAL_TIM_Base_Stop_IT+0x58>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	d107      	bne.n	8003b08 <HAL_TIM_Base_Stop_IT+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2101      	movs	r1, #1
 8003b04:	438a      	bics	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	223d      	movs	r2, #61	@ 0x3d
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b002      	add	sp, #8
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	00001111 	.word	0x00001111
 8003b20:	00000444 	.word	0x00000444

08003b24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e04a      	b.n	8003bcc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	223d      	movs	r2, #61	@ 0x3d
 8003b3a:	5c9b      	ldrb	r3, [r3, r2]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d107      	bne.n	8003b52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	223c      	movs	r2, #60	@ 0x3c
 8003b46:	2100      	movs	r1, #0
 8003b48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f000 f841 	bl	8003bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	223d      	movs	r2, #61	@ 0x3d
 8003b56:	2102      	movs	r1, #2
 8003b58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3304      	adds	r3, #4
 8003b62:	0019      	movs	r1, r3
 8003b64:	0010      	movs	r0, r2
 8003b66:	f000 fc99 	bl	800449c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2248      	movs	r2, #72	@ 0x48
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	223e      	movs	r2, #62	@ 0x3e
 8003b76:	2101      	movs	r1, #1
 8003b78:	5499      	strb	r1, [r3, r2]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	223f      	movs	r2, #63	@ 0x3f
 8003b7e:	2101      	movs	r1, #1
 8003b80:	5499      	strb	r1, [r3, r2]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2240      	movs	r2, #64	@ 0x40
 8003b86:	2101      	movs	r1, #1
 8003b88:	5499      	strb	r1, [r3, r2]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2241      	movs	r2, #65	@ 0x41
 8003b8e:	2101      	movs	r1, #1
 8003b90:	5499      	strb	r1, [r3, r2]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2242      	movs	r2, #66	@ 0x42
 8003b96:	2101      	movs	r1, #1
 8003b98:	5499      	strb	r1, [r3, r2]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2243      	movs	r2, #67	@ 0x43
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2244      	movs	r2, #68	@ 0x44
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	5499      	strb	r1, [r3, r2]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2245      	movs	r2, #69	@ 0x45
 8003bae:	2101      	movs	r1, #1
 8003bb0:	5499      	strb	r1, [r3, r2]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2246      	movs	r2, #70	@ 0x46
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	5499      	strb	r1, [r3, r2]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2247      	movs	r2, #71	@ 0x47
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	223d      	movs	r2, #61	@ 0x3d
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bdc:	46c0      	nop			@ (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b002      	add	sp, #8
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d108      	bne.n	8003c06 <HAL_TIM_PWM_Start+0x22>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	223e      	movs	r2, #62	@ 0x3e
 8003bf8:	5c9b      	ldrb	r3, [r3, r2]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	1e5a      	subs	r2, r3, #1
 8003c00:	4193      	sbcs	r3, r2
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	e037      	b.n	8003c76 <HAL_TIM_PWM_Start+0x92>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d108      	bne.n	8003c1e <HAL_TIM_PWM_Start+0x3a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	223f      	movs	r2, #63	@ 0x3f
 8003c10:	5c9b      	ldrb	r3, [r3, r2]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	1e5a      	subs	r2, r3, #1
 8003c18:	4193      	sbcs	r3, r2
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	e02b      	b.n	8003c76 <HAL_TIM_PWM_Start+0x92>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d108      	bne.n	8003c36 <HAL_TIM_PWM_Start+0x52>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2240      	movs	r2, #64	@ 0x40
 8003c28:	5c9b      	ldrb	r3, [r3, r2]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	1e5a      	subs	r2, r3, #1
 8003c30:	4193      	sbcs	r3, r2
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	e01f      	b.n	8003c76 <HAL_TIM_PWM_Start+0x92>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	d108      	bne.n	8003c4e <HAL_TIM_PWM_Start+0x6a>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2241      	movs	r2, #65	@ 0x41
 8003c40:	5c9b      	ldrb	r3, [r3, r2]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	1e5a      	subs	r2, r3, #1
 8003c48:	4193      	sbcs	r3, r2
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	e013      	b.n	8003c76 <HAL_TIM_PWM_Start+0x92>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d108      	bne.n	8003c66 <HAL_TIM_PWM_Start+0x82>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2242      	movs	r2, #66	@ 0x42
 8003c58:	5c9b      	ldrb	r3, [r3, r2]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	1e5a      	subs	r2, r3, #1
 8003c60:	4193      	sbcs	r3, r2
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	e007      	b.n	8003c76 <HAL_TIM_PWM_Start+0x92>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2243      	movs	r2, #67	@ 0x43
 8003c6a:	5c9b      	ldrb	r3, [r3, r2]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	1e5a      	subs	r2, r3, #1
 8003c72:	4193      	sbcs	r3, r2
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e07b      	b.n	8003d76 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <HAL_TIM_PWM_Start+0xaa>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	223e      	movs	r2, #62	@ 0x3e
 8003c88:	2102      	movs	r1, #2
 8003c8a:	5499      	strb	r1, [r3, r2]
 8003c8c:	e023      	b.n	8003cd6 <HAL_TIM_PWM_Start+0xf2>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d104      	bne.n	8003c9e <HAL_TIM_PWM_Start+0xba>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	223f      	movs	r2, #63	@ 0x3f
 8003c98:	2102      	movs	r1, #2
 8003c9a:	5499      	strb	r1, [r3, r2]
 8003c9c:	e01b      	b.n	8003cd6 <HAL_TIM_PWM_Start+0xf2>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d104      	bne.n	8003cae <HAL_TIM_PWM_Start+0xca>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2240      	movs	r2, #64	@ 0x40
 8003ca8:	2102      	movs	r1, #2
 8003caa:	5499      	strb	r1, [r3, r2]
 8003cac:	e013      	b.n	8003cd6 <HAL_TIM_PWM_Start+0xf2>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	d104      	bne.n	8003cbe <HAL_TIM_PWM_Start+0xda>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2241      	movs	r2, #65	@ 0x41
 8003cb8:	2102      	movs	r1, #2
 8003cba:	5499      	strb	r1, [r3, r2]
 8003cbc:	e00b      	b.n	8003cd6 <HAL_TIM_PWM_Start+0xf2>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d104      	bne.n	8003cce <HAL_TIM_PWM_Start+0xea>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2242      	movs	r2, #66	@ 0x42
 8003cc8:	2102      	movs	r1, #2
 8003cca:	5499      	strb	r1, [r3, r2]
 8003ccc:	e003      	b.n	8003cd6 <HAL_TIM_PWM_Start+0xf2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2243      	movs	r2, #67	@ 0x43
 8003cd2:	2102      	movs	r1, #2
 8003cd4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6839      	ldr	r1, [r7, #0]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 ff8e 	bl	8004c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a25      	ldr	r2, [pc, #148]	@ (8003d80 <HAL_TIM_PWM_Start+0x19c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d009      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x11e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a24      	ldr	r2, [pc, #144]	@ (8003d84 <HAL_TIM_PWM_Start+0x1a0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d004      	beq.n	8003d02 <HAL_TIM_PWM_Start+0x11e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a22      	ldr	r2, [pc, #136]	@ (8003d88 <HAL_TIM_PWM_Start+0x1a4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_PWM_Start+0x122>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_TIM_PWM_Start+0x124>
 8003d06:	2300      	movs	r3, #0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2180      	movs	r1, #128	@ 0x80
 8003d18:	0209      	lsls	r1, r1, #8
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a17      	ldr	r2, [pc, #92]	@ (8003d80 <HAL_TIM_PWM_Start+0x19c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_TIM_PWM_Start+0x14e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a17      	ldr	r2, [pc, #92]	@ (8003d8c <HAL_TIM_PWM_Start+0x1a8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d116      	bne.n	8003d60 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a15      	ldr	r2, [pc, #84]	@ (8003d90 <HAL_TIM_PWM_Start+0x1ac>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b06      	cmp	r3, #6
 8003d42:	d016      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x18e>
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	025b      	lsls	r3, r3, #9
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d011      	beq.n	8003d72 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2101      	movs	r1, #1
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d5e:	e008      	b.n	8003d72 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e000      	b.n	8003d74 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d72:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	0018      	movs	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b004      	add	sp, #16
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	46c0      	nop			@ (mov r8, r8)
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	00010007 	.word	0x00010007

08003d94 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6839      	ldr	r1, [r7, #0]
 8003da4:	2200      	movs	r2, #0
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 ff2a 	bl	8004c00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a35      	ldr	r2, [pc, #212]	@ (8003e88 <HAL_TIM_PWM_Stop+0xf4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_TIM_PWM_Stop+0x36>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a34      	ldr	r2, [pc, #208]	@ (8003e8c <HAL_TIM_PWM_Stop+0xf8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_TIM_PWM_Stop+0x36>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a32      	ldr	r2, [pc, #200]	@ (8003e90 <HAL_TIM_PWM_Stop+0xfc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d101      	bne.n	8003dce <HAL_TIM_PWM_Stop+0x3a>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_TIM_PWM_Stop+0x3c>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d013      	beq.n	8003dfc <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	4a2e      	ldr	r2, [pc, #184]	@ (8003e94 <HAL_TIM_PWM_Stop+0x100>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d10d      	bne.n	8003dfc <HAL_TIM_PWM_Stop+0x68>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e98 <HAL_TIM_PWM_Stop+0x104>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	d107      	bne.n	8003dfc <HAL_TIM_PWM_Stop+0x68>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4929      	ldr	r1, [pc, #164]	@ (8003e9c <HAL_TIM_PWM_Stop+0x108>)
 8003df8:	400a      	ands	r2, r1
 8003dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4a24      	ldr	r2, [pc, #144]	@ (8003e94 <HAL_TIM_PWM_Stop+0x100>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	d10d      	bne.n	8003e24 <HAL_TIM_PWM_Stop+0x90>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	4a22      	ldr	r2, [pc, #136]	@ (8003e98 <HAL_TIM_PWM_Stop+0x104>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	d107      	bne.n	8003e24 <HAL_TIM_PWM_Stop+0x90>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2101      	movs	r1, #1
 8003e20:	438a      	bics	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d104      	bne.n	8003e34 <HAL_TIM_PWM_Stop+0xa0>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	223e      	movs	r2, #62	@ 0x3e
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]
 8003e32:	e023      	b.n	8003e7c <HAL_TIM_PWM_Stop+0xe8>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d104      	bne.n	8003e44 <HAL_TIM_PWM_Stop+0xb0>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	223f      	movs	r2, #63	@ 0x3f
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]
 8003e42:	e01b      	b.n	8003e7c <HAL_TIM_PWM_Stop+0xe8>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d104      	bne.n	8003e54 <HAL_TIM_PWM_Stop+0xc0>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2240      	movs	r2, #64	@ 0x40
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5499      	strb	r1, [r3, r2]
 8003e52:	e013      	b.n	8003e7c <HAL_TIM_PWM_Stop+0xe8>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b0c      	cmp	r3, #12
 8003e58:	d104      	bne.n	8003e64 <HAL_TIM_PWM_Stop+0xd0>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2241      	movs	r2, #65	@ 0x41
 8003e5e:	2101      	movs	r1, #1
 8003e60:	5499      	strb	r1, [r3, r2]
 8003e62:	e00b      	b.n	8003e7c <HAL_TIM_PWM_Stop+0xe8>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d104      	bne.n	8003e74 <HAL_TIM_PWM_Stop+0xe0>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2242      	movs	r2, #66	@ 0x42
 8003e6e:	2101      	movs	r1, #1
 8003e70:	5499      	strb	r1, [r3, r2]
 8003e72:	e003      	b.n	8003e7c <HAL_TIM_PWM_Stop+0xe8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2243      	movs	r2, #67	@ 0x43
 8003e78:	2101      	movs	r1, #1
 8003e7a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b002      	add	sp, #8
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40014400 	.word	0x40014400
 8003e90:	40014800 	.word	0x40014800
 8003e94:	00001111 	.word	0x00001111
 8003e98:	00000444 	.word	0x00000444
 8003e9c:	ffff7fff 	.word	0xffff7fff

08003ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d021      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d01d      	beq.n	8003f04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	4252      	negs	r2, r2
 8003ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2203      	movs	r2, #3
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d004      	beq.n	8003eee <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 fac0 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 8003eec:	e007      	b.n	8003efe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f000 fab3 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f000 fabf 	bl	800447c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2204      	movs	r2, #4
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	4013      	ands	r3, r2
 8003f12:	d01e      	beq.n	8003f52 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2205      	movs	r2, #5
 8003f1a:	4252      	negs	r2, r2
 8003f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	23c0      	movs	r3, #192	@ 0xc0
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f000 fa99 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 8003f3a:	e007      	b.n	8003f4c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f000 fa8c 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f000 fa98 	bl	800447c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2208      	movs	r2, #8
 8003f56:	4013      	ands	r3, r2
 8003f58:	d021      	beq.n	8003f9e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d01d      	beq.n	8003f9e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2209      	movs	r2, #9
 8003f68:	4252      	negs	r2, r2
 8003f6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2204      	movs	r2, #4
 8003f70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	2203      	movs	r2, #3
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	0018      	movs	r0, r3
 8003f82:	f000 fa73 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 8003f86:	e007      	b.n	8003f98 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 fa66 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	0018      	movs	r0, r3
 8003f94:	f000 fa72 	bl	800447c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2210      	movs	r2, #16
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d022      	beq.n	8003fec <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2210      	movs	r2, #16
 8003faa:	4013      	ands	r3, r2
 8003fac:	d01e      	beq.n	8003fec <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2211      	movs	r2, #17
 8003fb4:	4252      	negs	r2, r2
 8003fb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2208      	movs	r2, #8
 8003fbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69da      	ldr	r2, [r3, #28]
 8003fc4:	23c0      	movs	r3, #192	@ 0xc0
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	0018      	movs	r0, r3
 8003fd0:	f000 fa4c 	bl	800446c <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e007      	b.n	8003fe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 fa3f 	bl	800445c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f000 fa4b 	bl	800447c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d00c      	beq.n	800400e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d008      	beq.n	800400e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2202      	movs	r2, #2
 8004002:	4252      	negs	r2, r2
 8004004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	0018      	movs	r0, r3
 800400a:	f7fc fd93 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2280      	movs	r2, #128	@ 0x80
 8004012:	4013      	ands	r3, r2
 8004014:	d104      	bne.n	8004020 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	2380      	movs	r3, #128	@ 0x80
 800401a:	019b      	lsls	r3, r3, #6
 800401c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800401e:	d00b      	beq.n	8004038 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2280      	movs	r2, #128	@ 0x80
 8004024:	4013      	ands	r3, r2
 8004026:	d007      	beq.n	8004038 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1e      	ldr	r2, [pc, #120]	@ (80040a8 <HAL_TIM_IRQHandler+0x208>)
 800402e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	0018      	movs	r0, r3
 8004034:	f000 ff0e 	bl	8004e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	2380      	movs	r3, #128	@ 0x80
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4013      	ands	r3, r2
 8004040:	d00b      	beq.n	800405a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2280      	movs	r2, #128	@ 0x80
 8004046:	4013      	ands	r3, r2
 8004048:	d007      	beq.n	800405a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a17      	ldr	r2, [pc, #92]	@ (80040ac <HAL_TIM_IRQHandler+0x20c>)
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0018      	movs	r0, r3
 8004056:	f000 ff05 	bl	8004e64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2240      	movs	r2, #64	@ 0x40
 800405e:	4013      	ands	r3, r2
 8004060:	d00c      	beq.n	800407c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2240      	movs	r2, #64	@ 0x40
 8004066:	4013      	ands	r3, r2
 8004068:	d008      	beq.n	800407c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2241      	movs	r2, #65	@ 0x41
 8004070:	4252      	negs	r2, r2
 8004072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	0018      	movs	r0, r3
 8004078:	f000 fa08 	bl	800448c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2220      	movs	r2, #32
 8004080:	4013      	ands	r3, r2
 8004082:	d00c      	beq.n	800409e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	4013      	ands	r3, r2
 800408a:	d008      	beq.n	800409e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2221      	movs	r2, #33	@ 0x21
 8004092:	4252      	negs	r2, r2
 8004094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f000 fed3 	bl	8004e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b004      	add	sp, #16
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	ffffdf7f 	.word	0xffffdf7f
 80040ac:	fffffeff 	.word	0xfffffeff

080040b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040bc:	2317      	movs	r3, #23
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	223c      	movs	r2, #60	@ 0x3c
 80040c8:	5c9b      	ldrb	r3, [r3, r2]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e0e5      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	223c      	movs	r2, #60	@ 0x3c
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b14      	cmp	r3, #20
 80040de:	d900      	bls.n	80040e2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80040e0:	e0d1      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	009a      	lsls	r2, r3, #2
 80040e6:	4b70      	ldr	r3, [pc, #448]	@ (80042a8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80040e8:	18d3      	adds	r3, r2, r3
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	0011      	movs	r1, r2
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 fa4a 	bl	8004590 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2108      	movs	r1, #8
 8004108:	430a      	orrs	r2, r1
 800410a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2104      	movs	r1, #4
 8004118:	438a      	bics	r2, r1
 800411a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6999      	ldr	r1, [r3, #24]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	619a      	str	r2, [r3, #24]
      break;
 800412e:	e0af      	b.n	8004290 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	0011      	movs	r1, r2
 8004138:	0018      	movs	r0, r3
 800413a:	f000 faa9 	bl	8004690 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699a      	ldr	r2, [r3, #24]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2180      	movs	r1, #128	@ 0x80
 800414a:	0109      	lsls	r1, r1, #4
 800414c:	430a      	orrs	r2, r1
 800414e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4954      	ldr	r1, [pc, #336]	@ (80042ac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800415c:	400a      	ands	r2, r1
 800415e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6999      	ldr	r1, [r3, #24]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	021a      	lsls	r2, r3, #8
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	619a      	str	r2, [r3, #24]
      break;
 8004174:	e08c      	b.n	8004290 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	0011      	movs	r1, r2
 800417e:	0018      	movs	r0, r3
 8004180:	f000 fb04 	bl	800478c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69da      	ldr	r2, [r3, #28]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2108      	movs	r1, #8
 8004190:	430a      	orrs	r2, r1
 8004192:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2104      	movs	r1, #4
 80041a0:	438a      	bics	r2, r1
 80041a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69d9      	ldr	r1, [r3, #28]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	61da      	str	r2, [r3, #28]
      break;
 80041b6:	e06b      	b.n	8004290 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	0011      	movs	r1, r2
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 fb65 	bl	8004890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2180      	movs	r1, #128	@ 0x80
 80041d2:	0109      	lsls	r1, r1, #4
 80041d4:	430a      	orrs	r2, r1
 80041d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4932      	ldr	r1, [pc, #200]	@ (80042ac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69d9      	ldr	r1, [r3, #28]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	61da      	str	r2, [r3, #28]
      break;
 80041fc:	e048      	b.n	8004290 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	0011      	movs	r1, r2
 8004206:	0018      	movs	r0, r3
 8004208:	f000 fba6 	bl	8004958 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2108      	movs	r1, #8
 8004218:	430a      	orrs	r2, r1
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2104      	movs	r1, #4
 8004228:	438a      	bics	r2, r1
 800422a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800423e:	e027      	b.n	8004290 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	0011      	movs	r1, r2
 8004248:	0018      	movs	r0, r3
 800424a:	f000 fbdf 	bl	8004a0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2180      	movs	r1, #128	@ 0x80
 800425a:	0109      	lsls	r1, r1, #4
 800425c:	430a      	orrs	r2, r1
 800425e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4910      	ldr	r1, [pc, #64]	@ (80042ac <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800426c:	400a      	ands	r2, r1
 800426e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	021a      	lsls	r2, r3, #8
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004284:	e004      	b.n	8004290 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004286:	2317      	movs	r3, #23
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
      break;
 800428e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	223c      	movs	r2, #60	@ 0x3c
 8004294:	2100      	movs	r1, #0
 8004296:	5499      	strb	r1, [r3, r2]

  return status;
 8004298:	2317      	movs	r3, #23
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	781b      	ldrb	r3, [r3, #0]
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b006      	add	sp, #24
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	08004f24 	.word	0x08004f24
 80042ac:	fffffbff 	.word	0xfffffbff

080042b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ba:	230f      	movs	r3, #15
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	223c      	movs	r2, #60	@ 0x3c
 80042c6:	5c9b      	ldrb	r3, [r3, r2]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIM_ConfigClockSource+0x20>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e0bc      	b.n	800444a <HAL_TIM_ConfigClockSource+0x19a>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	223c      	movs	r2, #60	@ 0x3c
 80042d4:	2101      	movs	r1, #1
 80042d6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	223d      	movs	r2, #61	@ 0x3d
 80042dc:	2102      	movs	r1, #2
 80042de:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4a5a      	ldr	r2, [pc, #360]	@ (8004454 <HAL_TIM_ConfigClockSource+0x1a4>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a59      	ldr	r2, [pc, #356]	@ (8004458 <HAL_TIM_ConfigClockSource+0x1a8>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2280      	movs	r2, #128	@ 0x80
 8004306:	0192      	lsls	r2, r2, #6
 8004308:	4293      	cmp	r3, r2
 800430a:	d040      	beq.n	800438e <HAL_TIM_ConfigClockSource+0xde>
 800430c:	2280      	movs	r2, #128	@ 0x80
 800430e:	0192      	lsls	r2, r2, #6
 8004310:	4293      	cmp	r3, r2
 8004312:	d900      	bls.n	8004316 <HAL_TIM_ConfigClockSource+0x66>
 8004314:	e088      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
 8004316:	2280      	movs	r2, #128	@ 0x80
 8004318:	0152      	lsls	r2, r2, #5
 800431a:	4293      	cmp	r3, r2
 800431c:	d100      	bne.n	8004320 <HAL_TIM_ConfigClockSource+0x70>
 800431e:	e088      	b.n	8004432 <HAL_TIM_ConfigClockSource+0x182>
 8004320:	2280      	movs	r2, #128	@ 0x80
 8004322:	0152      	lsls	r2, r2, #5
 8004324:	4293      	cmp	r3, r2
 8004326:	d900      	bls.n	800432a <HAL_TIM_ConfigClockSource+0x7a>
 8004328:	e07e      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
 800432a:	2b70      	cmp	r3, #112	@ 0x70
 800432c:	d018      	beq.n	8004360 <HAL_TIM_ConfigClockSource+0xb0>
 800432e:	d900      	bls.n	8004332 <HAL_TIM_ConfigClockSource+0x82>
 8004330:	e07a      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
 8004332:	2b60      	cmp	r3, #96	@ 0x60
 8004334:	d04f      	beq.n	80043d6 <HAL_TIM_ConfigClockSource+0x126>
 8004336:	d900      	bls.n	800433a <HAL_TIM_ConfigClockSource+0x8a>
 8004338:	e076      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
 800433a:	2b50      	cmp	r3, #80	@ 0x50
 800433c:	d03b      	beq.n	80043b6 <HAL_TIM_ConfigClockSource+0x106>
 800433e:	d900      	bls.n	8004342 <HAL_TIM_ConfigClockSource+0x92>
 8004340:	e072      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
 8004342:	2b40      	cmp	r3, #64	@ 0x40
 8004344:	d057      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0x146>
 8004346:	d900      	bls.n	800434a <HAL_TIM_ConfigClockSource+0x9a>
 8004348:	e06e      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
 800434a:	2b30      	cmp	r3, #48	@ 0x30
 800434c:	d063      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x166>
 800434e:	d86b      	bhi.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
 8004350:	2b20      	cmp	r3, #32
 8004352:	d060      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x166>
 8004354:	d868      	bhi.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d05d      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x166>
 800435a:	2b10      	cmp	r3, #16
 800435c:	d05b      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x166>
 800435e:	e063      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004370:	f000 fc26 	bl	8004bc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2277      	movs	r2, #119	@ 0x77
 8004380:	4313      	orrs	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	609a      	str	r2, [r3, #8]
      break;
 800438c:	e052      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800439e:	f000 fc0f 	bl	8004bc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2180      	movs	r1, #128	@ 0x80
 80043ae:	01c9      	lsls	r1, r1, #7
 80043b0:	430a      	orrs	r2, r1
 80043b2:	609a      	str	r2, [r3, #8]
      break;
 80043b4:	e03e      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c2:	001a      	movs	r2, r3
 80043c4:	f000 fb80 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2150      	movs	r1, #80	@ 0x50
 80043ce:	0018      	movs	r0, r3
 80043d0:	f000 fbda 	bl	8004b88 <TIM_ITRx_SetConfig>
      break;
 80043d4:	e02e      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e2:	001a      	movs	r2, r3
 80043e4:	f000 fb9e 	bl	8004b24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2160      	movs	r1, #96	@ 0x60
 80043ee:	0018      	movs	r0, r3
 80043f0:	f000 fbca 	bl	8004b88 <TIM_ITRx_SetConfig>
      break;
 80043f4:	e01e      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004402:	001a      	movs	r2, r3
 8004404:	f000 fb60 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2140      	movs	r1, #64	@ 0x40
 800440e:	0018      	movs	r0, r3
 8004410:	f000 fbba 	bl	8004b88 <TIM_ITRx_SetConfig>
      break;
 8004414:	e00e      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	0019      	movs	r1, r3
 8004420:	0010      	movs	r0, r2
 8004422:	f000 fbb1 	bl	8004b88 <TIM_ITRx_SetConfig>
      break;
 8004426:	e005      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004428:	230f      	movs	r3, #15
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	2201      	movs	r2, #1
 800442e:	701a      	strb	r2, [r3, #0]
      break;
 8004430:	e000      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004432:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	223d      	movs	r2, #61	@ 0x3d
 8004438:	2101      	movs	r1, #1
 800443a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	223c      	movs	r2, #60	@ 0x3c
 8004440:	2100      	movs	r1, #0
 8004442:	5499      	strb	r1, [r3, r2]

  return status;
 8004444:	230f      	movs	r3, #15
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	781b      	ldrb	r3, [r3, #0]
}
 800444a:	0018      	movs	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	b004      	add	sp, #16
 8004450:	bd80      	pop	{r7, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	ffceff88 	.word	0xffceff88
 8004458:	ffff00ff 	.word	0xffff00ff

0800445c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004464:	46c0      	nop			@ (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	b002      	add	sp, #8
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004474:	46c0      	nop			@ (mov r8, r8)
 8004476:	46bd      	mov	sp, r7
 8004478:	b002      	add	sp, #8
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004484:	46c0      	nop			@ (mov r8, r8)
 8004486:	46bd      	mov	sp, r7
 8004488:	b002      	add	sp, #8
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004494:	46c0      	nop			@ (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b002      	add	sp, #8
 800449a:	bd80      	pop	{r7, pc}

0800449c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a32      	ldr	r2, [pc, #200]	@ (8004578 <TIM_Base_SetConfig+0xdc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0x20>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a31      	ldr	r2, [pc, #196]	@ (800457c <TIM_Base_SetConfig+0xe0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2270      	movs	r2, #112	@ 0x70
 80044c0:	4393      	bics	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a29      	ldr	r2, [pc, #164]	@ (8004578 <TIM_Base_SetConfig+0xdc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d00f      	beq.n	80044f6 <TIM_Base_SetConfig+0x5a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a28      	ldr	r2, [pc, #160]	@ (800457c <TIM_Base_SetConfig+0xe0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00b      	beq.n	80044f6 <TIM_Base_SetConfig+0x5a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a27      	ldr	r2, [pc, #156]	@ (8004580 <TIM_Base_SetConfig+0xe4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d007      	beq.n	80044f6 <TIM_Base_SetConfig+0x5a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a26      	ldr	r2, [pc, #152]	@ (8004584 <TIM_Base_SetConfig+0xe8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_Base_SetConfig+0x5a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a25      	ldr	r2, [pc, #148]	@ (8004588 <TIM_Base_SetConfig+0xec>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d108      	bne.n	8004508 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a24      	ldr	r2, [pc, #144]	@ (800458c <TIM_Base_SetConfig+0xf0>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2280      	movs	r2, #128	@ 0x80
 800450c:	4393      	bics	r3, r2
 800450e:	001a      	movs	r2, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a11      	ldr	r2, [pc, #68]	@ (8004578 <TIM_Base_SetConfig+0xdc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d007      	beq.n	8004546 <TIM_Base_SetConfig+0xaa>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a12      	ldr	r2, [pc, #72]	@ (8004584 <TIM_Base_SetConfig+0xe8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d003      	beq.n	8004546 <TIM_Base_SetConfig+0xaa>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a11      	ldr	r2, [pc, #68]	@ (8004588 <TIM_Base_SetConfig+0xec>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d103      	bne.n	800454e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2201      	movs	r2, #1
 800455a:	4013      	ands	r3, r2
 800455c:	2b01      	cmp	r3, #1
 800455e:	d106      	bne.n	800456e <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2201      	movs	r2, #1
 8004566:	4393      	bics	r3, r2
 8004568:	001a      	movs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	611a      	str	r2, [r3, #16]
  }
}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	b004      	add	sp, #16
 8004574:	bd80      	pop	{r7, pc}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40000400 	.word	0x40000400
 8004580:	40002000 	.word	0x40002000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800
 800458c:	fffffcff 	.word	0xfffffcff

08004590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	2201      	movs	r2, #1
 80045a6:	4393      	bics	r3, r2
 80045a8:	001a      	movs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004678 <TIM_OC1_SetConfig+0xe8>)
 80045be:	4013      	ands	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2203      	movs	r2, #3
 80045c6:	4393      	bics	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2202      	movs	r2, #2
 80045d8:	4393      	bics	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a24      	ldr	r2, [pc, #144]	@ (800467c <TIM_OC1_SetConfig+0xec>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d007      	beq.n	80045fe <TIM_OC1_SetConfig+0x6e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a23      	ldr	r2, [pc, #140]	@ (8004680 <TIM_OC1_SetConfig+0xf0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d003      	beq.n	80045fe <TIM_OC1_SetConfig+0x6e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a22      	ldr	r2, [pc, #136]	@ (8004684 <TIM_OC1_SetConfig+0xf4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d10c      	bne.n	8004618 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2208      	movs	r2, #8
 8004602:	4393      	bics	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2204      	movs	r2, #4
 8004614:	4393      	bics	r3, r2
 8004616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a18      	ldr	r2, [pc, #96]	@ (800467c <TIM_OC1_SetConfig+0xec>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d007      	beq.n	8004630 <TIM_OC1_SetConfig+0xa0>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a17      	ldr	r2, [pc, #92]	@ (8004680 <TIM_OC1_SetConfig+0xf0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d003      	beq.n	8004630 <TIM_OC1_SetConfig+0xa0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a16      	ldr	r2, [pc, #88]	@ (8004684 <TIM_OC1_SetConfig+0xf4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d111      	bne.n	8004654 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4a15      	ldr	r2, [pc, #84]	@ (8004688 <TIM_OC1_SetConfig+0xf8>)
 8004634:	4013      	ands	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	4a14      	ldr	r2, [pc, #80]	@ (800468c <TIM_OC1_SetConfig+0xfc>)
 800463c:	4013      	ands	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	46bd      	mov	sp, r7
 8004672:	b006      	add	sp, #24
 8004674:	bd80      	pop	{r7, pc}
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	fffeff8f 	.word	0xfffeff8f
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40014400 	.word	0x40014400
 8004684:	40014800 	.word	0x40014800
 8004688:	fffffeff 	.word	0xfffffeff
 800468c:	fffffdff 	.word	0xfffffdff

08004690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	2210      	movs	r2, #16
 80046a6:	4393      	bics	r3, r2
 80046a8:	001a      	movs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004770 <TIM_OC2_SetConfig+0xe0>)
 80046be:	4013      	ands	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004774 <TIM_OC2_SetConfig+0xe4>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	021b      	lsls	r3, r3, #8
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2220      	movs	r2, #32
 80046da:	4393      	bics	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a22      	ldr	r2, [pc, #136]	@ (8004778 <TIM_OC2_SetConfig+0xe8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10d      	bne.n	800470e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2280      	movs	r2, #128	@ 0x80
 80046f6:	4393      	bics	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2240      	movs	r2, #64	@ 0x40
 800470a:	4393      	bics	r3, r2
 800470c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a19      	ldr	r2, [pc, #100]	@ (8004778 <TIM_OC2_SetConfig+0xe8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_OC2_SetConfig+0x96>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a18      	ldr	r2, [pc, #96]	@ (800477c <TIM_OC2_SetConfig+0xec>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_OC2_SetConfig+0x96>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a17      	ldr	r2, [pc, #92]	@ (8004780 <TIM_OC2_SetConfig+0xf0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d113      	bne.n	800474e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4a16      	ldr	r2, [pc, #88]	@ (8004784 <TIM_OC2_SetConfig+0xf4>)
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4a15      	ldr	r2, [pc, #84]	@ (8004788 <TIM_OC2_SetConfig+0xf8>)
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	621a      	str	r2, [r3, #32]
}
 8004768:	46c0      	nop			@ (mov r8, r8)
 800476a:	46bd      	mov	sp, r7
 800476c:	b006      	add	sp, #24
 800476e:	bd80      	pop	{r7, pc}
 8004770:	feff8fff 	.word	0xfeff8fff
 8004774:	fffffcff 	.word	0xfffffcff
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40014400 	.word	0x40014400
 8004780:	40014800 	.word	0x40014800
 8004784:	fffffbff 	.word	0xfffffbff
 8004788:	fffff7ff 	.word	0xfffff7ff

0800478c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	4a31      	ldr	r2, [pc, #196]	@ (8004868 <TIM_OC3_SetConfig+0xdc>)
 80047a2:	401a      	ands	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a2d      	ldr	r2, [pc, #180]	@ (800486c <TIM_OC3_SetConfig+0xe0>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2203      	movs	r2, #3
 80047c0:	4393      	bics	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	4a27      	ldr	r2, [pc, #156]	@ (8004870 <TIM_OC3_SetConfig+0xe4>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	021b      	lsls	r3, r3, #8
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a23      	ldr	r2, [pc, #140]	@ (8004874 <TIM_OC3_SetConfig+0xe8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10d      	bne.n	8004806 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4a22      	ldr	r2, [pc, #136]	@ (8004878 <TIM_OC3_SetConfig+0xec>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	4a1e      	ldr	r2, [pc, #120]	@ (800487c <TIM_OC3_SetConfig+0xf0>)
 8004802:	4013      	ands	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1a      	ldr	r2, [pc, #104]	@ (8004874 <TIM_OC3_SetConfig+0xe8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d007      	beq.n	800481e <TIM_OC3_SetConfig+0x92>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1b      	ldr	r2, [pc, #108]	@ (8004880 <TIM_OC3_SetConfig+0xf4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d003      	beq.n	800481e <TIM_OC3_SetConfig+0x92>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a1a      	ldr	r2, [pc, #104]	@ (8004884 <TIM_OC3_SetConfig+0xf8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d113      	bne.n	8004846 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	4a19      	ldr	r2, [pc, #100]	@ (8004888 <TIM_OC3_SetConfig+0xfc>)
 8004822:	4013      	ands	r3, r2
 8004824:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	4a18      	ldr	r2, [pc, #96]	@ (800488c <TIM_OC3_SetConfig+0x100>)
 800482a:	4013      	ands	r3, r2
 800482c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	621a      	str	r2, [r3, #32]
}
 8004860:	46c0      	nop			@ (mov r8, r8)
 8004862:	46bd      	mov	sp, r7
 8004864:	b006      	add	sp, #24
 8004866:	bd80      	pop	{r7, pc}
 8004868:	fffffeff 	.word	0xfffffeff
 800486c:	fffeff8f 	.word	0xfffeff8f
 8004870:	fffffdff 	.word	0xfffffdff
 8004874:	40012c00 	.word	0x40012c00
 8004878:	fffff7ff 	.word	0xfffff7ff
 800487c:	fffffbff 	.word	0xfffffbff
 8004880:	40014400 	.word	0x40014400
 8004884:	40014800 	.word	0x40014800
 8004888:	ffffefff 	.word	0xffffefff
 800488c:	ffffdfff 	.word	0xffffdfff

08004890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	4a24      	ldr	r2, [pc, #144]	@ (8004938 <TIM_OC4_SetConfig+0xa8>)
 80048a6:	401a      	ands	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a20      	ldr	r2, [pc, #128]	@ (800493c <TIM_OC4_SetConfig+0xac>)
 80048bc:	4013      	ands	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004940 <TIM_OC4_SetConfig+0xb0>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	021b      	lsls	r3, r3, #8
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004944 <TIM_OC4_SetConfig+0xb4>)
 80048d8:	4013      	ands	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	031b      	lsls	r3, r3, #12
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a17      	ldr	r2, [pc, #92]	@ (8004948 <TIM_OC4_SetConfig+0xb8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d007      	beq.n	8004900 <TIM_OC4_SetConfig+0x70>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a16      	ldr	r2, [pc, #88]	@ (800494c <TIM_OC4_SetConfig+0xbc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_OC4_SetConfig+0x70>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a15      	ldr	r2, [pc, #84]	@ (8004950 <TIM_OC4_SetConfig+0xc0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d109      	bne.n	8004914 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	4a14      	ldr	r2, [pc, #80]	@ (8004954 <TIM_OC4_SetConfig+0xc4>)
 8004904:	4013      	ands	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	019b      	lsls	r3, r3, #6
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	46c0      	nop			@ (mov r8, r8)
 8004930:	46bd      	mov	sp, r7
 8004932:	b006      	add	sp, #24
 8004934:	bd80      	pop	{r7, pc}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	ffffefff 	.word	0xffffefff
 800493c:	feff8fff 	.word	0xfeff8fff
 8004940:	fffffcff 	.word	0xfffffcff
 8004944:	ffffdfff 	.word	0xffffdfff
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800
 8004954:	ffffbfff 	.word	0xffffbfff

08004958 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	4a21      	ldr	r2, [pc, #132]	@ (80049f4 <TIM_OC5_SetConfig+0x9c>)
 800496e:	401a      	ands	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a1d      	ldr	r2, [pc, #116]	@ (80049f8 <TIM_OC5_SetConfig+0xa0>)
 8004984:	4013      	ands	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4a19      	ldr	r2, [pc, #100]	@ (80049fc <TIM_OC5_SetConfig+0xa4>)
 8004996:	4013      	ands	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a15      	ldr	r2, [pc, #84]	@ (8004a00 <TIM_OC5_SetConfig+0xa8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_OC5_SetConfig+0x66>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a14      	ldr	r2, [pc, #80]	@ (8004a04 <TIM_OC5_SetConfig+0xac>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC5_SetConfig+0x66>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a13      	ldr	r2, [pc, #76]	@ (8004a08 <TIM_OC5_SetConfig+0xb0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d109      	bne.n	80049d2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4a0c      	ldr	r2, [pc, #48]	@ (80049f4 <TIM_OC5_SetConfig+0x9c>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	46c0      	nop			@ (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b006      	add	sp, #24
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	fffeffff 	.word	0xfffeffff
 80049f8:	fffeff8f 	.word	0xfffeff8f
 80049fc:	fffdffff 	.word	0xfffdffff
 8004a00:	40012c00 	.word	0x40012c00
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800

08004a0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	4a22      	ldr	r2, [pc, #136]	@ (8004aac <TIM_OC6_SetConfig+0xa0>)
 8004a22:	401a      	ands	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab0 <TIM_OC6_SetConfig+0xa4>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ab4 <TIM_OC6_SetConfig+0xa8>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	051b      	lsls	r3, r3, #20
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a16      	ldr	r2, [pc, #88]	@ (8004ab8 <TIM_OC6_SetConfig+0xac>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d007      	beq.n	8004a74 <TIM_OC6_SetConfig+0x68>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a15      	ldr	r2, [pc, #84]	@ (8004abc <TIM_OC6_SetConfig+0xb0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <TIM_OC6_SetConfig+0x68>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a14      	ldr	r2, [pc, #80]	@ (8004ac0 <TIM_OC6_SetConfig+0xb4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d109      	bne.n	8004a88 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	4a13      	ldr	r2, [pc, #76]	@ (8004ac4 <TIM_OC6_SetConfig+0xb8>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	46c0      	nop			@ (mov r8, r8)
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b006      	add	sp, #24
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	ffefffff 	.word	0xffefffff
 8004ab0:	feff8fff 	.word	0xfeff8fff
 8004ab4:	ffdfffff 	.word	0xffdfffff
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40014400 	.word	0x40014400
 8004ac0:	40014800 	.word	0x40014800
 8004ac4:	fffbffff 	.word	0xfffbffff

08004ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4393      	bics	r3, r2
 8004ae2:	001a      	movs	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	22f0      	movs	r2, #240	@ 0xf0
 8004af2:	4393      	bics	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	220a      	movs	r2, #10
 8004b04:	4393      	bics	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	621a      	str	r2, [r3, #32]
}
 8004b1c:	46c0      	nop			@ (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b006      	add	sp, #24
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	2210      	movs	r2, #16
 8004b3c:	4393      	bics	r3, r2
 8004b3e:	001a      	movs	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b84 <TIM_TI2_ConfigInputStage+0x60>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	031b      	lsls	r3, r3, #12
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	22a0      	movs	r2, #160	@ 0xa0
 8004b60:	4393      	bics	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	b006      	add	sp, #24
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	ffff0fff 	.word	0xffff0fff

08004b88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4a08      	ldr	r2, [pc, #32]	@ (8004bbc <TIM_ITRx_SetConfig+0x34>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	2207      	movs	r2, #7
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	609a      	str	r2, [r3, #8]
}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	b004      	add	sp, #16
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	46c0      	nop			@ (mov r8, r8)
 8004bbc:	ffcfff8f 	.word	0xffcfff8f

08004bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4a09      	ldr	r2, [pc, #36]	@ (8004bfc <TIM_ETR_SetConfig+0x3c>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	021a      	lsls	r2, r3, #8
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	609a      	str	r2, [r3, #8]
}
 8004bf4:	46c0      	nop			@ (mov r8, r8)
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b006      	add	sp, #24
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	ffff00ff 	.word	0xffff00ff

08004c00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b086      	sub	sp, #24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	221f      	movs	r2, #31
 8004c10:	4013      	ands	r3, r2
 8004c12:	2201      	movs	r2, #1
 8004c14:	409a      	lsls	r2, r3
 8004c16:	0013      	movs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	43d2      	mvns	r2, r2
 8004c22:	401a      	ands	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a1a      	ldr	r2, [r3, #32]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	211f      	movs	r1, #31
 8004c30:	400b      	ands	r3, r1
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4099      	lsls	r1, r3
 8004c36:	000b      	movs	r3, r1
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	46c0      	nop			@ (mov r8, r8)
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b006      	add	sp, #24
 8004c44:	bd80      	pop	{r7, pc}
	...

08004c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	223c      	movs	r2, #60	@ 0x3c
 8004c56:	5c9b      	ldrb	r3, [r3, r2]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e04a      	b.n	8004cf6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	223c      	movs	r2, #60	@ 0x3c
 8004c64:	2101      	movs	r1, #1
 8004c66:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	223d      	movs	r2, #61	@ 0x3d
 8004c6c:	2102      	movs	r1, #2
 8004c6e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1e      	ldr	r2, [pc, #120]	@ (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d108      	bne.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2270      	movs	r2, #112	@ 0x70
 8004ca0:	4393      	bics	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a11      	ldr	r2, [pc, #68]	@ (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d004      	beq.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a10      	ldr	r2, [pc, #64]	@ (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2280      	movs	r2, #128	@ 0x80
 8004cce:	4393      	bics	r3, r2
 8004cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	223d      	movs	r2, #61	@ 0x3d
 8004ce8:	2101      	movs	r1, #1
 8004cea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	223c      	movs	r2, #60	@ 0x3c
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b004      	add	sp, #16
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	ff0fffff 	.word	0xff0fffff
 8004d08:	40000400 	.word	0x40000400

08004d0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	223c      	movs	r2, #60	@ 0x3c
 8004d1e:	5c9b      	ldrb	r3, [r3, r2]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e06f      	b.n	8004e08 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	223c      	movs	r2, #60	@ 0x3c
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	22ff      	movs	r2, #255	@ 0xff
 8004d34:	4393      	bics	r3, r2
 8004d36:	001a      	movs	r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a33      	ldr	r2, [pc, #204]	@ (8004e10 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004d44:	401a      	ands	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4a30      	ldr	r2, [pc, #192]	@ (8004e14 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004d52:	401a      	ands	r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4a2e      	ldr	r2, [pc, #184]	@ (8004e18 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8004d60:	401a      	ands	r2, r3
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004e1c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004d6e:	401a      	ands	r2, r3
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4a29      	ldr	r2, [pc, #164]	@ (8004e20 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004d7c:	401a      	ands	r2, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4a26      	ldr	r2, [pc, #152]	@ (8004e24 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004d8a:	401a      	ands	r2, r3
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a24      	ldr	r2, [pc, #144]	@ (8004e28 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004d98:	401a      	ands	r2, r3
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4a21      	ldr	r2, [pc, #132]	@ (8004e2c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004da8:	401a      	ands	r2, r3
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e30 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d11c      	bne.n	8004df6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8004e34 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004dc0:	401a      	ands	r2, r3
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc6:	051b      	lsls	r3, r3, #20
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4a1a      	ldr	r2, [pc, #104]	@ (8004e38 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004dd0:	401a      	ands	r2, r3
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4a17      	ldr	r2, [pc, #92]	@ (8004e3c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004dde:	401a      	ands	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4a15      	ldr	r2, [pc, #84]	@ (8004e40 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004dec:	401a      	ands	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	223c      	movs	r2, #60	@ 0x3c
 8004e02:	2100      	movs	r1, #0
 8004e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	0018      	movs	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b004      	add	sp, #16
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	fffffcff 	.word	0xfffffcff
 8004e14:	fffffbff 	.word	0xfffffbff
 8004e18:	fffff7ff 	.word	0xfffff7ff
 8004e1c:	ffffefff 	.word	0xffffefff
 8004e20:	ffffdfff 	.word	0xffffdfff
 8004e24:	ffffbfff 	.word	0xffffbfff
 8004e28:	fff0ffff 	.word	0xfff0ffff
 8004e2c:	efffffff 	.word	0xefffffff
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	ff0fffff 	.word	0xff0fffff
 8004e38:	feffffff 	.word	0xfeffffff
 8004e3c:	fdffffff 	.word	0xfdffffff
 8004e40:	dfffffff 	.word	0xdfffffff

08004e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e4c:	46c0      	nop			@ (mov r8, r8)
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b002      	add	sp, #8
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e5c:	46c0      	nop			@ (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e6c:	46c0      	nop			@ (mov r8, r8)
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b002      	add	sp, #8
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <memset>:
 8004e74:	0003      	movs	r3, r0
 8004e76:	1882      	adds	r2, r0, r2
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <memset+0xa>
 8004e7c:	4770      	bx	lr
 8004e7e:	7019      	strb	r1, [r3, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	e7f9      	b.n	8004e78 <memset+0x4>

08004e84 <__libc_init_array>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	2600      	movs	r6, #0
 8004e88:	4c0c      	ldr	r4, [pc, #48]	@ (8004ebc <__libc_init_array+0x38>)
 8004e8a:	4d0d      	ldr	r5, [pc, #52]	@ (8004ec0 <__libc_init_array+0x3c>)
 8004e8c:	1b64      	subs	r4, r4, r5
 8004e8e:	10a4      	asrs	r4, r4, #2
 8004e90:	42a6      	cmp	r6, r4
 8004e92:	d109      	bne.n	8004ea8 <__libc_init_array+0x24>
 8004e94:	2600      	movs	r6, #0
 8004e96:	f000 f819 	bl	8004ecc <_init>
 8004e9a:	4c0a      	ldr	r4, [pc, #40]	@ (8004ec4 <__libc_init_array+0x40>)
 8004e9c:	4d0a      	ldr	r5, [pc, #40]	@ (8004ec8 <__libc_init_array+0x44>)
 8004e9e:	1b64      	subs	r4, r4, r5
 8004ea0:	10a4      	asrs	r4, r4, #2
 8004ea2:	42a6      	cmp	r6, r4
 8004ea4:	d105      	bne.n	8004eb2 <__libc_init_array+0x2e>
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	00b3      	lsls	r3, r6, #2
 8004eaa:	58eb      	ldr	r3, [r5, r3]
 8004eac:	4798      	blx	r3
 8004eae:	3601      	adds	r6, #1
 8004eb0:	e7ee      	b.n	8004e90 <__libc_init_array+0xc>
 8004eb2:	00b3      	lsls	r3, r6, #2
 8004eb4:	58eb      	ldr	r3, [r5, r3]
 8004eb6:	4798      	blx	r3
 8004eb8:	3601      	adds	r6, #1
 8004eba:	e7f2      	b.n	8004ea2 <__libc_init_array+0x1e>
 8004ebc:	08004f78 	.word	0x08004f78
 8004ec0:	08004f78 	.word	0x08004f78
 8004ec4:	08004f7c 	.word	0x08004f7c
 8004ec8:	08004f78 	.word	0x08004f78

08004ecc <_init>:
 8004ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ece:	46c0      	nop			@ (mov r8, r8)
 8004ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed2:	bc08      	pop	{r3}
 8004ed4:	469e      	mov	lr, r3
 8004ed6:	4770      	bx	lr

08004ed8 <_fini>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ede:	bc08      	pop	{r3}
 8004ee0:	469e      	mov	lr, r3
 8004ee2:	4770      	bx	lr
